---
title: "Chapter 2 (Data Visualization)"
author: "Aditya Dahiya"
bibliography: references.bib
execute: 
  warning: false
  cache: true
  error: false
  fig-cap-location: "top"
  out-width: "70%"
date: 2023-07-25
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| error: false
#| warning: false

library(tidyverse)
library(palmerpenguins)
penguins = penguins
```

# 2.2.5 Exercises

1.  **How many rows are in `penguins`? How many columns?**

The number of rows in `penguins` data-set is `r nrow(penguins)` and the number of columns is `r ncol(penguins)`

2.  **What does the `bill_depth_mm` variable in the `penguins` data frame describe? Read the help for [`?penguins`](https://allisonhorst.github.io/palmerpenguins/reference/penguins.html) to find out.**

First, we find out the names of the variables in the `penguins` data frame in @tbl-penguinscols.

```{r}
#| label: tbl-penguinscols
#| tbl-cap: "List of variables in the penguins dataset"
#| tbl-cap-location: top

names(penguins) |>
  t() |>
  as_tibble() |>
  gt::gt()
# Finding the details of the variables.
# ?penguins
```

The variable name `bill_depth_mm` depicts *"a number denoting bill depth (millimeters)".*[@gorman2014][@horst2020]

3.  **Make a scatter-plot of `bill_depth_mm` vs. `bill_length_mm`. That is, make a scatter-plot with `bill_depth_mm` on the y-axis and `bill_length_mm` on the x-axis. Describe the relationship between these two variables.**

The scatter-plot is depicted below.

```{r}
#| label: fig-depthlength
#| fig-cap: "Scatterplot of relation between Bill Length and Bill Depth"
#| fig-cap-location: top
#| warning: false
#| message: false
#| out-width: "70%"
#| fig-align: "center"

penguins |>
  ggplot(mapping = aes(x = bill_length_mm,
                       y = bill_depth_mm,
                       col = species)) +
  geom_point() +
  geom_smooth(se = FALSE,
              method = "lm") +
  theme_classic() +
  labs(x = "Bill Length (mm)", y = "Bill Depth (mm)")
```

We now test the correlations, and create a beautiful table using `gt` [@gt]and `gtExtras` packages.[@gtExtras]

```{r}
#| label: tbl-correlations
#| class-source: "fold-hide"
#| tbl-cap: "Correlation Table amongst different types of penguins"

# Checking the correlation between the two variables
test1 = function(x) {cor.test(x$bill_length_mm, x$bill_depth_mm)$estimate}

# An empty data-frame to collect results
df = tibble(Penguins = NA,
            Correlation = NA,
            .rows = 4)
# Finding Correlation by each penguin variety
for (y in 1:3) {
  c = penguins |>
      filter(species == unique(penguins$species)[y]) |>
      test1() |>
      format(digits = 2)
  df[y,2] = c
  df[y,1] = unique(penguins$species)[y]
  }
# Converting the nature of 1st column from factor to character
df$Penguins = as.character(df$Penguins)  
# Storing the overall correlation
df[4,1] = "Overall"
df[4,2] = penguins |> test1() |> format(digits = 2)

# Displaying the result
gt::gt(df) |>
  gt::tab_header(title = "Correlation Coefficitents",
                 subtitle = "Between Bill Length & Bill Depth amongst   
                 different penguins") |>
  gtExtras::gt_theme_538() |>
  gtExtras::gt_highlight_rows(rows = 4, fill = "#d4cecd")
```

Thus, we see that the relation is not apparent on a simple scatter plot, but if we plot a different colour for each species, we observe that there is positive correlation between Bill Length and Bill Depth, in all three species. The strongest correlation is amongst Gentoo and Chinstrap penguins.

4.  **What happens if you make a scatter-plot of `species` vs. `bill_depth_mm`? What might be a better choice of geom?**

    If we make a scatter-plot of `species` vs. `bill_depth_mm`, the following happens:-

    ```{r}
    #| label: fig-dotplot1
    #| fig-cap: "Scatter plot of species vs. Bill Depth"
    #| fig-cap-location: top
    #| fig-width: 6
    #| fig-align: "center"

    penguins |>
      ggplot(mapping = aes(x = species,
                           y = bill_depth_mm)) +
      geom_point() +
      theme_bw() +
      labs(x = "Species", y = "Bill Depth (mm)")
    ```

    This produces an awkward scatter-plot, since the x-axis variable is discrete, and not continuous. A better choice of `geom` might be a box-plot, which shows that the average Bill Depth (in mm) is lower in Gentoo penguins compared to the other two.

    ```{r}
    #| label: fig-boxplot1
    #| fig-cap: "Box-plot of species vs. Bill Depth"
    #| fig-cap-location: top
    #| fig-width: 6
    #| fig-align: "center"

    penguins |>
      ggplot(mapping = aes(x = species,
                           y = bill_depth_mm)) +
      geom_boxplot() +
      theme_bw() +
      labs(x = "Species", y = "Bill Depth (mm)")
    ```

5.  **Why does the following give an error and how would you fix it?**

    `ggplot(data = penguins) +    geom_point()`

    The above code will give an error, because we have only given the data to the `ggplot` call, but not specified the `mapping` aesthetics, i.e., the x-axis and y-axis for the scatter plot called by the `geom_point()` . We can fix the error as follows in @fig-correctcode1 :\-\--

    ```{r}
    #| label: fig-correctcode1
    #| fig-cap: "Corrected code to display the plot"
    #| fig-cap-location: top
    #| warning: true
    #| message: true

    ggplot(data = penguins,
           mapping = aes(x = bill_depth_mm,
                         y = bill_length_mm)) +
      geom_point()
    ```

6.  **What does the `na.rm` argument do in [`geom_point()`](https://ggplot2.tidyverse.org/reference/geom_point.html)? What is the default value of the argument? Create a scatterplot where you successfully use this argument set to `TRUE`.**

    Within the function `geom_point()` the `na.rm` argument can do one of the two things. If it is set to `FALSE` , as it is by default, then the missing values are removed but the following warning message is displayed:--

    ```         
    Warning message: 
    Removed 2 rows containing missing values (`geom_point()`)
    ```

    But, if it is set to `na.rm = TRUE`, then the missing values are silently removed. Here's the code with `na.rm = TRUE` to produce @fig-correctcode2 :\-\--

    ```{r}
    #| label: fig-correctcode2
    #| fig-cap: "Corrected code to display the plot with na.rm = TRUE"
    #| fig-cap-location: top

    ggplot(data = penguins,
           mapping = aes(x = bill_depth_mm,
                         y = bill_length_mm)) +
      geom_point(na.rm = TRUE)
    ```

7.  **Add the following caption to the plot you made in the previous exercise: "Data come from the `palmerpenguins` package." Hint: Take a look at the documentation for [`labs()`](https://ggplot2.tidyverse.org/reference/labs.html).**

    The caption is added here with the `labs` function with `ggplot` function below in @fi

    ```{r}
    #| label: fig-correctcode3
    #| fig-cap: "Plot with a caption added in ggplot call itself"
    #| fig-cap-location: top

    ggplot(data = penguins,
           mapping = aes(x = bill_depth_mm,
                         y = bill_length_mm)) +
      geom_point(na.rm = TRUE) +
      labs(caption = "Data come from the palmerpenguins package.")
    ```

8.  **Recreate the following visualization. What aesthetic should `bill_depth_mm` be mapped to? And should it be mapped at the global level or at the geom level?**

    ```{r}
    #| label: fig-recreateggplot2
    #| fig-cap: "Recreated figure using the ggplot2 code"
    penguins |>
      ggplot(mapping = aes(x = flipper_length_mm,
                           y = body_mass_g)) + 
      geom_point(mapping = aes(color = bill_depth_mm)) + 
      geom_smooth()
    ```

    The code above recreates the @fig-recreateggplot2. The aesthetic should `bill_depth_mm` should be mapped the aesthetic `colo` in the `geom_point()` function level. It should not be done at the global level, because then it will even be an aesthetic for `geom_smooth` resulting in multiple smoother lines fitted for each level of `bill_depth_mm` , and possible result in an error because `bill_depth_mm` is not a categorical variable or a factor variable with certain distinct categories or levels.

    Luckily, `ggplot2` recognizes this error and still produces the same plot by droppin the `color` aesthetic, i.e., `The following aesthetics were dropped during statistical transformation: colour.` So, `ggplot2` is trying to guess our intentions, and it works, but the `code` not correct. The wrong `code` is tested at @fig-recreatewrong.

    ```{r}
    #| label: fig-recreatewrong
    #| fig-cap: "The Wrong Code - Recreated figure is the same - but the code is fundamentally flawed"
    #| error: true
    #| warning: true
    #| message: true

    penguins |>
      ggplot(mapping = aes(x = flipper_length_mm,
                           y = body_mass_g,
                           color = bill_depth_mm)) + 
      geom_point() + 
      geom_smooth()
    ```

9.  **Run this code in your head and predict what the output will look like. Then, run the code in R and check your predictions.**

    ```{r}
    #| label: Question_9_Code
    #| eval: false

    ggplot(data = penguins,
           mapping = aes(x = flipper_length_mm, 
                         y = body_mass_g, 
                         color = island)) +
      geom_point() +
      geom_smooth(se = FALSE)
    ```

    On visual inspection, I believe this code should create a scatter plot of penguins flipper lengths (on x-axis) vs. body mass (on y-axis), with the dots coloured by islands on the penguins. Further, a smoother line if fitted to show the relationship, with a separate smoother line for each island type. Thus, since we know there are three types of islands, we expect three smoother lines fitted to the plot, without the display of standard error intervals.

    Now, let us check our predictions with the code in the @fig-Question_9_Code_Run :\--

    ```{r}
    #| label: fig-Question_9_Code_Run
    #| fig-cap: "Plot generated from running the Code of Question 9"
    #| echo: false

    ggplot(data = penguins,
           mapping = aes(x = flipper_length_mm, 
                         y = body_mass_g, 
                         color = island)) +
      geom_point() +
      geom_smooth(se = FALSE)
    ```

10. **Will these two graphs look different? Why/why not?**

    ```{r}
    #| label: Question_10
    #| eval: false

    # Code 1
    ggplot(data = penguins,
           mapping = aes(x = flipper_length_mm, 
                         y = body_mass_g)) +
      geom_point() +
      geom_smooth()

    # Code 2
    ggplot() +
      geom_point(data = penguins,
                 mapping = aes(x = flipper_length_mm, 
                               y = body_mass_g)
      ) +
      geom_smooth(data = penguins,
                  mapping = aes(x = flipper_length_mm, 
                                y = body_mass_g))
    ```

    Yes, these two graphs should look the same. Since, the data and the aesthetics mapped are the same in both. Only difference is that the second code has redundancy.

    Here's the visual confirmation for both codes in @fig-Question-10-code.

    ```{r}
    #| label: fig-Question-10-code
    #| fig-cap: "Comparison of the two plots produced by the codes in Question 10"
    #| echo: false
    #| warning: false
    #| message: false
    #| fig-asp: 0.5

    g1 = ggplot(data = penguins,
           mapping = aes(x = flipper_length_mm, 
                         y = body_mass_g)) +
      geom_point() +
      geom_smooth() +
      labs(caption = "Code 1")

    g2 = ggplot() +
      geom_point(data = penguins,
                 mapping = aes(x = flipper_length_mm, 
                               y = body_mass_g)
      ) +
      geom_smooth(data = penguins,
                  mapping = aes(x = flipper_length_mm, 
                                y = body_mass_g)) +
      labs(caption = "Code 2")
    gridExtra::grid.arrange(g1, g2,
                            ncol = 2)
    rm(g1, g2)
    ```

# 2.4.3 Exercises

1.  **Make a bar plot of `species` of `penguins`, where you assign `species` to the `y` aesthetic. How is this plot different?**

    When we assign `species` to the y-axis, we get a horizontal bar plot, instead of the vertical bar plot given in the textbook. The results are compared in @fig-Question-1-Exercise-2.4.3 .

    ```{r}
    #| label: fig-Question-1-Exercise-2.4.3
    #| fig-cap: "Change in figure when species is assigned to y-axis"
    #| fig-cap-location: top
    #| fig-asp: 0.5

    p1 = penguins |>
          ggplot(aes(x = species)) +
          geom_bar() +
          labs(caption = "Species on x-axis")
    p2 = penguins |>
          ggplot(aes(y = species)) +
          geom_bar() +
          labs(caption = "Species on y-axis")
    gridExtra::grid.arrange(p1, p2, ncol = 2)
    ```

2.  **How are the following two plots different? Which aesthetic, `color` or `fill`, is more useful for changing the color of bars?**

    ```         
    ggplot(penguins, aes(x = species)) +   geom_bar(color = "red")  ggplot(penguins, aes(x = species)) +   geom_bar(fill = "red")
    ```

3.  What does the `bins` argument in [`geom_histogram()`](https://ggplot2.tidyverse.org/reference/geom_histogram.html) do?

4.  Make a histogram of the `carat` variable in the `diamonds` dataset that is available when you load the tidyverse package. Experiment with different binwidths. What binwidth reveals the most interesting patterns?
