---
title: "Chapter 12"
author: "Aditya Dahiya"
subtitle: "Communication"
date: 2023-08-28
execute: 
  warning: false
  error: false
  cache: true
filters:
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/RfDS2solutions/Chapter12.html"
  description: "Solutions: R for Data Science (2e)"
  twitter: true
  facebook: true
  linkedin: true
  email: true
editor_options: 
  chunk_output_type: console
bibliography: references.bib
---

Important lessons from [R for Data Science 2nd Edition](https://r4ds.hadley.nz/), [Chapter 12](https://r4ds.hadley.nz/communication#introduction): --

> **The purpose of a plot title is to summarize the main finding**. Avoid titles that just describe what the plot is, e.g., *"A scatterplot of engine displacement vs.Â fuel economy"*.

```{r}
#| label: setup

library(tidyverse)   # the tidyverse
library(scales)      # to adjust display of numbers
library(ggrepel)     # to clearly position text labels
library(patchwork)   # to display multiple plots
library(gt)          # to display beautiful tables in Quarto
```

# **12.2.1 Exercises**

### Question 1

**Create one plot on the fuel economy data with customized `title`, `subtitle`, `caption`, `x`, `y`, and `color` labels.**

The plot is shown below in @fig-q1-ex2.

```{r}
#| label: fig-q1-ex2
#| fig-cap: "Scatter plot of highway mileage vs. engine displacement for different class of vehicles"


data(mpg)
mpg |>
  ggplot(aes(x = displ,
             y = hwy,
             col = as_factor(class)
             )
         ) +
  geom_point() +
  labs(title = "Higher displacement vehicles have lower mileage",
       subtitle = "2-seater sports cars have high mileage despite higher displacements",
       x = "Engine Displacement (in liters)",
       y = "Highway Mileage (miles per gallon)",
       caption = "Data from mpg dataset",
       color = "Vehicle Class") +
  theme(legend.position = "right") +
  scale_color_viridis_d()
```

### Question 2

**Recreate the following plot using the fuel economy data. Note that both the colors and shapes of points vary by type of drive train.**

```{r}
#| label: fig-q2-ex2
#| fig-cap: "A scatter-plot of highway vs city MPG to recreate the plot shown in question"

mpg |>
  ggplot(aes(x = cty,
             y = hwy,
             shape = drv,
             col = drv)) +
  geom_point() +
  labs(x = "City MPG", y = "Highway MPG",
       col = "Type of \ndrive train",
       shape = "Type of \ndrive train")
```

### Question 3

**Take an exploratory graphic that you've created in the last month, and add informative titles to make it easier for others to understand.**

I use a figure produced for Question 5 of Exercise 11.5.3.1 to demonstrate outliers in the `diamonds` dataset, based on a combination of `x` and `y` attributes of various diamonds. I use the `ggrepel` package[@ggrepel] to label the outliers.

```{r}
#| label: fid-q3-ex2
#| fig-cap: "A scatter plot of x and y dimensions of a diamond to detect outliers"
#| fig-cap-location: top

diamonds |>    
    mutate(res_lm = (lm(diamonds$y ~ diamonds$x)$residuals)) |>
    filter(x >= 4) |>
    mutate(res_lm = res_lm < -1 | res_lm > 1) |>
    rowid_to_column() |>
    mutate(rowid = ifelse(res_lm, rowid, NA)) |>
    ggplot(aes(x = x, 
               y = y,
               label = scales::comma(rowid))) +   
    geom_point(alpha = 0.2) +
    coord_cartesian(xlim = c(4, 11), ylim = c(4, 11)) +
    ggrepel::geom_text_repel(size = 3) +
    labs(x = "Length of diamond, in mm (x)", 
         y = "Width of diamond, in mm (y)",
         title = "Certain diamonds have an abnormal shape",
         subtitle = "The labelled diamonds, with their IDs shown, have excessive length or width",
         caption = "Data from diamonds data-set, ggplot2") +
  theme_light()
```

# **12.3.1 Exercises**

### Question 1

**Use [`geom_text()`](https://ggplot2.tidyverse.org/reference/geom_text.html) with infinite positions to place text at the four corners of the plot.**

The @fig-q1-ex3 show the plot produced. The important thing to understand is the use of arguments `hjust` and `vjust` to the function `geom_text()` : --

1.  **`hjust` (Horizontal Justification):**

    -   The `hjust` argument controls the horizontal alignment or justification of the text relative to its specified x-coordinate.

    -   It takes values between 0 and 1, where 0 means left-aligned, 1 means right-aligned, and 0.5 means centered.

    -   Values less than 0 or greater than 1 can be used to align the text outside the range of the plot area.

    -   Negative values shift the text label to the left, and values greater than 1 shift it to the right.

2.  **`vjust` (Vertical Justification):**

    -   The `vjust` argument controls the vertical alignment or justification of the text relative to its specified y-coordinate.

    -   Like `hjust`, it takes values between 0 and 1, where 0 means bottom-aligned, 1 means top-aligned, and 0.5 means centered.

    -   Values less than 0 or greater than 1 can be used to align the text outside the range of the plot area.

    -   Negative values shift the text label downward, and values greater than 1 shift it upward.

```{r}
#| label: fig-q1-ex3
g = mpg |>
  ggplot(aes(x = displ,
             y = hwy)) +
  geom_point(position = position_jitter(seed = 1)) +
  theme_light()
  
g +
  # Add text labels at the four corners using infinite positions
  geom_text(aes(x = Inf, y = Inf, 
                label = "High mileage, high displacement"),
            hjust = 1, vjust = 1) +
  geom_text(aes(x = -Inf, y = -Inf, 
                label = "Low mileage, low displacement"),
            hjust = 0, vjust = -0.2) +
  geom_text(aes(x = Inf, y = -Inf, 
                label = "Low mileage, high displacement"),
            hjust = 1, vjust = -0.2) +
  geom_text(aes(x = -Inf, y = Inf, 
                label = "High mileage, Low displacement"),
            hjust = 0, vjust = 1)
```

### Question 2

**Use [`annotate()`](https://ggplot2.tidyverse.org/reference/annotate.html) to add a point geom in the middle of your last plot without having to create a tibble. Customize the shape, size, or color of the point.**

```{r}
# Compute middle of x and y axis
x_mid = (min(mpg$displ) + max(mpg$displ))/2
y_mid = (min(mpg$hwy) + max(mpg$hwy))/2
lbl_grph = str_wrap("This is a point in the middle of the previous graph",
                    width = 30)

g +
  annotate(
    geom = "point",
    x = x_mid,
    y = y_mid,
    shape = 23,
    size = 6,
    color = "red",
    fill = "pink"
  ) +
  annotate(
    geom = "text",
    label = lbl_grph,
    x = x_mid,
    y = y_mid,
    color = "red",
    hjust = 0,
    vjust = -0.5,
    size = 6
  )
```

### Question 3

**How do labels with [`geom_text()`](https://ggplot2.tidyverse.org/reference/geom_text.html) interact with faceting? How can you add a label to a single facet? How can you put a different label in each facet? (Hint: Think about the dataset that is being passed to [`geom_text()`](https://ggplot2.tidyverse.org/reference/geom_text.html).)**

In `ggplot2`, the `geom_text()` function is used to add text labels to a plot. Labels added using `geom_text()` can interact with faceting. Faceting involves creating multiple plots based on different subsets of the data. The following points clarify the interaction methods: --

**Interaction between `geom_text()` labels and faceting:** When we use faceting in ggplot2 (with functions like `facet_wrap()` or `facet_grid()`), the labels created by `geom_text()` are typically placed in each facet based on the data corresponding to that specific facet. This means that the labels are positioned within each facet's coordinate system. @fig-q3a-ex3 is an example using `gtcars` dataset from `gt` package to display the name (`geom_text`) of *most fuel efficient car on higway within each body style*: --

```{r}
#| label: fig-q3a-ex3
#| fig-cap: "Scatter-plot of highway mileage vs. horsepower, for different body type of cars - with most fuel efficient car in each categry labelled"
#| code-fold: true

data("gtcars")

gtcars |>
  # Remove NAs, else they will be treated as maximum 
  drop_na() |>
  
  # Cosmetic improvements for labelling in plot
  mutate(bdy_style = str_to_title(bdy_style)) |>
  mutate(drivetrain = case_when(
    drivetrain == "awd" ~ "All-Wheel Drive",
    drivetrain == "rwd" ~ "Rear-Wheel Drive"
  )) |>
  
  # Determine car with maximum Highway mileage in each group
  group_by(bdy_style) |>
  mutate(
    high_cat = ifelse(mpg_h == max(mpg_h),
                      yes = paste0(mfr, " ", model),
                      no = NA)
    ) |>
  ggplot(aes(x = hp,
             y = mpg_h,
             color = drivetrain,
             label = high_cat)) +
  geom_point(size = 1.5) +
  geom_text_repel(color = "#454647") +
  
  # To makr mpg_h comparable visually across facets,
  # we select layout of 4 columns
  facet_wrap(~bdy_style, ncol = 4) +
  
  theme_light() +
  theme(legend.position = "bottom") +
  labs(x = "Horsepower", 
       y = "Highway Fuel efficiency (miles per gallon)",
       color = "Car's drivetrain",
       title = "Most fuel efficient car in each category has the least HP",
       caption = "Data grom gt package (gtcars)")
```

**Adding a label to a single facet:** If you want to add a label to only one specific facet, you can do so by adding a new data frame containing the label information for that facet; or, by creating a new column with the value stored only for the observation to be labelled, and rest as `NA`s. @fig-q3b-ex3 is an example using `gtcars` dataset from `gt` package to display the name (`geom_text`) of *most fuel efficient car on the highway in the entire data set*: --

```{r}
#| label: fig-q3b-ex3
#| fig-cap: "Scatter-plot of highway mileage vs. horsepower, for different body type of cars - with most fuel efficient car in dataset labelled"
#| code-fold: true

gtcars |>
  # Remove NAs, else they will be treated as maximum 
  drop_na() |>
  
  # Cosmetic improvements for labelling in plot
  mutate(bdy_style = str_to_title(bdy_style)) |>
  mutate(drivetrain = case_when(
    drivetrain == "awd" ~ "All-Wheel Drive",
    drivetrain == "rwd" ~ "Rear-Wheel Drive"
  )) |>
  
  # Determine car with maximum Highway mileage (so, no need to Group)
  # group_by(bdy_style) |>
  mutate(
    high_cat = ifelse(mpg_h == max(mpg_h),
                      yes = paste0(mfr, " ", model),
                      no = NA)
    ) |>
  ggplot(aes(x = hp,
             y = mpg_h,
             color = drivetrain,
             label = high_cat)) +
  geom_point(size = 1.5) +
  geom_text_repel(color = "#454647") +
  
  # To makr mpg_h comparable visually across facets,
  # we select layout of 4 columns
  facet_wrap(~bdy_style, ncol = 4) +
  
  theme_light() +
  theme(legend.position = "bottom") +
  labs(x = "Horsepower", 
       y = "Highway Fuel efficiency (miles per gallon)",
       color = "Car's drivetrain",
       title = "Most fuel efficient car in the data-set is BMW 6-Series",
       caption = "Data grom gt package (gtcars)")

```

**Putting a different label in each facet:** The easiest way to annotate for each facet separately is to create a dataframe with a row for each facet. For example, in @fig-q3c-ex3, I create the same plot as above, with an annotation in each facet of the plot, highlighting my main message for that body style. I create these annotations using `geom_label()`. I could do the same with `geom_text()` as well.

```{r}
#| label: fig-q3c-ex3
#| fig-cap: "Scatter-plot of highway mileage vs. horsepower, for different body type of cars - with different annotations in each facet"
#| code-fold: true
#| fig-width: 8


annt_con = "Convertibles generally have lower HP"
annt_cup = "Fuel efficiency decreases with rising HP"
annt_sed = "Sedans generally have lower HP"
annt_hbk = "Data-set has only two hatchbacks"

annt_df = tibble(
  bdy_style = as_vector(distinct(gtcars, bdy_style)),
  annt = str_wrap(c(annt_con, annt_cup, annt_sed, annt_hbk), 
                  width = 15),
  x_annt = 800,
  y_annt = 27.5
  ) |>
  mutate(bdy_style = str_to_title(bdy_style))

gtcars |>
  
  # Cosmetic improvements for labelling in plot
  mutate(bdy_style = str_to_title(bdy_style)) |>
  mutate(drivetrain = case_when(
    drivetrain == "awd" ~ "All-Wheel Drive",
    drivetrain == "rwd" ~ "Rear-Wheel Drive"
  )) |>
  
  ggplot(aes(x = hp,
             y = mpg_h,
             color = drivetrain)) +
  geom_point(size = 1.5) +
  
  # To make mpg_h comparable visually across facets,
  # we select layout of 4 columns
  facet_wrap(~bdy_style, ncol = 4) +
  geom_label(
    data = annt_df,
    mapping = aes(x = x_annt,
                  y = y_annt,
                  label = annt),
    color = "#454647",
    fontface = "bold",
    label.size = 0.1,
    size = 3
  ) +
  theme_light() +
  theme(legend.position = "bottom") +
  labs(x = "Horsepower", 
       y = "Highway Fuel efficiency (miles per gallon)",
       color = "Car's drivetrain",
       title = "Higher HP lowers highway mileage",
       caption = "Data grom gt package (gtcars)")
```

### Question 4

**What arguments to [`geom_label()`](https://ggplot2.tidyverse.org/reference/geom_text.html) control the appearance of the background box?**

In ggplot2, the `geom_label()` function is used to add labeled annotations to a plot, as shown above in @fig-q3c-ex3. To control the appearance of the background box of these labels, we can use the following arguments:

1.  `label.padding`: This argument controls the padding around the label text within the background box, with a default value of 0.25.

2.  `label.size`: This argument defines the size of the label border, in mm.

3.  `label.r`: This argument sets the radius of the rounded corners of the background box, with a default value of 0.15.

An example of how we can use these arguments in the `geom_label()` function is shown below in :

```{r}
#| label: fig-q4-ex3
#| fig-cap: "A simple scatterplot with background of the label changed"
#| fig-cap-location: top

tibble(x = 1:10, 
       y = 2*x + rnorm(10)) |>
  
  ggplot(aes(x = x, y = y)) +
  geom_label(aes(label = x), 
             label.padding = unit(1, "lines"),  # Adjust padding
             label.size = 2,                    # Set text size
             label.r = unit(1, "lines")) +      # Set corner radius
  theme_void()

```

### Question 5

**What are the four arguments to [`arrow()`](https://rdrr.io/r/grid/arrow.html)? How do they work? Create a series of plots that demonstrate the most important options.**

In `ggplot2` and `R`, the `arrow()` function is used to customize the appearance of arrowheads in line segments. As the results show in @fig-q5-ex3, the `arrow()` function has four main arguments that we can use to control the arrowheads:

1.  **`type`:** This argument specifies the type of arrowhead. There are three main types:

    -   `"closed"`: A closed arrowhead with a triangular shape.

    -   `"open"`: An open arrowhead with a triangular shape.

2.  **`length`:** This argument controls the length of the arrowhead. We can specify it using a numeric value or a `unit()` object, which allows you to define the length in various units such as `"inches"`, `"cm"`, etc.

3.  **`ends`**: This argument determines which end of the line segment the arrowhead should appear on. It can take two values:

    -   `"last"`: Arrowhead is placed at the end of the segment (default behavior).

    -   `"first"`: Arrowhead is placed at the start of the segment.

    -   `"both"`: Arrowhead appears at both the start and end of the segment.

4.  **`angle`**: This argument controls the angle of the arrow head in degrees *(smaller numbers produce narrower, pointier arrows)*. It describes the width of the arrow head.

```{r}
#| label: fig-q5-ex3
#| fig-cap: "Customizing the arrows in geom_segment() using the 4 main arguments to arrow()"
#| fig-cap-location: top
#| fig-asp: 1
  
nos = 8                                     # Number of spokes to create
angle = seq(0, 7/4 * pi, length.out = nos)  # Angles for 8 directions
arrow_length = 0.8                          # Length of line segment

g = tibble(
    x_start = rep(0, nos),              # Common starting point
    y_start = rep(0, nos),
    x_end = cos(angle) * arrow_length,  # Calculate end points based on angles
    y_end = sin(angle) * arrow_length
    ) |>
    ggplot(aes(x = x_start,
               y = y_start,
               xend = x_end,
               yend = y_end)) +
  theme_void() 

gridExtra::grid.arrange(
  
  g + geom_segment(arrow = arrow(type = "open")) + 
    labs(subtitle = "arrow(type = open)"),

  g + geom_segment(arrow = arrow(type = "closed")) + 
    labs(subtitle = "arrow(type = closed)"),  
  
  g + geom_segment(arrow = arrow(angle = 15)) + 
    labs(subtitle = "arrow(angle = 15)"),

  g + geom_segment(arrow = arrow(angle = 90)) + 
    labs(subtitle = "arrow(angle = 90)"),  
    
  g + geom_segment(arrow = arrow(ends = "first")) + 
    labs(subtitle = "arrow(ends = first)"),

  g + geom_segment(arrow = arrow(ends = "last")) + 
    labs(subtitle = "arrow(ends = last)"),

  g + geom_segment(arrow = arrow(ends = "both")) + 
    labs(subtitle = "arrow(ends = both)"),
  
  g + geom_segment(arrow = arrow(length = unit(1, "cm"))) + 
    labs(subtitle = "arrow(length = unit(1, cm)"),
  
  g + geom_segment(arrow = arrow(length = unit(0.5, "cm"))) + 
    labs(subtitle = "arrow(length = unit(0.5, cm)"),
  
  ncol = 3
)
```

# **12.4.6 Exercises**

### Question 1

**Why doesn't the following code override the default scale?**

```         
df <- tibble(   
  x = rnorm(10000),   
  y = rnorm(10000) 
  )  

ggplot(df, aes(x, y)) +   
  geom_hex() +   
  scale_color_gradient(low = "white", high = "red") +   
  coord_fixed()
```

In the code provided, we're using the `geom_hex()` function to create a hexbin plot. However, the `scale_color_gradient()` function is used to adjust the color scale of a continuous color aesthetic.

In present case, the `geom_hex()` function uses the **`fill` aesthetic** to represent the density of points in each hexagonal bin, but we're trying to adjust the color scale using `scale_color_gradient()`. So, to adjust the color scale of the hex-bin plot, we should use the **`scale_fill_gradient()`** function. Here's the corrected version of the code:

```{r}
#| code-fold: true

df <- tibble(   
  x = rnorm(10000),   
  y = rnorm(10000) 
  )  

ggplot(df, aes(x, y)) +   
  geom_hex() +   
  scale_fill_gradient(low = "white", 
                      high = "red") +   
  coord_fixed()
```

### Question 2

**What is the first argument to every scale? How does it compare to [`labs()`](https://ggplot2.tidyverse.org/reference/labs.html)?**

The first argument to every scale function is `name` . It is used as the axis or legend title.

-   If `name = waiver()`, the default, then the name of the scale is taken from the first mapping used for that aesthetic.

-   If `name = NULL`, then then legend title will be omitted.

The `labs()` can also be used to name a legend, with use the aesthetic name to define the new name. For example, `labs(x = NULL)`. The output will be the same.

However, when we use `scale_` functions, we are customizing how a specific aesthetic is represented in the plot. It allows us to modify the scale, transformation, and appearance of the aesthetic. On the other hand, `labs()`is specifically designed for modifying the text labels and titles of different plot components. It's not concerned with how an aesthetic is represented or scaled in the plot.

### Question 3

**Change the display of the presidential terms by:**

a.  **Combining the two variants that customize colors and x axis breaks.**

    ```{r}
    #| label: fig-q3a-ex4
    #| fig-cap: "Customizing Colours and x-Axis breaks"
    #| code-fold: true

    data("presidential")

    x_labs = 
      presidential |>
      select(start) |>
      as_vector() |>
      as_date()


    g = presidential |>
      as_tibble() |>
      mutate(id = 33 + row_number()) |>
      ggplot(aes(x = start, xend = end, 
                 y = id, yend = id, 
                 col = party,
                 label = name)) +
      geom_segment(lwd = 10) +
      geom_text(hjust = -0.05,
                vjust = -1.5) +
      theme_minimal() +
      scale_color_manual(values = c("Democratic" = "blue",
                                    "Republican" = "red")) +
      scale_y_reverse() +
      geom_rect(aes(xmin = start,
                    xmax = end,
                    ymin = 33.5,
                    ymax = 45.5,
                    fill = party),
                alpha = 0.3,
                col = NA) +
        scale_fill_manual(values = c("Democratic" = "blue",
                                    "Republican" = "red"))
    g +
      labs(color = "President's Political Party",
           y = NULL, x = "Year") +
      theme(legend.position = "bottom") +
      scale_x_continuous(breaks = x_labs,
                         labels = year(x_labs)) +
      theme(panel.grid.major.x = element_line(color = "darkgrey"),
            panel.grid.minor.x = element_blank(),
            panel.grid.major.y = element_blank(),
            panel.grid.minor.y = element_blank(),
            axis.text.y = element_blank()) +
      guides(fill = "none")
      
    ```

b.  **Improving the display of the y axis.**

c.  **Labeling each term with the name of the president.**

d.  **Adding informative plot labels.**

e.  **Placing breaks every 4 years (this is trickier than it seems!).**

### Question 4

**First, create the following plot. Then, modify the code using `override.aes` to make the legend easier to see.**

```         
ggplot(diamonds, 
       aes(x = carat, y = price)) +   
  geom_point(aes(color = cut), 
             alpha = 1/20)
```
