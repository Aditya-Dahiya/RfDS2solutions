#| fig-cap: "Tile plot of average flight departure delays by destination and month of year"
#| fig-cap-location: top
#| fig-asp: 3
nycflights13::flights |>
group_by(month, dest) |>
summarise(avg_dep_delay = mean(dep_delay, na.rm = TRUE)) |>
ungroup() |>
# Removing destinations which have data missing for any one or more
# months, so that our tile plot appears nice
pivot_wider(names_from = month,
values_from = avg_dep_delay) |>
drop_na() |>
pivot_longer(cols = -dest,
names_to = "Month",
values_to = "avg_dep_delay") |>
mutate(Month = as.numeric(Month)) |>
mutate(month = as.factor(Month)) |>
drop_na() |>
ggplot(aes(y = dest,
x = month,
fill = avg_dep_delay)) +
geom_tile() +
scale_fill_viridis_c() +
labs(x = "Month of the Year",
y = "Destinations" ,
fill = "Avg. Dep. Delay \n(in minutes)")
nycflights13::flights |>
group_by(month, dest) |>
summarise(avg_dep_delay = mean(dep_delay, na.rm = TRUE)) |>
ungroup() |>
# Removing destinations which have data missing for any one or more
# months, so that our tile plot appears nice
pivot_wider(names_from = month,
values_from = avg_dep_delay) |>
drop_na() |>
pivot_longer(cols = -dest,
names_to = "Month",
values_to = "avg_dep_delay") |>
mutate(Month = as.numeric(Month)) |>
mutate(month = as.factor(Month)) |>
drop_na() |>
ggplot(aes(y = dest,
x = month,
fill = avg_dep_delay)) +
geom_tile() +
scale_fill_viridis_c() +
labs(x = "Month of the Year",
y = "Destinations" ,
fill = "Avg. Dep. Delay \n(in minutes)") +
theme(axis.text.y = element_text(size = 4))
?geom_tile
nycflights13::flights |>
group_by(month, dest) |>
summarise(avg_dep_delay = mean(dep_delay, na.rm = TRUE)) |>
ungroup() |>
# Removing destinations which have data missing for any one or more
# months, so that our tile plot appears nice
pivot_wider(names_from = month,
values_from = avg_dep_delay) |>
drop_na() |>
pivot_longer(cols = -dest,
names_to = "Month",
values_to = "avg_dep_delay") |>
mutate(Month = as.numeric(Month)) |>
mutate(month = as.factor(Month)) |>
ggplot(aes(y = dest,
x = month,
fill = avg_dep_delay)) +
geom_tile(aes(group = month)) +
scale_fill_viridis_c() +
labs(x = "Month of the Year",
y = "Destinations" ,
fill = "Avg. Dep. Delay \n(in minutes)") +
theme(axis.text.y = element_text(size = 4))
df = nycflights13::flights |>
group_by(month, dest) |>
summarise(avg_dep_delay = mean(dep_delay, na.rm = TRUE)) |>
ungroup() |>
# Removing destinations which have data missing for any one or more
# months, so that our tile plot appears nice
pivot_wider(names_from = month,
values_from = avg_dep_delay) |>
drop_na() |>
pivot_longer(cols = -dest,
names_to = "Month",
values_to = "avg_dep_delay") |>
mutate(Month = as.numeric(Month)) |>
mutate(month = as.factor(Month))
df |>
ggplot(aes(y = dest,
x = month,
fill = avg_dep_delay)) +
geom_tile(aes(group = month)) +
scale_fill_viridis_c() +
labs(x = "Month of the Year",
y = "Destinations" ,
fill = "Avg. Dep. Delay \n(in minutes)") +
theme(axis.text.y = element_text(size = 4))
df
df
df |>
group_by(Month) |>
summarize(avg_dep_delay = mean(avg_dep_delay))
df |>
group_by(Month) |>
summarize(avg_dep_delay = mean(avg_dep_delay)) |>
ggplot(aes(x = Month,
y = avg_dep_delay,
label = avg_dep_delay)) +
geom_line() +
geom_point() +
geom_text()
?geom_text
df |>
group_by(Month) |>
summarize(avg_dep_delay = mean(avg_dep_delay)) |>
muatate(avg_dep_delay = round(avg_dep_delay, digits = 1)) |>
ggplot(aes(x = Month,
y = avg_dep_delay,
label = avg_dep_delay)) +
geom_line() +
geom_point() +
geom_text()
df |>
group_by(Month) |>
summarize(avg_dep_delay = mean(avg_dep_delay)) |>
mutate(avg_dep_delay = round(avg_dep_delay, digits = 1)) |>
ggplot(aes(x = Month,
y = avg_dep_delay,
label = avg_dep_delay)) +
geom_line() +
geom_point() +
geom_text()
?geom_text
df |>
group_by(Month) |>
summarize(avg_dep_delay = mean(avg_dep_delay)) |>
mutate(avg_dep_delay = round(avg_dep_delay, digits = 1)) |>
ggplot(aes(x = Month,
y = avg_dep_delay,
label = avg_dep_delay)) +
geom_line() +
geom_point() +
geom_text(position = "stack")
df |>
group_by(Month) |>
summarize(avg_dep_delay = mean(avg_dep_delay)) |>
mutate(avg_dep_delay = round(avg_dep_delay, digits = 1)) |>
ggplot(aes(x = Month,
y = avg_dep_delay,
label = avg_dep_delay)) +
geom_line() +
geom_point() +
geom_text(position = position_stack())
df |>
group_by(Month) |>
summarize(avg_dep_delay = mean(avg_dep_delay)) |>
mutate(avg_dep_delay = round(avg_dep_delay, digits = 1)) |>
ggplot(aes(x = Month,
y = avg_dep_delay,
label = avg_dep_delay)) +
geom_line() +
geom_point() +
geom_text(position = position_nudge(y = 1))
df |>
group_by(Month) |>
summarize(avg_dep_delay = mean(avg_dep_delay)) |>
mutate(avg_dep_delay = round(avg_dep_delay, digits = 1)) |>
ggplot(aes(x = Month,
y = avg_dep_delay,
label = avg_dep_delay)) +
geom_line() +
geom_point() +
geom_text(position = position_nudge(y = 1)) +
scale_x_continuous(breaks = c(1:12)) +
labs(x = "Month",
y = "Avg. Dep. Delay (in minutes)")
df |>
group_by(Month) |>
summarize(avg_dep_delay = mean(avg_dep_delay)) |>
mutate(avg_dep_delay = round(avg_dep_delay, digits = 1)) |>
ggplot(aes(x = Month,
y = avg_dep_delay,
label = avg_dep_delay)) +
geom_line() +
geom_point() +
geom_text(position = position_nudge(y = 1)) +
scale_x_continuous(breaks = c(1:12)) +
labs(x = "Month",
y = "Avg. Dep. Delay (in minutes)") +
theme_linedraw()
df |>
group_by(Month) |>
summarize(avg_dep_delay = mean(avg_dep_delay)) |>
mutate(avg_dep_delay = round(avg_dep_delay, digits = 1)) |>
ggplot(aes(x = Month,
y = avg_dep_delay,
label = avg_dep_delay)) +
geom_line() +
geom_point() +
geom_text(position = position_nudge(y = 1)) +
scale_x_continuous(breaks = c(1:12)) +
labs(x = "Month",
y = "Avg. Dep. Delay (in minutes)") +
theme_minimal()
View(df)
df
library(seriation)
install.packages("seriation")
# install.packages("seriation")
library(seriation)
?seriation
?`seriation-package`
df
df |>
select(-Month) |>
pivot_wider(names_from = month,
values_from = avg_dep_delay)
df |>
select(-Month) |>
pivot_wider(names_from = month,
values_from = avg_dep_delay) |>
hmap()
df |>
select(-Month) |>
pivot_wider(names_from = month,
values_from = avg_dep_delay) |>
drop_na() |>
hmap()
?hmap
df |>
select(-Month) |>
pivot_wider(names_from = month,
values_from = avg_dep_delay) |>
drop_na() |>
pimage()
df |>
select(-Month) |>
pivot_wider(names_from = month,
values_from = avg_dep_delay) |>
drop_na()
df |>
select(-Month) |>
pivot_wider(names_from = month,
values_from = avg_dep_delay) |>
drop_na() |>
gghmap()
?gghmap
data(""Wood"")
data("Wood")
View(Wood)
data("Wood")
class(Wood)
df |>
select(-Month) |>
pivot_wider(names_from = month,
values_from = avg_dep_delay) |>
drop_na() |>
as.matrix()
df |>
select(-Month) |>
pivot_wider(names_from = month,
values_from = avg_dep_delay) |>
drop_na() |>
column_to_rownames(var = dest)
df |>
select(-Month) |>
pivot_wider(names_from = month,
values_from = avg_dep_delay) |>
drop_na() |>
column_to_rownames(var = "dest")
df |>
select(-Month) |>
pivot_wider(names_from = month,
values_from = avg_dep_delay) |>
drop_na() |>
column_to_rownames(var = "dest") |>
as.matrix()
df |>
select(-Month) |>
pivot_wider(names_from = month,
values_from = avg_dep_delay) |>
drop_na() |>
column_to_rownames(var = "dest") |>
as.matrix() |>
gghmap()
?gghmap
df |>
select(-Month) |>
pivot_wider(names_from = month,
values_from = avg_dep_delay) |>
drop_na() |>
column_to_rownames(var = "dest") |>
as.matrix() |>
gghmap(row_labels = TRUE,
col_labels = TRUE)
df |>
select(-Month) |>
pivot_wider(names_from = month,
values_from = avg_dep_delay) |>
drop_na() |>
column_to_rownames(var = "dest") |>
as.matrix() |>
seriation::gghmap(row_labels = TRUE,
col_labels = TRUE) +
labs(x = "Month of the Year",
y = "Destinations" ,
fill = "Avg. Dep. Delay \n(in minutes)") +
theme(axis.text.y = element_text(size = 5))
?gghmap
df |>
select(-Month) |>
pivot_wider(names_from = month,
values_from = avg_dep_delay) |>
drop_na() |>
column_to_rownames(var = "dest") |>
as.matrix() |>
seriation::gghmap(
row_labels = TRUE,
col_labels = TRUE,
Rowv = as.dendrogram(o[[1]]),
Colv = as.dendrogram(o[[2]])) +
labs(x = "Month of the Year",
y = "Destinations" ,
fill = "Avg. Dep. Delay \n(in minutes)") +
theme(axis.text.y = element_text(size = 5))
df |>
select(-Month) |>
pivot_wider(names_from = month,
values_from = avg_dep_delay) |>
drop_na() |>
column_to_rownames(var = "dest") |>
as.matrix() |>
seriation::gghmap(
row_labels = TRUE,
col_labels = TRUE) +
labs(x = "Month of the Year",
y = "Destinations" ,
fill = "Avg. Dep. Delay \n(in minutes)") +
theme(axis.text.y = element_text(size = 5))
df |>
select(-Month) |>
pivot_wider(names_from = month,
values_from = avg_dep_delay) |>
drop_na() |>
column_to_rownames(var = "dest") |>
as.matrix() |>
seriation::gghmap(
row_labels = TRUE,
col_labels = TRUE,
Rowv =  get_rank(o, 1), Colv =  get_rank(o, 2)) +
labs(x = "Month of the Year",
y = "Destinations" ,
fill = "Avg. Dep. Delay \n(in minutes)") +
theme(axis.text.y = element_text(size = 5))
df |>
select(-Month) |>
pivot_wider(names_from = month,
values_from = avg_dep_delay) |>
drop_na() |>
column_to_rownames(var = "dest") |>
as.matrix() |>
seriation::gghmap(
row_labels = TRUE,
col_labels = TRUE,
Rowv =  get_rank(o, 1), Colv =  get_rank(o, 2))
df |>
select(-Month) |>
pivot_wider(names_from = month,
values_from = avg_dep_delay) |>
drop_na() |>
column_to_rownames(var = "dest") |>
as.matrix() |>
heatmap()
?heatmap
df |>
select(-Month) |>
pivot_wider(names_from = month,
values_from = avg_dep_delay) |>
drop_na() |>
column_to_rownames(var = "dest") |>
as.matrix() |>
heatmap() |>
class()
df |>
select(-Month) |>
pivot_wider(names_from = month,
values_from = avg_dep_delay) |>
drop_na() |>
column_to_rownames(var = "dest") |>
as.matrix() |>
seriation::gghmap(
row_labels = TRUE,
col_labels = TRUE,
Rowv =  get_rank(o, 1), Colv =  get_rank(o, 2)) +
labs(x = "Month of the Year",
y = "Destinations" ,
fill = "Avg. Dep. Delay \n(in minutes)") +
theme(axis.text.y = element_text(size = 5))
#| label: setup
#| echo: true
library(tidyverse)
library(gt)
library(RColorBrewer)
diamonds |>
filter(carat < 3) |>
ggplot(aes(x = carat)) +
geom_freqpoly(aes(color = cut_number(price, n = 7)),
lwd = 1, alpha  = 0.8) +
theme_minimal() +
scale_color_brewer(palette = "YlOrRd") +
labs(x = "Carat of the Diamond",
color = "Price (in $)",
y = "Number of diamonds",
title = "Frequency Polygon") +
scale_y_continuous(n.breaks = 4) +
scale_color_continuous(formatter = comma)
?scale_color_continuous
?scale
library(scales)
comma()
?comma
gridExtra::grid.arrange(
diamonds |>
filter(carat < 3) |>
ggplot(aes(x = price,
y = carat)) +
geom_boxplot(aes(group = cut_width(price, width = 2000)),
outlier.alpha = 0.2) +
theme_minimal() +
labs(x = "Price (in $)",
title = "Boxplot",
y = "Carat") +
coord_flip(),
diamonds |>
filter(carat < 3) |>
ggplot(aes(x = carat)) +
geom_freqpoly(aes(color = cut_number(price, n = 7)),
lwd = 1, alpha  = 0.8) +
theme_minimal() +
scale_color_brewer(palette = "YlOrRd") +
labs(x = "Carat of the Diamond",
color = "Price (in $)",
y = "Number of diamonds",
title = "Frequency Polygon") +
scale_y_continuous(n.breaks = 4) +
scale_color_continuous(formatter = comma),
nrow = 2)
diamonds |>
filter(carat < 3) |>
ggplot(aes(x = carat)) +
geom_freqpoly(aes(color = cut_number(price, n = 7)),
lwd = 1, alpha  = 0.8) +
theme_minimal() +
scale_color_brewer(palette = "YlOrRd") +
labs(x = "Carat of the Diamond",
color = "Price (in $)",
y = "Number of diamonds",
title = "Frequency Polygon") +
scale_y_continuous(n.breaks = 4) +
scale_color_continuous(formatter = comma)
diamonds |>
filter(carat < 3) |>
ggplot(aes(x = carat)) +
geom_freqpoly(aes(color = cut_number(price, n = 7)),
lwd = 1, alpha  = 0.8) +
theme_minimal() +
scale_color_brewer(palette = "YlOrRd") +
labs(x = "Carat of the Diamond",
color = "Price (in $)",
y = "Number of diamonds",
title = "Frequency Polygon") +
scale_y_continuous(n.breaks = 4) +
scale_color_continuous()
diamonds |>
filter(carat < 3) |>
ggplot(aes(x = carat)) +
geom_freqpoly(aes(color = cut_number(price, n = 7)),
lwd = 1, alpha  = 0.8) +
theme_minimal() +
scale_color_brewer(palette = "YlOrRd") +
labs(x = "Carat of the Diamond",
color = "Price (in $)",
y = "Number of diamonds",
title = "Frequency Polygon") +
scale_y_continuous(n.breaks = 4) +
scale_color_discrete(formatter = comma)
gridExtra::grid.arrange(
diamonds |>
filter(carat < 3) |>
ggplot(aes(x = price,
y = carat)) +
geom_boxplot(aes(group = cut_width(price, width = 2000)),
outlier.alpha = 0.2) +
theme_minimal() +
labs(x = "Price (in $)",
title = "Boxplot",
y = "Carat") +
coord_flip(),
diamonds |>
filter(carat < 3) |>
ggplot(aes(x = carat)) +
geom_freqpoly(aes(color = cut_number(price, n = 7)),
lwd = 1, alpha  = 0.8) +
theme_minimal() +
scale_color_brewer(palette = "YlOrRd") +
labs(x = "Carat of the Diamond",
color = "Price (in $)",
y = "Number of diamonds",
title = "Frequency Polygon") +
scale_y_continuous(n.breaks = 4),
nrow = 2)
