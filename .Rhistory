select(1:10) |>
display_results()
# Chunk 1: setup
#| label: setup
library(tidyverse)
library(gt)
library(gtExtras)
library(nycflights13)
data("flights")
# Chunk 2
prop_missing <- function(x){
mean(is.na(x))
}
# Chunk 3
prop_element <- function(x){
x / sum(x, na.rm = TRUE)
}
# Chunk 4
perc_element <- function(x){
round(x / sum(x, na.rm = TRUE) * 100, 1)
}
# Chunk 5
rescale01 <- function(x) {
# Replace -Inf with the minimum number (other than -Inf)
min_value <- min(x[is.finite(x)])
x[x == -Inf] <- min_value
# Replace +Inf with the maximum number (other than +Inf)
max_value <- max(x[is.finite(x)])
x[x == Inf] <- max_value
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
# Chunk 6
# Function to compute age in years from birth dates
compute_age <- function(birth_dates) {
# Convert the birth dates to Date objects
birth_dates <- as.Date(birth_dates)
# Calculate the current date
current_date <- Sys.Date()
# Calculate age in years using lubridate
ages <- interval(birth_dates, current_date) %/% years(1)
# Return the ages as a numeric vector
return(ages)
}
# Chunk 7
# Method 1
both_na <- function(x,y){
x_na <- which(is.na(x))
y_na <- which(is.na(y))
# values of x which are also present in y
common <- x_na %in% y_na
return(common)
}
# Method 2
both_na <- function(vector1, vector2) {
if (length(vector1) != length(vector2)) {
stop("Both vectors must have the same length.")
}
# Find the indices where both vectors have NA values
na_indices <- which(is.na(vector1) & is.na(vector2))
return(na_indices)
}
# Chunk 8
# Creating a function to display the results in a nice way
display_results <- function(data){
data |>
slice_head(n = 5) |>
gt() |>
cols_label_with(fn = ~ janitor::make_clean_names(., "title")) |>
gt_theme_538()
}
# Chunk 9
filter_severe <- function(data, arrival_delay) {
data |>
filter(is.na({{arrival_delay}}) | ({{arrival_delay}} > 60))
}
# Runinng an example to show it works
flights |>
filter_severe(arr_delay) |>
select(1:10) |>
display_results()
# Chunk 10
summarize_severe <- function(data, arrival_delay){
data |>
summarize(
cancelled_flights = sum(is.na({{arrival_delay}})),
delayed_flights = sum({{arrival_delay}} > 60, na.rm = TRUE)
)
}
# Runinng an example to show it works
flights |>
group_by(dest) |>
summarize_severe(arr_delay) |>
display_results()
# Chunk 11
filter_severe <- function(data, hours){
data |>
filter(arr_delay > (hours*60))
}
# Running an example to show that it works
flights |>
filter_severe(hours = 4) |>
select(1:10) |>
display_results()
# Chunk 12
summarize_weather <- function(data, variable){
data |>
summarize(
mean = mean({{variable}}, na.rm = TRUE),
minimum = min({{variable}}, na.rm = TRUE),
maximum = max({{variable}}, na.rm = TRUE)
)
}
# Runinng an example to show it works
weather |>
group_by(origin) |>
summarize_weather(temp) |>
display_results() |> fmt_number(decimals = 2)
# Method 1
standardize_time <- function(data, variable){
data |>
mutate(std_time = round({{variable}} %/% 100) + (({{variable}} %% 100)/60), 2) |>
relocate(std_time, .after = {{variable}})
}
# Method 2 (after learning use of ":=" in Section 26.4.2)
standardize_time <- function(data, variable){
data |>
mutate({{variable}} := round({{variable}} %/% 100) + (({{variable}} %% 100)/60), 2)
}
# Runinng an example to show it works
flights |>
standardize_time(sched_dep_time) |>
select(1:10) |>
display_results()
standardize_time <- function(data, variable){
data |>
mutate({{variable}} := round({{variable}} %/% 100) + (({{variable}} %% 100)/60), 2)
}
flights |>
standardize_time(sched_dep_time) |>
select(1:10) |>
display_results()
library(tidyverse)
library(lubridate)
df <- tibble(
dist1 = sort(rnorm(100, 5, 2)),
dist2 = sort(rnorm(100, 8, 3)),
dist4 = sort(rnorm(100, 15, 1)),
date = seq.Date(from = ymd("2022-01-01"), ymd("2022-04-10"), by = "day")
)
df
df <- pivot_longer(df, cols = -date, names_to = "dist_name", values_to = "value")
df
fancy_ts <- function(df, val, group) {
labs <- df |>
group_by({{group}}) |>
summarize(breaks = max({{val}}))
ggplot(df,
aes(
x = date,
y = {{val}},
group = {{group}},
color = {{group}})) +
geom_path() +
scale_y_continuous(breaks = labs$breaks, minor_breaks = NULL) +
theme_minimal()
}
fancy_ts()
fancy_ts(df)
df
fancy_ts(df, value, dist_name)
?geom_path
df = tibble(
var1 = rnorm(100, mean = 5, sd = 3),
var2 = 2*var1 + rnorm(1)
)
df
df
plot(df)
df = tibble(
var1 = rnorm(100, mean = 5, sd = 3),
var2 = 2*var1 + rnorm(1, sd = 3)
)
plot(df)
var1 = rnorm(100, mean = 5, sd = 3)
2*var1 + rnorm(1, sd = 3)
df = tibble(
var1 = rnorm(100, mean = 5, sd = 3),
var2 = 2*var1 + rnorm(1, sd = 3)
)
plot(df)
df = tibble(
var1 = rnorm(100, mean = 5, sd = 3),
var2 = 2*var1 + rnorm(1, mean = 5, sd = 3)
)
plot(df)
df = tibble(
var1 = rnorm(100, mean = 5, sd = 3),
var2 = 2*(var1 + rnorm(1, mean = 5, sd = 3))
)
plot(df)
rnorm(1, mean = 5, sd = 3)
rnorm(1, mean = 5, sd = 3)
rnorm(1, mean = 5, sd = 3)
rnorm(1, mean = 5, sd = 3)
rnorm(1, mean = 5, sd = 3)
rnorm(1, mean = 5, sd = 3)
rnorm(1, mean = 5, sd = 3)
rnorm(1, mean = 5, sd = 3)
rnorm(1, mean = 5, sd = 3)
rnorm(1, mean = 5, sd = 3)
rnorm(1, mean = 5, sd = 3)
rnorm(1, mean = 5, sd = 3)
rnorm(1, mean = 5, sd = 3)
rnorm(1, mean = 0, sd = 5)
rnorm(1, mean = 0, sd = 5)
rnorm(1, mean = 0, sd = 5)
rnorm(1, mean = 0, sd = 5)
rnorm(1, mean = 0, sd = 5)
rnorm(1, mean = 0, sd = 5)
df = tibble(
var1 = rnorm(100, mean = 5, sd = 3),
var2 = 2*var1 + rnorm(1, mean = 0, sd = 5))
plot(df)
df = tibble(
var1 = rnorm(100, mean = 5, sd = 3),
var2 = var1 + rnorm(1, mean = 0, sd = 5))
plot(df)
scatterplot <- function(data, x, y){
data |>
ggplot(aes(x = {{x}},
y = {{y}})) +
geom_point() +
theme_classic()
}
scatterplot(df, var1, var2)
scatterplot <- function(data, x, y){
data |>
ggplot(aes(x = {{x}},
y = {{y}})) +
geom_point() +
geom_smooth(method = "lm",
formula = {{y}} ~ {{x}},
se = FALSE)
theme_classic()
}
scatterplot(df, var1, var2)
scatterplot <- function(data, x, y){
data |>
ggplot(aes(x = {{x}},
y = {{y}})) +
geom_point() +
geom_smooth(method = "lm",
formula = {{y}} ~ {{x}},
se = FALSE) +
theme_classic()
}
scatterplot(df, var1, var2)
df = tibble(
var1 = rnorm(100, mean = 5, sd = 3),
var2 = rnorm(1, mean = 0, sd = 5))
scatterplot <- function(data, x, y){
data |>
ggplot(aes(x = {{x}},
y = {{y}})) +
geom_point() +
theme_classic()
}
scatterplot(df, var1, var2)
df = tibble(
var1 = rnorm(100, mean = 5, sd = 3),
var2 = rnorm(100, mean = 0, sd = 5))
scatterplot <- function(data, x, y){
data |>
ggplot(aes(x = {{x}},
y = {{y}})) +
geom_point() +
theme_classic()
}
scatterplot(df, var1, var2)
df = tibble(
var1 = rnorm(100, mean = 5, sd = 3),
var2 = 2*var1 + rnorm(100, mean = 0, sd = 5))
scatterplot <- function(data, x, y){
data |>
ggplot(aes(x = {{x}},
y = {{y}})) +
geom_point() +
theme_classic()
}
scatterplot(df, var1, var2)
scatterplot <- function(data, x, y){
data |>
ggplot(aes(x = {{x}},
y = {{y}})) +
geom_point() +
geom_smooth(method = "lm",
formula = {{y}} ~ {{x}},
se = FALSE) +
theme_classic()
}
scatterplot(df, var1, var2)
scatterplot <- function(data, x, y){
data |>
ggplot(aes(x = {{x}},
y = {{y}})) +
geom_point() +
geom_smooth(method = "lm",
formula = {{y}} ~ {{x}},
se = FALSE) +
labs(title = rlang::englue("A scatter plot of {{y}} vs. {{x}} from {{data}} data.frame")) +
theme_classic()
}
scatterplot(df, var1, var2)
scatterplot <- function(data, x, y){
ggplot(data, aes(x = {{x}},
y = {{y}})) +
geom_point() +
geom_smooth(method = "lm",
formula = {{y}} ~ {{x}},
se = FALSE) +
labs(title = rlang::englue("A scatter plot of {{y}} vs. {{x}} from {{data}} data.frame")) +
theme_classic()
}
scatterplot(df, var1, var2)
scatterplot <- function(data, x, y){
ggplot(data, aes(x = {{x}},
y = {{y}})) +
geom_point() +
geom_smooth(method = "lm",
formula = {{y}} ~ {{x}},
se = FALSE) +
labs(title = rlang::englue("A scatter plot of {{y}} vs. {{x}}")) +
theme_classic()
}
scatterplot(df, var1, var2)
?str_sub
---
title: "Chapter 26"
x <- 1:5
?rep
y <- 8:9
match_length <- function(x, y) {
rep(y, length.out = length(x))
}
x <- 1:5
y <- 8:9
match_length(x, y)
sample(2, 10, replace = TRUE)
?sample
sample(3, 10, replace = TRUE)
#| label: setup
library(tidyverse)
rnorm_na <- function(n, n_na, mean = 0, sd = 1) {
sample(c(rnorm(n - n_na, mean = mean, sd = sd), rep(NA, n_na)))
}
df_miss <- tibble(
a = rnorm_na(5, 1),
b = rnorm_na(5, 1),
c = rnorm_na(5, 2),
d = rnorm(5)
)
df_miss
df_miss |>
summarize(
across(a:d, median),
n = n()
)
penguins <- palmerpenguins::penguins
penguins
penguins |>
summarise(across(.cols = everything(),
.fns = n_distinct))
everything()
mtcars |>
summarise(across(everything(), mean))
palmerpenguins::penguins |>
summarise(across(.cols = everything(),
.fns = n_distinct))
?count
?n
ggplot2::diamonds |>
group_by(cut, clarity, color) |>
summarise(across(
.cols = where(is.numeric),
.fns = list(
mean = function(x) mean(x, na.rm = TRUE),
n = n
)
))
ggplot2::diamonds |>
group_by(cut, clarity, color) |>
summarise(across(
.cols = where(is.numeric),
.fns = list(
mean = function(x) mean(x, na.rm = TRUE),
n = n()
)
))
ggplot2::diamonds |>
group_by(cut, clarity, color) |>
summarise(across(
.cols = where(is.numeric),
.fns = function(x) mean(x, na.rm = TRUE)
),
n = n()
)
ggplot2::diamonds |>
group_by(cut, clarity, color) |>
summarise(
across(
.cols = where(is.numeric),
.fns = function(x) mean(x, na.rm = TRUE)
),
n = n()
)
?across
# Create a sample data frame
data <- data.frame(
A = c(1, 2, 3),
B = c(4, 5, 6)
)
# Use across() without naming the functions
data %>%
mutate(across(everything(), list(sqrt, log)))
# Use across() with named new functions
data %>%
mutate(across(everything(),
list(sqrt = sqrt,
log = log,
mean = \(x) mean(x, na.rm = TRUE)
)
)
)
# Create a sample data frame
data <- data.frame(
A = c(1, 2, 3, NA, 4),
B = c(4, NA, 5, 6, 7)
)
data
# Use across() without naming the functions
data %>%
mutate(across(everything(), list(sqrt, log)))
# Use across() with named new functions
data %>%
mutate(across(everything(),
list(sqrt = sqrt,
log = log,
mean = \(x) mean(x, na.rm = TRUE)
)
)
)
# Create a sample data frame
data <- data.frame(
A = c(1, 2, 3, NA, 4),
B = c(4, NA, 5, 6, 7)
)
# Use across() without naming the functions
data %>%
mutate(across(everything(), list(sqrt, log)))
# Use across() with named new functions
data %>%
mutate(
across(
everything(),
list(sqrt = sqrt,
log = log,
mean = \(x) mean(x, na.rm = TRUE)
)
)
)
expand_dates <- function(df) {
df |>
mutate(
across(where(is.Date), list(year = year, month = month, day = mday))
) |>
select(!where(is.Date))
}
df_date <- tibble(
name = c("Amy", "Bob", "Charlie", "David", "Eva"),
date = ymd(c("2009-08-03", "2010-01-16", "2012-05-20", "2013-11-30", "2015-07-12"))
)
df_date |>
expand_dates()
df_date
show_missing <- function(df, group_vars, summary_vars = everything()) {
df |>
group_by(pick({{ group_vars }})) |>
summarize(
across({{ summary_vars }}, \(x) sum(is.na(x))),
.groups = "drop"
) |>
select(where(\(x) any(x > 0)))
}
nycflights13::flights |> show_missing(c(year, month, day))
#| label: setup
library(tidyverse)
library(gt)
library(gtExtras)
show_missing <- function(df, group_vars, summary_vars = everything()) {
df |>
group_by(pick({{ group_vars }})) |>
summarize(
across({{ summary_vars }}, \(x) sum(is.na(x))),
.groups = "drop"
) |>
select(where(\(x) any(x > 0)))
}
nycflights13::flights |>
show_missing(c(year, month, day)) |>
slice_head(n = 5) |>
gt() |> gt_theme_538()
