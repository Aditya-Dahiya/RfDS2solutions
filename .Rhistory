prop_cancelled = sum(is.na(dep_time)) / n(),
avg_delay = mean(dep_delay, na.rm = TRUE)
) |>
ggplot(aes(x = date)) +
geom_smooth(aes(y = prop_cancelled * 100),
method = "loess",
span = coeff,
col = "red",
se = FALSE) +
geom_smooth(aes(y = avg_delay), ,
method = "loess",
span = coeff,
col = "blue",
se = FALSE) +
theme_minimal() +
scale_y_continuous(
name = "Percentage Cancelled Flights (%)",
sec.axis = sec_axis(trans = ~ .*0.5,
name = "Avg. Delay (min.)")) +
labs(x = NULL) +
theme(axis.text.y.left = element_text(color = "red"),
axis.title.y.left = element_text(color = "red"),
axis.text.y.right = element_text(color = "blue"),
axis.title.y.right = element_text(color = "blue")) +
labs(title = "Flight Cancellations and average delays are correlated",
subtitle = "Higher average delay occurs on same days as more flight cancellations")
flights |>
filter(is.na(dep_time)) |>
mutate(date = make_date(year = year,
month = month,
day = day)) |>
group_by(date) |>
count() |>
ggplot(aes(x = date, y = n)) +
geom_line() +
ggthemes::theme_fivethirtyeight() +
labs(title = "Cancelled flight numbers show spikes on certain days",
subtitle = "There is consistent cancellation in December - may be due to snowstorms!") +
theme(
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white", colour="grey")
)
flights |>
filter(is.na(dep_time)) |>
mutate(date = make_date(year = year,
month = month,
day = day)) |>
group_by(date) |>
count() |>
ggplot(aes(x = date, y = n)) +
geom_line() +
ggthemes::theme_fivethirtyeight() +
labs(title = "Cancelled flight numbers show spikes on certain days",
subtitle = "There is consistent cancellation in December - may be due to snowstorms!") +
theme(
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white", colour = "white")
)
gridExtra::grid.arrange(
flights |>
filter(is.na(dep_time)) |>
group_by(month) |>
count() |>
ggplot(aes(x = month, y = n)) +
geom_line() +
ggthemes::theme_fivethirtyeight() +
labs(y = "No. of cancelled flights",
title = "Flight cancellations occur most \nin a few months",
subtitle = "December-Feruary, June-July see maximum cancelled flights. \nOctober-November have the least cancellations") +
scale_x_continuous(breaks = 1:12,
labels = mths_lab) +
theme(title = element_text(size = 8)) +
theme(
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white", colour = "white")
),
flights |>
filter(is.na(dep_time)) |>
group_by(day) |>
count() |>
ggplot(aes(x = day, y = n)) +
geom_line() +
geom_point(col = "darkgrey", size = 2) +
ggthemes::theme_fivethirtyeight() +
labs(y = "No. of cancelled flights",
title = "Flight cancellations spike on 8th-9th days \nof the months",
subtitle = "This is unlikely to be a pattern since \nthis is a sum, influenced by a few high values") +
scale_x_continuous(breaks = seq(1, 31, 5)) +
theme(title = element_text(size = 8)) +
theme(
plot.background = element_rect(fill = "white"),
panel.background = element_rect(fill = "white", colour = "white")
),
ncol = 2)
# Sample vector with missing values
x <- c(1, NA, 3, NA, 5, 6)
# Count of missing values
count_missing <- sum(is.na(x))
cat("Count of missing values:", count_missing, "\n")
# Proportion of missing values
prop_missing <- mean(is.na(x))
cat("Proportion of missing values:", prop_missing, "\n")
?prod
x <- sample(c(TRUE, FALSE),
size = 10,
replace = TRUE)
x
prod(x)
min(x)
max(x)
min(x)
y <- rep(TRUE, 10)
y
x
prod(x)
prod(y)
prod(y)
min(x)
min(y)
# A logical vector with random TRUE and FALSE
random <- sample(c(TRUE, FALSE),
size = 10,
replace = TRUE)
random
# A logical vector with all TRUE
all_true <- rep(TRUE, 10)
all_true
# A logical vector with all FALSE
all_false <- rep(FALSE, 10)
all_false
prod(random)
prod(all_true)
prod(all_false)
min(random))
min(random)
min(all_true)
min(all_false)
?allGenerics
?all
?any
?summarize
x = 0:20
x %% 2
if_else(x %% 2 == 0,
true = "even",
false = "odd")
#| label: setup
library(tidyverse)
library(nycflights13)
data("flights")
library(gt)
x = 0:20
if_else(x %% 2 == 0,
true = "even",
false = "odd")
days = c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday")
weeknd = c("Saturday", "Sunday")
x = sample(days, size = 10, replace = TRUE)
if_else(x %in% weeknd,
"Weekends",
"Weekdays",
"NA")
"NA")
cbind(x,
if_else(x %in% weeknd,
"Weekends",
"Weekdays",
"NA"))
cbind(x,
if_else(x %in% weeknd,
"Weekends",
"Weekdays",
"NA")) |>
gt()
cbind(x,
if_else(x %in% weeknd,
"Weekends",
"Weekdays",
"NA")) |>
as_tibble() |> gt()
x = sample(x = -10:10,
replace = TRUE,
size = 10)
x
x = sample(x = -10:10,
replace = TRUE,
size = 100)
if_else
?if_else
if_else(x < 0,
true = -x,
false = x,
missing = 0)
tibble(
x = x,
abs_x = if_else(x < 0,
true = -x,
false = x,
missing = 0)
)
tibble(
x = x,
abs_x = if_else(x < 0,
true = -x,
false = x,
missing = 0)
) |>
gt() |>
opt_interactive(use_pagination = TRUE,
pagination_type = "simple")
?case_when
flights |>
mutate(holiday = case_when(
month == 1 & day == 1   ~ "New Year’s Day",
month == 6 & day == 19  ~ "Juneteenth National Independence Day",
month == 7 & day == 4   ~ "Independence Day",
month == 11 & day == 11 ~ "Veterans’ Day",
month == 12 & day == 25 ~ "Christmas Day",
.default = NA
))
?mutate
flights |>
mutate(holiday = case_when(
month == 1 & day == 1   ~ "New Year’s Day",
month == 6 & day == 19  ~ "Juneteenth National Independence Day",
month == 7 & day == 4   ~ "Independence Day",
month == 11 & day == 11 ~ "Veterans’ Day",
month == 12 & day == 25 ~ "Christmas Day",
.default = NA
),
.keep = "used")
flights |>
mutate(holiday = case_when(
month == 1 & day == 1   ~ "New Year’s Day",
month == 6 & day == 19  ~ "Juneteenth National Independence Day",
month == 7 & day == 4   ~ "Independence Day",
month == 11 & day == 11 ~ "Veterans’ Day",
month == 12 & day == 25 ~ "Christmas Day",
.default = NA
),
.keep = "used") |>
mutate(is_holiday = if_else(is.na(holiday),
true = TRUE,
false = FALSE))
flights |>
mutate(holiday = case_when(
month == 1 & day == 1   ~ "New Year’s Day",
month == 6 & day == 19  ~ "Juneteenth National Independence Day",
month == 7 & day == 4   ~ "Independence Day",
month == 11 & day == 11 ~ "Veterans’ Day",
month == 12 & day == 25 ~ "Christmas Day",
.default = NA
),
.keep = "used") |>
mutate(is_holiday = if_else(!is.na(holiday),
true = TRUE,
false = FALSE))
?summarise
flights |>
mutate(holiday = case_when(
month == 1 & day == 1   ~ "New Year’s Day",
month == 6 & day == 19  ~ "Juneteenth National Independence Day",
month == 7 & day == 4   ~ "Independence Day",
month == 11 & day == 11 ~ "Veterans’ Day",
month == 12 & day == 25 ~ "Christmas Day",
.default = NA
),
.keep = "used") |>
mutate(is_holiday = if_else(!is.na(holiday),
true = TRUE,
false = FALSE)) |>
summarize(n = n(),
.groups = c(month, is_holiday))
flights |>
mutate(holiday = case_when(
month == 1 & day == 1   ~ "New Year’s Day",
month == 6 & day == 19  ~ "Juneteenth National Independence Day",
month == 7 & day == 4   ~ "Independence Day",
month == 11 & day == 11 ~ "Veterans’ Day",
month == 12 & day == 25 ~ "Christmas Day",
.default = NA
),
.keep = "used") |>
mutate(is_holiday = if_else(!is.na(holiday),
true = TRUE,
false = FALSE)) |>
summarize(n = n(),
.groups = is_holiday)
flights |>
mutate(holiday = case_when(
month == 1 & day == 1   ~ "New Year’s Day",
month == 6 & day == 19  ~ "Juneteenth National Independence Day",
month == 7 & day == 4   ~ "Independence Day",
month == 11 & day == 11 ~ "Veterans’ Day",
month == 12 & day == 25 ~ "Christmas Day",
.default = NA
),
.keep = "used") |>
mutate(is_holiday = if_else(!is.na(holiday),
true = TRUE,
false = FALSE))
flights |>
mutate(holiday = case_when(
month == 1 & day == 1   ~ "New Year’s Day",
month == 6 & day == 19  ~ "Juneteenth National Independence Day",
month == 7 & day == 4   ~ "Independence Day",
month == 11 & day == 11 ~ "Veterans’ Day",
month == 12 & day == 25 ~ "Christmas Day",
.default = NA
),
.keep = "used") |>
mutate(is_holiday = if_else(!is.na(holiday),
true = TRUE,
false = FALSE)) |>
group_by(is_holiday)
flights |>
mutate(holiday = case_when(
month == 1 & day == 1   ~ "New Year’s Day",
month == 6 & day == 19  ~ "Juneteenth National Independence Day",
month == 7 & day == 4   ~ "Independence Day",
month == 11 & day == 11 ~ "Veterans’ Day",
month == 12 & day == 25 ~ "Christmas Day",
.default = NA
),
.keep = "used") |>
mutate(is_holiday = if_else(!is.na(holiday),
true = TRUE,
false = FALSE)) |>
group_by(is_holiday) |>
summarize(n = n())
flights |>
mutate(holiday = case_when(
month == 1 & day == 1   ~ "New Year’s Day",
month == 6 & day == 19  ~ "Juneteenth National Independence Day",
month == 7 & day == 4   ~ "Independence Day",
month == 11 & day == 11 ~ "Veterans’ Day",
month == 12 & day == 25 ~ "Christmas Day",
.default = NA
),
.keep = "used") |>
mutate(is_holiday = if_else(!is.na(holiday),
true = TRUE,
false = FALSE)) |>
group_by(holiday) |>
summarize(n = n())
flights |>
mutate(holiday = case_when(
month == 1 & day == 1   ~ "New Year’s Day",
month == 6 & day == 19  ~ "Juneteenth National Independence Day",
month == 7 & day == 4   ~ "Independence Day",
month == 11 & day == 11 ~ "Veterans’ Day",
month == 12 & day == 25 ~ "Christmas Day",
.default = NA
),
.keep = "used") |>
mutate(is_holiday = if_else(!is.na(holiday),
true = TRUE,
false = FALSE)) |>
group_by(month, day, holiday) |>
summarize(n = n())
NA_character_
>NA_character_
?NA_character_
flights |>
mutate(
is_holiday = case_when(
(month == 1 & day == 1) ~ TRUE,        # New Year's Day
(month == 7 & day == 4) ~ TRUE,        # 4th of July
(month == 12 & day == 25) ~ TRUE,      # Christmas
TRUE ~ FALSE                           # Not a holiday
),
holiday_name = case_when(
is_holiday ~ case_when(
(month == 1 & day == 1) ~ "New Year's Day",
(month == 7 & day == 4) ~ "4th of July",
(month == 12 & day == 25) ~ "Christmas",
TRUE ~ NA_character_
),
TRUE ~ NA_character_
)
)
flights |>
mutate(
is_holiday = case_when(
(month == 1 & day == 1) ~ TRUE,        # New Year's Day
(month == 7 & day == 4) ~ TRUE,        # 4th of July
(month == 12 & day == 25) ~ TRUE,      # Christmas
TRUE ~ FALSE                           # Not a holiday
),
holiday_name = case_when(
is_holiday ~ case_when(
(month == 1 & day == 1) ~ "New Year's Day",
(month == 7 & day == 4) ~ "4th of July",
(month == 12 & day == 25) ~ "Christmas",
TRUE ~ NA_character_
),
TRUE ~ NA_character_
),
.keep = "used"
)
library(tidyverse)
library(gt)
library(nycflights13)
data("flights")
flights |>
count(dest)
?count
flights |>
count(dest, wt = distance)
flights |>
count(dest, wt = distance, sort = TRUE)
flights |>
count(tailnum, sort = TRUE)
flights |>
count(tailnum, wt = distance, sort = TRUE)
flights |>
count(tailnum, wt = distance, sort = TRUE)[2,1]
flights |>
count(tailnum, wt = distance, sort = TRUE) |>
select(1) |> filter(2)
flights |>
count(tailnum, wt = distance, sort = TRUE)
?subset
flights |>
count(tailnum, wt = distance, sort = TRUE) |>
subset(select = tailnum)
flights |>
count(tailnum, wt = distance, sort = TRUE) |>
subset(select = tailnum)[2, 1]
flights |>
count(tailnum, wt = distance, sort = TRUE) |>
subset(select = tailnum) |>
filter(row = 2)
flights |>
count(tailnum, wt = distance, sort = TRUE) |>
subset(select = tailnum) |>
filter(row == 2)
flights |>
count(tailnum, wt = distance, sort = TRUE)
?count
?count
flights |>
name
flights |>
names()
flights |>
names()
flights |>
summarise(missing = sum(is.na(dep_time)))
flights |>
summarise(total = n(),
missing = sum(is.na(dep_time)))
flights |>
group_by(month) |>
summarise(total = n(),
missing = sum(is.na(dep_time)))
flights |>
group_by(month) |>
count(wt = is.na(dep_time))
flights |>
group_by(month) |>
summarise(total = n(),
missing = sum(is.na(dep_time))) |>
gt()
#| layout-ncol: 2
flights |>
group_by(month) |>
summarise(total = n(),
missing = sum(is.na(dep_time))) |>
gt()
flights |>
group_by(month) |>
count(wt = is.na(dep_time)) |>
gt()
flights |>
group_by(month) |>
count(wt = is.na(dep_time)) |>
gt()
flights |>
group_by(month) |>
count(wt = is.na(dep_time))
flights |>
group_by(month) |>
count(wt = is.na(dep_time)) |>
ungroup() |>
gt()
#| layout-ncol: 2
flights |>
group_by(month) |>
summarise(total = n(),
missing = sum(is.na(dep_time))) |>
gt()
flights |>
group_by(month) |>
count(wt = is.na(dep_time)) |>
ungroup() |>
gt()
flights |>
group_by(dest) |>
summarise(n = n()) |>
arrange(desc(n))
flights |> count(dest, sort = TRUE)
flights |> count(tailnum, wt = distance)
flights |>
group_by(tailnum) |>
summarise(n = sum(distance)) |>
arrange(desc(n))
flights |>
group_by(tailnum) |>
summarise(n = sum(distance))
flights |> count(tailnum, wt = distance)
