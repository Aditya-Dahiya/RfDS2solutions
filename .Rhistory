y = "Number of aircraft",
title = "The World War decades saw maximum aircraft production",
subtitle = "Germany dominated the prodcution in the pre WW-II 1930s\nBut, therafter, US and USSR dominated production right upto the end of cold war in 1980s",
fill = NULL) +
scale_fill_manual(values = c("#bbbfc9",
"red",
"#8491b5",
"#5c6580",
"#576cad",
"#f5f114")) +
guides(fill = guide_legend(nrow = 1)) +
theme_minimal() +
theme(legend.position = "bottom",
panel.grid = element_blank(),
plot.title.position = "plot")
#| label: fig-operational-planes
#| fig-cap: "Most produced, and currently operational aircraft"
df |>
filter(status == "Operational") |>
arrange(desc(numbers)) |>
slice_head(n = 10) |>
mutate(type = if_else(type == "McDonnell Douglas F/A-18 Hornet",
"F/A-18 Hornet",
type)) |>
ggplot(aes(x = numbers,
y = reorder(type, numbers),
fill = country)) +
geom_bar(stat = "identity") +
theme_void() +
geom_text(aes(x = 0,
label = type),
hjust = "left") +
geom_text(aes(label = numbers),
hjust = -0.3) +
labs(fill = NULL,
title = "The most produced, and still operational, fighter planes belong to US or USSR",
subtitle = "MiG-21 is most produced craft, outnumbering the next highest by more than twice!")  +
scale_fill_manual(values = c("#f5f584", "lightblue", "#828afa", "#f28374")) +
theme(plot.title.position = "panel",
legend.position = "bottom")
#| label: fig-retired-planes
#| fig-cap: "Most produced aircraft of all time: all of them are retired"
df |>
arrange(desc(numbers)) |>
slice_head(n = 10) |>
ggplot(aes(x = numbers,
y = reorder(type, numbers),
fill = country)) +
geom_bar(stat = "identity") +
theme_void() +
geom_text(aes(x = 0,
label = type),
hjust = "left") +
geom_text(aes(label = scales::comma(numbers)),
hjust = -0.3) +
labs(fill = NULL,
title = "However, the most produced fighter planes ever, are all retired!",
subtitle = "Historically, Germany and UK, mass-produced the planes they no longer use.")  +
scale_fill_manual(values = c("#97979c", "#54b8ff", "#828afa", "#f28374")) +
theme(plot.title.position = "panel",
legend.position = "bottom")
#| label: fig-type-all-time
#| fig-cap: "Number of aircraft, ever produced, by the type or class of aircraft"
df |>
mutate(class = if_else(class == "fighter-bomber",
"Fighter-bomber",
class)) |>
count(class, sort = TRUE, wt = numbers) |>
drop_na() |>
mutate(
class = fct(class),
class = fct_lump_n(class, n = 9, w = n)
) |>
count(class, sort = TRUE, wt = n) |>
ggplot(aes(x = n,
y = fct_rev(class))) +
geom_bar(stat = "identity", fill = "grey") +
theme_void() +
geom_text(aes(x = 0,
label = class),
hjust = "left") +
geom_text(aes(label = scales::comma(n)),
hjust = -0.1) +
labs(fill = NULL,
title = "Fighter-bombers were the most common type of aircraft ever produced!") +
theme(plot.title.position = "panel",
legend.position = "bottom")
df
#| label: fig-complete-data
#| fig-cap: "The complete data on fighter aircraft produced by different countries"
df |>
gt() |>
cols_label_with(fn = ~ janitor::clean_names(., "title")) |>
opt_interactive(page_size_default = 5,
use_highlight = TRUE,
use_resizers = TRUE)
#| label: fig-complete-data
#| fig-cap: "The complete data on fighter aircraft produced by different countries"
df |>
gt() |>
cols_label_with(fn = ~ janitor::make_clean_names(., "title")) |>
opt_interactive(page_size_default = 5,
use_highlight = TRUE,
use_resizers = TRUE)
df
#| label: setup
library(tidyverse)
library(nycflights13)
-Inf == -Inf
Inf == Inf
x = c(1, 4, -56, Inf, -Inf, 10)
if_else(x == -Inf,
0,
x)
rescale01 <- function(x) {
x <- if_else(x == -Inf,
min(x),
x)
x <- if_else(x == Inf,
max(x),
x)
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
rescale01(x)
x
if_else(x == -Inf,
min(x),
x)
?min
rescale01 <- function(x) {
# Replace -Inf with the minimum number (other than -Inf)
min_value <- min(x[is.finite(x)])
x[x == -Inf] <- min_value
# Replace +Inf with the maximum number (other than +Inf)
max_value <- max(x[is.finite(x)])
x[x == Inf] <- max_value
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
rescale01(x)
?is_directory
file.info(x)
?file.info
file.info("about.qmd")
file.access("about.qmd")
file.access("about.qmd", 4)
?file.access
#| label: setup
library(tidyverse)
library(nycflights13)
?names_from
?pivot_wider
#| label: setup
library(tidyverse)
library(nycflights13)
data("flights")
filter_severe <- function(data) {
data |>
filter(is.na(arr_time) | (arr_delay > 60))
}
flights |>
flights_severe()
filter_severe <- function(data) {
data |>
filter(is.na(arr_time) | (arr_delay > 60))
}
flights |>
flights_severe()
flights |>
filter_severe()
flights |>
filter_severe() |> View()
filter_severe <- function(data, arrival_delay) {
data |>
filter(is.na({{arrival_delay}}) | ({{arrival_delay}} > 60))
}
flights |>
filter_severe(arr_delay)
summarize_severe <- function(data, arrival_delay){
data |>
summarize(
cancelled_flights = sum(is.na({{arrival_delay}})),
delayed_flights = sum({{arrival_delay > 60}})
)
}
flights |>
summarize_severe(arr_delay)
#| label: setup
library(tidyverse)
library(nycflights13)
data("flights")
flights |>
summarize_severe(arr_delay)
flights |>
summarize_severe("arr_delay")
summarize_severe <- function(data, arrival_delay){
data |>
summarize(
cancelled_flights = sum(is.na({{arrival_delay}})),
delayed_flights = sum({{arrival_delay}} > 60)
)
}
flights |>
summarize_severe(arr_delay)
summarize_severe <- function(data, arrival_delay){
data |>
summarize(
cancelled_flights = sum(is.na({{arrival_delay}})),
delayed_flights = sum({{arrival_delay}} > 60, na.rm = TRUE)
)
}
flights |>
summarize_severe(arr_delay)
flights |>
group_by(dest) |>
summarize_severe(arr_delay)
#| label: setup
library(tidyverse)
library(gt)
library(gtExtras)
library(nycflights13)
data("flights")
flights |>
group_by(dest) |>
summarize_severe(arr_delay) |>
slice_head() |> gt() |> gt_theme_538()
flights |>
group_by(dest) |>
summarize_severe(arr_delay) |>
slice_head(n = 5) |> gt() |> gt_theme_538()
# Creating a function to display the results in a nice way
display_results <- function(data){
data |>
slice_head(n = 5) |>
gt() |>
cols_label_with(fn = ~ janitor::make_clean_names(., "title")) |>
gt_theme_espn()
}
# Runinng an example to show it works
flights |>
filter_severe(arr_delay) |>
display_results()
filter_severe <- function(data, arrival_delay) {
data |>
filter(is.na({{arrival_delay}}) | ({{arrival_delay}} > 60))
}
# Runinng an example to show it works
flights |>
filter_severe(arr_delay) |>
display_results()
# Creating a function to display the results in a nice way
display_results <- function(data){
data |>
slice_head(n = 5) |>
gt() |>
cols_label_with(fn = ~ janitor::make_clean_names(., "title")) |>
gt_theme_538()
}
filter_severe <- function(data, arrival_delay) {
data |>
filter(is.na({{arrival_delay}}) | ({{arrival_delay}} > 60))
}
# Runinng an example to show it works
flights |>
filter_severe(arr_delay) |>
display_results()
# Creating a function to display the results in a nice way
display_results <- function(data){
data |>
slice_head(n = 5) |>
gt() |>
cols_label_with(fn = ~ janitor::make_clean_names(., "title")) |>
gt_theme_538()
}
# Runinng an example to show it works
flights |>
group_by(dest) |>
summarize_severe(arr_delay) |>
display_results()
filter_severe <- function(data, hours){
data |>
filter(arr_delay > (hours*60))
}
flights |>
filter_severe(hours = 4) |>
display_results()
summarize_severe <- function(data, arrival_delay){
data |>
summarize(
cancelled_flights = sum(is.na({{arrival_delay}})),
delayed_flights = sum({{arrival_delay}} > 60, na.rm = TRUE)
)
}
# Runinng an example to show it works
flights |>
group_by(dest) |>
summarize_severe(arr_delay) |>
select(1:10) |>
display_results()
# Runinng an example to show it works
flights |>
filter_severe(arr_delay) |>
select(1:10) |>
display_results()
filter_severe <- function(data, arrival_delay) {
data |>
filter(is.na({{arrival_delay}}) | ({{arrival_delay}} > 60))
}
# Runinng an example to show it works
flights |>
filter_severe(arr_delay) |>
select(1:10) |>
display_results()
summarize_severe <- function(data, arrival_delay){
data |>
summarize(
cancelled_flights = sum(is.na({{arrival_delay}})),
delayed_flights = sum({{arrival_delay}} > 60, na.rm = TRUE)
)
}
# Runinng an example to show it works
flights |>
group_by(dest) |>
summarize_severe(arr_delay) |>
display_results()
filter_severe <- function(data, hours){
data |>
filter(arr_delay > (hours*60))
}
flights |>
filter_severe(hours = 4) |>
select(1:10) |>
display_results()
weather
summarize_weather <- function(data, variable){
data |>
summarize(
mean = mean({{variable}}, na.rm = TRUE),
minimum = min({{variable}}, na.rm = TRUE),
maximum = max({{variable}}, na.rm = TRUE)
)
}
# Runinng an example to show it works
weather |>
group_by(faa) |>
summarize_weather(temp)
weather |>
group_by(faa)
weather
# Runinng an example to show it works
weather |>
group_by(origin) |>
summarize_weather(temp)
# Runinng an example to show it works
weather |>
group_by(origin) |>
summarize_weather(temp) |>
display_results()
# Runinng an example to show it works
weather |>
group_by(origin) |>
summarize_weather(temp) |>
display_results() |> fmt_number(decimals = 2)
545 %% 100
545 %/% 100
standardize_team <- function(data, variable){
data |>
mutate({{variable}} = ({{variable}} %/% 100) + (({{variable}}%%100)/60))
standardize_team <- function(data, variable){
data |>
mutate({{variable}} = ({{variable}} %/% 100) + (({{variable}} %% 100)/60))
standardize_team <- function(data, variable){
data |>
mutate({{variable}} = ({{variable}} %/% 100) + (({{variable}} %% 100)/60))
standardize_time <- function(data, variable){
data |>
mutate(std_time = ({{variable}} %/% 100) + (({{variable}} %% 100)/60))
}
standardize_time <- function(data, variable){
data |>
mutate(std_time = ({{variable}} %/% 100) + (({{variable}} %% 100)/60)) |>
rename({{variable}} = std_time) |>
standardize_time <- function(data, variable){
data |>
mutate(std_time = ({{variable}} %/% 100) + (({{variable}} %% 100)/60))
}
# Runinng an example to show it works
flights |>
standardize_time(sched_dep_time)
standardize_time <- function(data, variable){
data |>
mutate(std_time = ({{variable}} %/% 100) + (({{variable}} %% 100)/60)) |>
relocate(std_time, .after = {{variable}})
}
# Runinng an example to show it works
flights |>
standardize_time(sched_dep_time)
# Runinng an example to show it works
flights |>
standardize_time(sched_dep_time) |>
select(1:10) |>
display_results()
standardize_time <- function(data, variable){
data |>
mutate(std_time = round({{variable}} %/% 100) + (({{variable}} %% 100)/60), 2) |>
relocate(std_time, .after = {{variable}})
}
# Runinng an example to show it works
flights |>
standardize_time(sched_dep_time) |>
select(1:10) |>
display_results()
standardize_time <- function(data, variable){
data |>
mutate(std_time = round({{variable}} %/% 100) + (({{variable}} %% 100)/60), 2) |>
relocate(std_time, .after = {{variable}})
}
# Runinng an example to show it works
flights |>
standardize_time(sched_dep_time) |>
select(1:10) |>
display_results()
# Runinng an example to show it works
flights |>
standardize_time(sched_dep_time) |>
select(1:10) |>
display_results() |>
fmt_number(std_time, decimals = 2)
data <- data.frame(x = 1:5, y = 6:10)
custom_function <- function(df) {
# Using data masking to prevent access to global 'data' variable
df %>%
mutate(z = x + y)
}
custom_function(data)
data <- data.frame(x = 1:5, y = 6:10)
selected_columns <- c("x", "y")
result <- data %>%
select(!!!syms(selected_columns))
data %>%
select(!!!syms(selected_columns))
!!!syms(selected_columns)
syms(selected_columns)
data %>%
select(syms(selected_columns))
!!!syms(selected_columns)
data %>%
select(!!!syms(selected_columns))
?syms
!c("x")
!c(2)
|!c(2)
!!c(2)
!!!c(2)
data %>%
select(selected_columns)
data %>%
select(any_of(selected_columns))
data %>%
select(all_of(selected_columns))
?group_by
count_prop <- function(df, vars, sort = FALSE) {
df |>
count(pick({{ vars }}), sort = sort) |>
mutate(prop = n / sum(n))
}
count_prop <- function(df, var, sort = FALSE) {
df |>
count({{ var }}, sort = sort) |>
mutate(prop = n / sum(n))
}
# Testing the results
flights |>
count_prop(dest)
count_prop <- function(df, vars, sort = FALSE) {
df |>
count(pick({{ vars }}), sort = sort) |>
mutate(prop = n / sum(n))
}
# Testing the results
flights |>
count_prop(dest)
# Testing the results
flights |>
count_prop(c(dest, origin))
# Testing the results
flights |>
count_prop(c(dest, origin)) |>
display_results()
# Testing the results
flights |>
count_prop(c(dest, origin)) |>
filter(-c(1:3)) |>
display_results()
# Testing the results
flights |>
count_prop(c(dest, origin)) |>
filter(-(1:3)) |>
display_results()
# Testing the results
flights |>
count_prop(c(dest, origin)) |>
slice_head(n = 10)
# Testing the results
flights |>
count_prop(c(dest, origin)) |>
slice_head(n = 10) |> gt() |> gt_theme_538()
# Testing the results
flights |>
count_prop(c(dest, origin)) |>
slice_head(n = 10) |> gt() |> gt_theme_538() |> fmt_number(prop, decimals = 4)
