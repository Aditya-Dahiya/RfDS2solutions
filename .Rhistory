count(wt = is.na(dep_time)) |>
gt()
flights |>
group_by(month) |>
count(wt = is.na(dep_time))
flights |>
group_by(month) |>
count(wt = is.na(dep_time)) |>
ungroup() |>
gt()
#| layout-ncol: 2
flights |>
group_by(month) |>
summarise(total = n(),
missing = sum(is.na(dep_time))) |>
gt()
flights |>
group_by(month) |>
count(wt = is.na(dep_time)) |>
ungroup() |>
gt()
flights |>
group_by(dest) |>
summarise(n = n()) |>
arrange(desc(n))
flights |> count(dest, sort = TRUE)
flights |> count(tailnum, wt = distance)
flights |>
group_by(tailnum) |>
summarise(n = sum(distance)) |>
arrange(desc(n))
flights |>
group_by(tailnum) |>
summarise(n = sum(distance))
flights |> count(tailnum, wt = distance)
df2 |>
mutate(
score_delay = (mean_dep_delay - min(mean_dep_delay))/(max(mean_dep_delay) - min(mean_dep_delay)),
score_cancel = (prop_cancelled - min(prop_cancelled)) / (max(prop_cancelled) - min(prop_cancelled)),
score_at = (mean_air_time - min(mean_air_time)) / (max(mean_air_time) - min(mean_air_time)),
total_score = score_delay + score_cancel + score_at,
rank_carrier = min_rank(total_score)
) |>
gt() |>
fmt_number(columns = -c(rank_carrier, nos_of_flights)) |>
tab_spanner(label = "Scoring and Rank",
columns = score_delay:rank_carrier) |>
tab_spanner(label = "Statistics",
columns = mean_dep_delay:nos_of_flights) |>
opt_stylize(style = 1)
library(tidyverse)
library(gt)
library(nycflights13)
data("flights")
# Computing the destinations with atleast two carriers
df1 = flights |>
group_by(dest) |>
summarize(no_of_carriers = n_distinct(carrier)) |>
filter(no_of_carriers > 1)
# Extracting the names of these carriers as a vector to use in filtering
# the data in subsequent steps, as a vector called "dest2"
dest2 = df1 |>
select(dest) |>
as_vector() |>
unname()
# Displaying the table
df1 |>
arrange(desc(no_of_carriers)) |>
gt() |>
opt_interactive(page_size_default = 5)
# Ranking parameters can be based on: ---
# 1. Average Departure Delay
# 2. Proportion of flights cancelled
# 3. Average Delay in Air Time
# Note: I have not included arrival delay, as that will automatically
#       include the delay in the departure, and penalize the airline
#       twice for a departure delay.
df2 = flights |>
filter(dest %in% dest2) |>
group_by(dest, carrier) |>
summarise(
mean_dep_delay = mean(dep_delay, na.rm = TRUE),
prop_cancelled = mean(is.na(dep_time)),
mean_air_time  = mean(air_time, na.rm = TRUE),
nos_of_flights = n()
) |>
drop_na()
df2 |>
ungroup() |>
gt() |>
fmt_number(decimals = 2,
columns = -nos_of_flights)
# Ranking can be generated on basis of the least score calculated after
# giving equal weightage to the following in formula for each carrier as
# calculated by: (x - min(x)) / (max(x) - min(x))
# 1. Average Departure Delay
# 2. Proportion of flights cancelled
# 3. Average Delay in Air Time
df2 |>
mutate(
score_delay = (mean_dep_delay - min(mean_dep_delay))/(max(mean_dep_delay) - min(mean_dep_delay)),
score_cancel = (prop_cancelled - min(prop_cancelled)) / (max(prop_cancelled) - min(prop_cancelled)),
score_at = (mean_air_time - min(mean_air_time)) / (max(mean_air_time) - min(mean_air_time)),
total_score = score_delay + score_cancel + score_at,
rank_carrier = min_rank(total_score)
) |>
gt() |>
fmt_number(columns = -c(rank_carrier, nos_of_flights)) |>
tab_spanner(label = "Scoring and Rank",
columns = score_delay:rank_carrier) |>
tab_spanner(label = "Statistics",
columns = mean_dep_delay:nos_of_flights) |>
opt_stylize(style = 1)
# Ranking can be generated on basis of the least score calculated after
# giving equal weightage to the following in formula for each carrier as
# calculated by: (x - min(x)) / (max(x) - min(x))
# 1. Average Departure Delay
# 2. Proportion of flights cancelled
# 3. Average Delay in Air Time
df2 |>
mutate(
score_delay = (mean_dep_delay - min(mean_dep_delay))/(max(mean_dep_delay) - min(mean_dep_delay)),
score_cancel = (prop_cancelled - min(prop_cancelled)) / (max(prop_cancelled) - min(prop_cancelled)),
score_at = (mean_air_time - min(mean_air_time)) / (max(mean_air_time) - min(mean_air_time)),
total_score = score_delay + score_cancel + score_at,
rank_carrier = min_rank(total_score)
) |>
gt() |>
fmt_number(columns = -c(rank_carrier, nos_of_flights)) |>
tab_spanner(label = "Scoring and Rank",
columns = score_delay:rank_carrier) |>
tab_spanner(label = "Statistics",
columns = mean_dep_delay:nos_of_flights) |>
opt_stylize(style = 2)
# Ranking can be generated on basis of the least score calculated after
# giving equal weightage to the following in formula for each carrier as
# calculated by: (x - min(x)) / (max(x) - min(x))
# 1. Average Departure Delay
# 2. Proportion of flights cancelled
# 3. Average Delay in Air Time
df2 |>
mutate(
score_delay = (mean_dep_delay - min(mean_dep_delay))/(max(mean_dep_delay) - min(mean_dep_delay)),
score_cancel = (prop_cancelled - min(prop_cancelled)) / (max(prop_cancelled) - min(prop_cancelled)),
score_at = (mean_air_time - min(mean_air_time)) / (max(mean_air_time) - min(mean_air_time)),
total_score = score_delay + score_cancel + score_at,
rank_carrier = min_rank(total_score)
) |>
gt() |>
fmt_number(columns = -c(rank_carrier, nos_of_flights)) |>
tab_spanner(label = "Scoring and Rank",
columns = score_delay:rank_carrier) |>
tab_spanner(label = "Statistics",
columns = mean_dep_delay:nos_of_flights) |>
opt_stylize(style = 3)
# Ranking can be generated on basis of the least score calculated after
# giving equal weightage to the following in formula for each carrier as
# calculated by: (x - min(x)) / (max(x) - min(x))
# 1. Average Departure Delay
# 2. Proportion of flights cancelled
# 3. Average Delay in Air Time
df2 |>
mutate(
score_delay = (mean_dep_delay - min(mean_dep_delay))/(max(mean_dep_delay) - min(mean_dep_delay)),
score_cancel = (prop_cancelled - min(prop_cancelled)) / (max(prop_cancelled) - min(prop_cancelled)),
score_at = (mean_air_time - min(mean_air_time)) / (max(mean_air_time) - min(mean_air_time)),
total_score = score_delay + score_cancel + score_at,
rank_carrier = min_rank(total_score)
) |>
gt() |>
fmt_number(columns = -c(rank_carrier, nos_of_flights)) |>
tab_spanner(label = "Scoring and Rank",
columns = score_delay:rank_carrier) |>
tab_spanner(label = "Statistics",
columns = mean_dep_delay:nos_of_flights) |>
opt_stylize(style = 1)
df3 = df2 |>
mutate(
score_delay = (mean_dep_delay - min(mean_dep_delay))/(max(mean_dep_delay) - min(mean_dep_delay)),
score_cancel = (prop_cancelled - min(prop_cancelled)) / (max(prop_cancelled) - min(prop_cancelled)),
score_at = (mean_air_time - min(mean_air_time)) / (max(mean_air_time) - min(mean_air_time)),
total_score = score_delay + score_cancel + score_at,
rank_carrier = min_rank(total_score)
)
# Displaying an example ranking for ATL and AUS
df3 |>
filter(dest %in% c("ATL", "AUS")) |>
gt() |>
fmt_number(columns = -c(rank_carrier, nos_of_flights)) |>
tab_spanner(label = "Scoring and Rank",
columns = score_delay:rank_carrier) |>
tab_spanner(label = "Statistics",
columns = mean_dep_delay:nos_of_flights) |>
opt_stylize(style = 1)
df3
df3 |>
select(dest, carrier, rank_carrier)
df3 |>
select(dest, carrier, rank_carrier) |>
pivot_wider(names_from = rank_carrier,
values_from = carrier)
df3 |>
arrange(rank_carrier)
df3 |>
group_by(dest) |>
arrange(rank_carrier)
df3
df3 |>
arrange(dest, rank_carrier)
df3 |>
arrange(dest, rank_carrier) |>
select(dest, carrier, rank_carrier)
df3 |>
arrange(dest, rank_carrier) |>
select(dest, carrier, rank_carrier) |>
mutate(rank_carrier = paste0("Rank ", rank_carrier))
df3 |>
arrange(dest, rank_carrier) |>
select(dest, carrier, rank_carrier) |>
mutate(rank_carrier = paste0("Rank ", rank_carrier)) |>
pivot_wider(names_from = rank_carrier,
values_from = carrier)
df3 |>
filter(dest == "BGR")
# Ranking can be generated on basis of the least score calculated after
# giving equal weightage to the following in formula for each carrier as
# calculated by: (x - min(x)) / (max(x) - min(x))
# 1. Average Departure Delay
# 2. Proportion of flights cancelled
# 3. Average Delay in Air Time
df3 = df2 |>
mutate(
score_delay = (mean_dep_delay - min(mean_dep_delay))/(max(mean_dep_delay) - min(mean_dep_delay)),
score_cancel = (prop_cancelled - min(prop_cancelled)) / (max(prop_cancelled) - min(prop_cancelled)),
score_at = (mean_air_time - min(mean_air_time)) / (max(mean_air_time) - min(mean_air_time)),
total_score = score_delay + score_cancel + score_at,
rank_carrier = min_rank(total_score)
) |>
drop_na()
# Displaying an example ranking for ATL and AUS
df3 |>
filter(dest %in% c("ATL", "AUS")) |>
gt() |>
fmt_number(columns = -c(rank_carrier, nos_of_flights)) |>
tab_spanner(label = "Scoring and Rank",
columns = score_delay:rank_carrier) |>
tab_spanner(label = "Statistics",
columns = mean_dep_delay:nos_of_flights) |>
opt_stylize(style = 1)
df3 |>
filter(dest == "BGR")
df3 |>
arrange(dest, rank_carrier) |>
select(dest, carrier, rank_carrier) |>
mutate(rank_carrier = paste0("Rank ", rank_carrier)) |>
pivot_wider(names_from = rank_carrier,
values_from = carrier)
df3 |>
arrange(dest, rank_carrier) |>
select(dest, carrier, rank_carrier) |>
mutate(rank_carrier = paste0("Rank ", rank_carrier)) |>
pivot_wider(names_from = rank_carrier,
values_from = carrier) |>
column_to_rownames(var = "dest") |>
gt()
df3 |>
arrange(dest, rank_carrier) |>
select(dest, carrier, rank_carrier) |>
mutate(rank_carrier = paste0("Rank ", rank_carrier)) |>
pivot_wider(names_from = rank_carrier,
values_from = carrier) |>
column_to_rownames(var = "dest")
df3 |>
arrange(dest, rank_carrier) |>
select(dest, carrier, rank_carrier) |>
mutate(rank_carrier = paste0("Rank ", rank_carrier)) |>
pivot_wider(names_from = rank_carrier,
values_from = carrier) |>
column_to_rownames(var = "dest") |>
gt(rowname_col = "dest")
df3 |>
arrange(dest, rank_carrier) |>
select(dest, carrier, rank_carrier) |>
mutate(rank_carrier = paste0("Rank ", rank_carrier)) |>
pivot_wider(names_from = rank_carrier,
values_from = carrier) |>
column_to_rownames(var = "dest") |>
gt() |>
tab_stubhead(label = "Destination")
df3 |>
arrange(dest, rank_carrier) |>
select(dest, carrier, rank_carrier) |>
mutate(rank_carrier = paste0("Rank ", rank_carrier)) |>
pivot_wider(names_from = rank_carrier,
values_from = carrier) |>
# column_to_rownames(var = "dest") |>
gt() |>
tab_stubhead(label = "Destination")
df3 |>
arrange(dest, rank_carrier) |>
select(dest, carrier, rank_carrier) |>
mutate(rank_carrier = paste0("Rank ", rank_carrier)) |>
ungroup() |>
pivot_wider(names_from = rank_carrier,
values_from = carrier)
df3 |>
arrange(dest, rank_carrier) |>
select(dest, carrier, rank_carrier) |>
mutate(rank_carrier = paste0("Rank ", rank_carrier)) |>
ungroup() |>
pivot_wider(names_from = rank_carrier,
values_from = carrier) |>
column_to_rownames(var = "dest") |>
gt() |>
tab_stubhead(label = "Destination")
df3 |>
arrange(dest, rank_carrier) |>
select(dest, carrier, rank_carrier) |>
mutate(rank_carrier = paste0("Rank ", rank_carrier)) |>
ungroup() |>
pivot_wider(names_from = rank_carrier,
values_from = carrier) |>
gt() |>
tab_stubhead(label = "Destination")
df3 |>
arrange(dest, rank_carrier) |>
select(dest, carrier, rank_carrier) |>
mutate(rank_carrier = paste0("Rank ", rank_carrier)) |>
ungroup() |>
pivot_wider(names_from = rank_carrier,
values_from = carrier) |>
gt() |>
cols_label(dest = "Destination")
df3 |>
arrange(dest, rank_carrier) |>
select(dest, carrier, rank_carrier) |>
mutate(rank_carrier = paste0("Rank ", rank_carrier)) |>
ungroup() |>
pivot_wider(names_from = rank_carrier,
values_from = carrier) |>
gt() |>
cols_label(dest = "Destination") |>
sub_missing(missing_text = "")
df3 |>
arrange(dest, rank_carrier) |>
select(dest, carrier, rank_carrier) |>
mutate(rank_carrier = paste0("Rank ", rank_carrier)) |>
ungroup() |>
pivot_wider(names_from = rank_carrier,
values_from = carrier) |>
t()
df3 |>
arrange(dest, rank_carrier) |>
select(dest, carrier, rank_carrier) |>
mutate(rank_carrier = paste0("Rank ", rank_carrier)) |>
ungroup() |>
pivot_wider(names_from = rank_carrier,
values_from = carrier) |>
t() |>
gt() |>
cols_label(dest = "Destination") |>
sub_missing(missing_text = "")
df3 |>
arrange(dest, rank_carrier) |>
select(dest, carrier, rank_carrier) |>
mutate(rank_carrier = paste0("Rank ", rank_carrier)) |>
ungroup() |>
pivot_wider(names_from = rank_carrier,
values_from = carrier) |>
t() |>
gt() |>
#cols_label(dest = "Destination") |>
sub_missing(missing_text = "")
df3 |>
arrange(dest, rank_carrier) |>
select(dest, carrier, rank_carrier) |>
mutate(rank_carrier = paste0("Rank ", rank_carrier)) |>
ungroup() |>
pivot_wider(names_from = rank_carrier,
values_from = carrier) |>
t() |>
as_tibble()
df3 |>
arrange(dest, rank_carrier) |>
select(dest, carrier, rank_carrier) |>
mutate(rank_carrier = paste0("Rank ", rank_carrier)) |>
ungroup() |>
pivot_wider(names_from = rank_carrier,
values_from = carrier) |>
t() |>
as_tibble() |>
janitor::row_to_names(row_number = 1)
gt() |>
sub_missing(missing_text = "")
df3 |>
arrange(dest, rank_carrier) |>
select(dest, carrier, rank_carrier) |>
mutate(rank_carrier = paste0("Rank ", rank_carrier)) |>
ungroup() |>
pivot_wider(names_from = rank_carrier,
values_from = carrier) |>
t() |>
as_tibble() |>
janitor::row_to_names(row_number = 1) |>
gt() |>
sub_missing(missing_text = "")
df3 |>
arrange(dest, rank_carrier) |>
select(dest, carrier, rank_carrier) |>
mutate(rank_carrier = paste0("Rank ", rank_carrier)) |>
ungroup() |>
pivot_wider(names_from = rank_carrier,
values_from = carrier) |>
t() |>
as_tibble() |>
janitor::row_to_names(row_number = 1) |>
gt() |>
sub_missing(missing_text = "") |>
gtExtras::gt_theme_538()
df3 |>
arrange(dest, rank_carrier) |>
select(dest, carrier, rank_carrier) |>
mutate(rank_carrier = paste0("Rank ", rank_carrier)) |>
ungroup() |>
pivot_wider(names_from = rank_carrier,
values_from = carrier) |>
t() |>
as_tibble() |>
janitor::row_to_names(row_number = 1)
df3 |>
arrange(dest, rank_carrier) |>
select(dest, carrier, rank_carrier) |>
ungroup() |>
pivot_wider(names_from = rank_carrier,
values_from = carrier) |>
t() |>
as_tibble() |>
janitor::row_to_names(row_number = 1) |>
gt() |>
sub_missing(missing_text = "") |>
gtExtras::gt_theme_538()
df3 |>
arrange(dest, rank_carrier) |>
select(dest, carrier, rank_carrier) |>
ungroup() |>
pivot_wider(names_from = rank_carrier,
values_from = carrier)
library(tidyverse)
library(gt)
library(nycflights13)
data("flights")
# Computing the destinations with atleast two carriers
df1 = flights |>
group_by(dest) |>
summarize(no_of_carriers = n_distinct(carrier)) |>
filter(no_of_carriers > 1)
# Extracting the names of these carriers as a vector to use in filtering
# the data in subsequent steps, as a vector called "dest2"
dest2 = df1 |>
select(dest) |>
as_vector() |>
unname()
# Displaying the table
df1 |>
arrange(desc(no_of_carriers)) |>
gt() |>
opt_interactive(page_size_default = 5)
flights |>
group_by(dest) |>
summarize(no_of_carriers = n_distinct(carrier)) |>
filter(no_of_carriers > 1)
flights |>
filter(dest %in% dest2) |>
group_by(dest, carrier) |>
summarise(
mean_dep_delay = mean(dep_delay, na.rm = TRUE),
prop_cancelled = mean(is.na(dep_time)),
mean_air_time  = mean(air_time, na.rm = TRUE),
nos_of_flights = n()
) |>
drop_na()
#| label: tbl-q8b-ex5
#| tbl-cap: "Displaying the comparison parameters for each carrier at each destination"
#| code-fold: true
# Ranking parameters can be based on: ---
# 1. Average Departure Delay
# 2. Proportion of flights cancelled
# 3. Average Delay in Air Time
# Note: I have not included arrival delay, as that will automatically
#       include the delay in the departure, and penalize the airline
#       twice for a departure delay.
df2 = flights |>
filter(dest %in% dest2) |>
group_by(dest, carrier) |>
summarise(
mean_dep_delay = mean(dep_delay, na.rm = TRUE),
prop_cancelled = mean(is.na(dep_time)),
mean_air_time  = mean(air_time, na.rm = TRUE),
nos_of_flights = n()
) |>
drop_na()
df2 |>
ungroup() |>
gt() |>
fmt_number(decimals = 2,
columns = -nos_of_flights)
df2 |>
ungroup() |>
gt() |>
fmt_number(decimals = 2,
columns = -nos_of_flights) |>
opt_interactive()
