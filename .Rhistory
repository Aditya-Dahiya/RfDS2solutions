df_row <- tibble(json = json_row)
# Rectangling df_col
df_col
# Rectangling df_col
df_col |>
unnest_wider(json)
# Rectangling df_col
df_col |>
unnest_wider(json) |>
unnest_longer(x, y)
df_col |>
unnest_wider(json)
# Rectangling df_col
df_col |>
unnest_wider(json) |>
unnest_longer(c(x, y))
# Rectangling df_col
df_col |>
unnest_wider(json) |>
unnest_longer(c(x))
# Rectangling df_col
df_col |>
unnest_wider(json) |>
unnest_longer(c(x)) |>
unnest_longer(y)
# Rectangling df_col
df_col |>
unnest_wider(json) |>
unnest_longer(c(x, 7))
# Rectangling df_col
df_col |>
unnest_wider(json) |>
unnest_longer(c(x, y))
# Reactangling df_row
df_row
df_row <- tibble(json = json_row)
# Reactangling df_row
df_row
df_row <- tibble(json = json_row)
json_col <- parse_json('
{
"x": ["a", "x", "z"],
"y": [10, null, 3]
}
')
json_row <- parse_json('
[
{"x": "a", "y": 10},
{"x": "x", "y": null},
{"x": "z", "y": 3}
]
')
df_col <- tibble(json = list(json_col))
df_row <- tibble(json = json_row)
# Rectangling df_col
df_col |>
unnest_wider(json) |>
unnest_longer(c(x, y))
# Reactangling df_row
df_row
# Reactangling df_row
df_row |>
unnest_wider()
# Reactangling df_row
df_row |>
unnest_wider(json)
# Reactangling df_row
df_row |>
unnest_wider(json)
json_data <-
{
"created": 1495709734,
json_data <-
{
"created": 1495709734,
# Load libraries
library(tidyverse)
library(rvest)
url <- "https://en.wikipedia.org/wiki/List_of_fighter_aircraft"
url_html <- read_html(url)
read_html |>
html_elements("#mw-content-text , td, .headerSort")
read_html |>
html_element("table") |>
html_table()
read_html(url_html) |>
html_element("table") |>
html_table()
url_html |>
html_element("table") |>
html_table()
url_html |>
html_element("table") |>
html_table() |>
rename(
numbers = `No.`,
year = Date
) |>
janitor::clean_names()
url_html |>
html_element("table") |>
html_table() |>
rename(
numbers = `No.`,
year = Date
) |>
janitor::clean_names() |>
mutate(
numbers = parse_number(numbers),
class = str_replace_all(class, '"', '')
)
url_html |>
html_element("table") |>
html_table() |>
rename(
numbers = `No.`,
year = Date
) |>
janitor::clean_names() |>
mutate(
numbers = parse_number(numbers),
class = str_replace_all(class, "\"", "")
)
url_html |>
html_element("table") |>
html_table() |>
rename(
numbers = `No.`,
year = Date
) |>
janitor::clean_names() |>
mutate(
numbers = parse_number(numbers),
class = str_replace_all(class, "\"", NULL)
)
rlang::last_trace()
?str_replace_all
"\""
str_c("\"")
str_view("\"")
url_html |>
html_element("table") |>
html_table() |>
rename(
numbers = `No.`,
year = Date
) |>
janitor::clean_names() |>
mutate(
numbers = parse_number(numbers),
class = str_replace_all(class,
pattern = "\"", )
) |>
distinct(class)
url_html |>
html_element("table") |>
html_table() |>
rename(
numbers = `No.`,
year = Date
) |>
janitor::clean_names() |>
mutate(
numbers = parse_number(numbers),
class = str_replace_all(class,
pattern = "\"",
replacement = "")
) |>
distinct(class)
url_html |>
html_element("table") |>
html_table() |>
rename(
numbers = `No.`,
year = Date
) |>
janitor::clean_names() |>
mutate(
numbers = parse_number(numbers),
class = str_replace_all(class,
pattern = "\"",
replacement = "")
) |>
distinct(class) |>
as_vector()
url_html |>
html_element("table") |>
html_table() |>
rename(
numbers = `No.`,
year = Date
) |>
janitor::clean_names() |>
mutate(
numbers = parse_number(numbers),
class = str_replace_all(class,
pattern = "\"",
replacement = "")
) |>
distinct(class) |>
as_vector() |>
str_view()
url_html |>
html_element("table") |>
html_table() |>
rename(
numbers = `No.`,
year = Date
) |>
janitor::clean_names() |>
mutate(
numbers = parse_number(numbers),
class = str_replace_all(class,
pattern = "\"",
replacement = "")
)
url_html |>
html_element("table") |>
html_table() |>
rename(
numbers = `No.`,
year = Date
) |>
janitor::clean_names() |>
mutate(
numbers = parse_number(numbers),
class = str_replace_all(class,
pattern = "\"",
replacement = "")
) |>
arrange(desc(numbers))
url_html |>
html_element("table") |>
html_table() |>
rename(
numbers = `No.`,
year = Date
) |>
janitor::clean_names() |>
mutate(
numbers = parse_number(numbers),
class = str_replace_all(class,
pattern = "\"",
replacement = "")
) |>
distinct(country)
?count
url_html |>
html_element("table") |>
html_table() |>
rename(
numbers = `No.`,
year = Date
) |>
janitor::clean_names() |>
mutate(
numbers = parse_number(numbers),
class = str_replace_all(class,
pattern = "\"",
replacement = "")
) |>
group_by(country) |>
count(wt = numbers)
url_html |>
html_element("table") |>
html_table() |>
rename(
numbers = `No.`,
year = Date
) |>
janitor::clean_names() |>
mutate(
numbers = parse_number(numbers),
class = str_replace_all(class,
pattern = "\"",
replacement = "")
) |>
group_by(country) |>
count(wt = numbers) |>
arrange(desc(n))
udf <- rl_html |>
html_element("table") |>
html_table() |>
rename(
numbers = `No.`,
year = Date
) |>
janitor::clean_names() |>
mutate(
numbers = parse_number(numbers),
class = str_replace_all(class,
pattern = "\"",
replacement = "")
)
df <- rl_html |>
html_element("table") |>
html_table() |>
rename(
numbers = `No.`,
year = Date
) |>
janitor::clean_names() |>
mutate(
numbers = parse_number(numbers),
class = str_replace_all(class,
pattern = "\"",
replacement = "")
)
df
df <- rl_html |>
html_element("table") |>
html_table() |>
rename(
numbers = `No.`,
year = Date
) |>
janitor::clean_names() |>
mutate(
numbers = parse_number(numbers),
class = str_replace_all(class,
pattern = "\"",
replacement = "")
)
df <- url_html |>
html_element("table") |>
html_table() |>
rename(
numbers = `No.`,
year = Date
) |>
janitor::clean_names() |>
mutate(
numbers = parse_number(numbers),
class = str_replace_all(class,
pattern = "\"",
replacement = "")
)
df
df |>
distinct(status)
df |>
distinct(country, status)
df |>
group_by(country, status)
df |>
group_by(country, status) |>
summarize(
total_aircrafts = sum(numbers),
total_types = n_distinct(type)
)
df |>
group_by(country, status) |>
summarize(
total_aircrafts = sum(numbers),
total_types = n_distinct(type)
) |>
ungroup()
# Select the top 10 countries to compare
df |>
group_by(country) |>
count(wt = numbers)
# Select the top 10 countries to compare
df |>
group_by(country) |>
count(wt = numbers) |>
arrange(desc(n))
# Select the top 10 countries to compare
df |>
group_by(country) |>
count(wt = numbers) |>
arrange(desc(n)) |>
print(n = 20)
# Select the top 10 countries to compare
df |>
group_by(country) |>
count(wt = numbers) |>
arrange(desc(n)) |>
print(n = 40)
# Select the top 10 countries to compare
df |>
group_by(country) |>
count(wt = numbers) |>
arrange(desc(n)) |>
slice_head(n = 30)
df |>
group_by(country) |>
count(wt = numbers) |>
arrange(desc(n))
slice_head()
?slice_max
# Select the top 10 countries to compare
df |>
group_by(country) |>
count(wt = numbers) |>
arrange(desc(n)) |>
slice_max(order_by = n, n = 30)
# Select the top 10 countries to compare
df |>
group_by(country) |>
count(wt = numbers) |>
ungroup() |>
arrange(desc(n)) |>
slice_max(order_by = n, n = 30)
# Select the top 10 countries to compare
df |>
group_by(country) |>
count(wt = numbers) |>
ungroup() |>
slice_max(order_by = n, n = 30)
# Select the top 10 countries to compare
df |>
group_by(country) |>
count(wt = numbers) |>
ungroup() |>
slice_max(order_by = n, n = 30) |>
select(country) |>
as_vector() |>
unname()
df |>
group_by(country) |>
count(wt = numbers) |>
ungroup()
# Select the top 10 countries to compare
top_countries = df |>
group_by(country) |>
count(wt = numbers) |>
ungroup() |>
slice_max(order_by = n, n = 20) |>
select(country) |>
as_vector() |>
unname()
df |>
group_by(country, status) |>
summarize(
total_aircrafts = sum(numbers),
total_types = n_distinct(type)
) |>
ungroup()
df
df |>
mutate(country = fct(country)) |>
group_by(country) |>
count(wt = number)
df |>
mutate(country = fct(country)) |>
group_by(country) |>
count(wt = numbers)
df |>
mutate(country = fct(country)) |>
group_by(country) |>
count(wt = numbers) |>
mutate(country = fct_lump_prop(country, 0.05, w = n))
?fct_lump_prop
fct_lump_prop(df$country, 0.05, w = n)
fct_lump_prop(df$country, 0.05, w = df$n)
df |>
mutate(country = fct(country)) |>
group_by(country) |>
count(wt = numbers) |>
mutate(country = fct_lump_prop(df$country, 0.05, w = df$n))
df |>
mutate(country = fct(country)) |>
group_by(country) |>
count(wt = numbers) |>
mutate(country = fct_lump_n(country, 10, w = n))
df |>
mutate(country = fct(country)) |>
group_by(country) |>
count(wt = numbers)
df |>
mutate(
country = fct(country),
prop = n/sum(n)
) |>
group_by(country) |>
count(wt = numbers) |>
group_by(country, status) |>
summarize(
total_aircrafts = sum(numbers),
total_types = n_distinct(type)
) |>
ungroup()
df |>
mutate(
country = fct(country),
prop = n/sum(n)
) |>
group_by(country) |>
count(wt = numbers)
df
df |>
mutate(
country = fct(country)
) |>
group_by(country) |>
count(wt = numbers) |>
mutate(prop = n/sum(n))
df |>
mutate(
country = fct(country)
) |>
group_by(country) |>
count(wt = numbers) |>
arrange(desc(n))
df |>
mutate(
country = fct(country)
) |>
group_by(country) |>
count(wt = numbers) |>
slice_max(order_by = n, n = 6)
?slice_max
