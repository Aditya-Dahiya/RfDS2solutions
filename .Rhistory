filter(number_of_carriers > 1)
#| eval: false
#| output: false
# Displaying tail numbers which have been used by more than one carriers
flights |>
group_by(tailnum) |>
summarise(number_of_carriers = n_distinct(carrier)) |>
filter(number_of_carriers > 1) |>
arrange(desc(number_of_carriers))
#| eval: false
#| output: false
# Displaying tail numbers which have been used by more than one carriers
flights |>
group_by(tailnum) |>
summarise(number_of_carriers = n_distinct(carrier)) |>
filter(number_of_carriers > 1) |>
drop_na()
?gt()
#| eval: false
#| output: false
# Displaying tail numbers which have been used by more than one carriers
flights |>
group_by(tailnum) |>
summarise(number_of_carriers = n_distinct(carrier)) |>
filter(number_of_carriers > 1) |>
drop_na() |>
gt() |>
opt_interactive()
?opt_interactive
#| eval: false
#| output: false
# Displaying tail numbers which have been used by more than one carriers
flights |>
group_by(tailnum) |>
summarise(number_of_carriers = n_distinct(carrier)) |>
filter(number_of_carriers > 1) |>
drop_na() |>
gt() |>
opt_interactive(page_size_default = 5)
?opt_interactive
#| eval: false
#| output: false
# Displaying tail numbers which have been used by more than one carriers
flights |>
group_by(tailnum) |>
summarise(number_of_carriers = n_distinct(carrier)) |>
filter(number_of_carriers > 1) |>
drop_na() |>
gt() |>
opt_interactive(page_size_default = 5,
use_highlight = TRUE,
pagination_type = "simple")
#| eval: false
#| output: false
# Displaying tail numbers which have been used by more than one carriers
flights |>
group_by(tailnum) |>
summarise(number_of_carriers = n_distinct(carrier)) |>
filter(number_of_carriers > 1) |>
drop_na() |>
gt() |>
opt_interactive(page_size_default = 5,
use_highlight = TRUE,
pagination_type = "simple") |>
cols_label_with(fn = ~ janitor::make_clean_names(., case = "title"))
flights |>
group_by(tailnum) |>
summarise(
carrier_name = distinct(carrier)
)
flights |>
filter(tailnum == "N146PQ")
flights |>
filter(tailnum == "N146PQ") |>
distinct(carrier)
flights |>
group_by(tailnum) |>
distinct(carrier)
flights |>
group_by(tailnum) |>
distinct(carrier)
flights |>
group_by(tailnum) |>
distinct(carrier) |>
arrange(tailnum)
flights |>
group_by(tailnum) |>
distinct(carrier) |>
arrange(tailnum) |>
count(carrier)
flights |>
group_by(tailnum) |>
distinct(carrier) |>
arrange(tailnum) |>
count(carrier) |>
arrange(n, tailnum)
flights |>
group_by(tailnum) |>
distinct(carrier) |>
arrange(tailnum) |>
count(carrier) |>
arrange(desc(n), tailnum)
flights |>
group_by(tailnum) |>
distinct(carrier) |>
count(carrier) |>
arrange(desc(n), tailnum)
flights |>
group_by(tailnum) |>
distinct(carrier) |>
count(carrier) |>
arrange(desc(n))
flights |>
group_by(tailnum) |>
distinct(carrier) |>
count(carrier) |>
arrange(n)
flights |>
group_by(tailnum) |>
distinct(carrier) |>
count(tailnum)
flights |>
group_by(tailnum) |>
distinct(carrier)
flights |>
group_by(tailnum) |>
distinct(carrier)
summarise(carriers = paste0(carrier, collapse = ", "))
flights |>
group_by(tailnum) |>
distinct(carrier) |>
summarise(carriers = paste0(carrier, collapse = ", "))
flights |>
group_by(tailnum) |>
distinct(carrier) |>
summarise(carriers = paste0(carrier, collapse = ", ")) |>
arrange(str_length(carriers))
flights |>
group_by(tailnum) |>
distinct(carrier) |>
summarise(carriers = paste0(carrier, collapse = ", ")) |>
arrange(desc(str_length(carriers)))
# A tibble that lists all carriers a tailnum has flown
all_carrs = flights |>
group_by(tailnum) |>
distinct(carrier) |>
summarise(carriers = paste0(carrier, collapse = ", ")) |>
arrange(desc(str_length(carriers)))
slice_head(all_cars) |>
gt() |> gt_theme_538()
slice_head(all_carrs) |>
gt() |> gt_theme_538()
slice_head(all_carrs, n= 10) |>
gt() |> gt_theme_538()
slice_head(all_carrs, n= 30) |>
gt() |> opt_interactive(page_size_default = 5)
# Merge with planes
planes |>
left_join(all_carrs)
flights |>
filter(month == 6 & day == 13)
# Loading required datasets and libraries
library(tidyverse)
library(gt)
library(gtExtras)
library(nycflights13)
library(janitor)
data("flights")
data("weather")
data("airports")
flights |>
filter(month == 6 & day == 13)
flights |>
filter(month == 6 & day == 13) |>
# Compute average delay for each location
group_by(dest) |>
summarise(avg_delay = mean(arr_delay, na.rm = TRUE))
flights |>
filter(month == 6 & day == 13) |>
# Compute average delay for each location
group_by(dest) |>
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) |>
# Add the latitude and longitude data
left_join(airports, join_by(dest == faa)) |>
select(-c(alt, tz, dst, tzone))
# Start with the flights data-set for June 13, 2013
flights |>
filter(month == 6 & day == 13) |>
# Compute average delay for each location
group_by(dest) |>
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) |>
# Add the latitude and longitude data
left_join(airports, join_by(dest == faa)) |>
select(-c(alt, tz, dst, tzone)) |>
# Plot the map and points
ggplot(aes(x = lon, y = lat,
col = avg_delay,
label = name)) +
borders("state", colour = "white", fill = "lightgrey") +
geom_point() +
coord_quickmap(xlim = c(-130, -65),
ylim = c(23, 50)) +
scale_color_viridis_c(option = "C") +
labs(col = "Average Delay at Arrival (mins.)", shape = "") +
# Themes and Customization
theme_void() +
theme(legend.position = "bottom")
# Start with the flights data-set for June 13, 2013
flights |>
filter(month == 6 & day == 13) |>
# Compute average delay for each location
group_by(dest) |>
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) |>
# Add the latitude and longitude data
left_join(airports, join_by(dest == faa)) |>
select(-c(alt, tz, dst, tzone)) |>
# Plot the map and points
ggplot(aes(x = lon, y = lat,
col = avg_delay,
label = name)) +
borders("state", colour = "white", fill = "lightgrey") +
geom_point() +
coord_quickmap(xlim = c(-130, -65),
ylim = c(23, 50)) +
scale_color_viridis_c(option = "C") +
labs(col = "Average Delay at Arrival (mins.)", shape = "") +
# Themes and Customization
theme_void() +
theme(legend.position = "bottom") |>
plotly::ggplotly()
# Start with the flights data-set for June 13, 2013
flights |>
filter(month == 6 & day == 13) |>
# Compute average delay for each location
group_by(dest) |>
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) |>
# Add the latitude and longitude data
left_join(airports, join_by(dest == faa)) |>
select(-c(alt, tz, dst, tzone)) |>
# Plot the map and points
ggplot(aes(x = lon, y = lat,
col = avg_delay,
label = name,
size = avg_delay)) +
borders("state", colour = "white", fill = "lightgrey") +
geom_point() +
coord_quickmap(xlim = c(-130, -65),
ylim = c(23, 50)) +
scale_color_viridis_c(option = "C") +
labs(col = "Average Delay at Arrival (mins.)", shape = "",
title = "Flight delays on June 13, 2013") +
# Themes and Customization
theme_void() +
theme(legend.position = "bottom")
# Start with the flights data-set
flights |>
# Compute average delay for each location
group_by(dest) |>
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) |>
# Add the latitude and longitude data
left_join(airports, join_by(dest == faa)) |>
select(-c(alt, tz, dst, tzone)) |>
mutate(type = "Destinations") |>
# Add a row for origin airports data
bind_rows(or_apts) |>
# Plot the map and points
ggplot(aes(x = lon, y = lat,
col = avg_delay,
shape = type,
label = name,
size  = avg_delay)) +
borders("state", colour = "white", fill = "lightgrey") +
geom_point() +
coord_quickmap(xlim = c(-130, -65),
ylim = c(23, 50)) +
scale_color_viridis_c(option = "C") +
labs(col = "Average Delay at Arrival (mins.)", shape = "") +
# Themes and Customization
theme_void() +
theme(legend.position = "bottom")
#| label: fig-map-q7-ex3
#| fig-asp: 1
#| fig-cap: "Airport destinations from New York City, with average arrival delays"
# Create a dataframe of 1 row for origin airports
or_apts = airports |>
filter(faa %in% c("EWR", "JFK", "LGA")) |>
select(-c(alt, tz, dst, tzone)) |>
rename(dest = faa) |>
mutate(type = "New York City",
avg_delay = 0)
# Start with the flights data-set
flights |>
# Compute average delay for each location
group_by(dest) |>
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) |>
# Add the latitude and longitude data
left_join(airports, join_by(dest == faa)) |>
select(-c(alt, tz, dst, tzone)) |>
mutate(type = "Destinations") |>
# Add a row for origin airports data
bind_rows(or_apts) |>
# Plot the map and points
ggplot(aes(x = lon, y = lat,
col = avg_delay,
shape = type,
label = name,
size  = avg_delay)) +
borders("state", colour = "white", fill = "lightgrey") +
geom_point() +
coord_quickmap(xlim = c(-130, -65),
ylim = c(23, 50)) +
scale_color_viridis_c(option = "C") +
labs(col = "Average Delay at Arrival (mins.)", shape = "") +
# Themes and Customization
theme_void() +
theme(legend.position = "bottom")
# Start with the flights data-set
flights |>
# Compute average delay for each location
group_by(dest) |>
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) |>
# Add the latitude and longitude data
left_join(airports, join_by(dest == faa)) |>
select(-c(alt, tz, dst, tzone)) |>
mutate(type = "Destinations") |>
# Add a row for origin airports data
bind_rows(or_apts) |>
# Plot the map and points
ggplot(aes(x = lon, y = lat,
col = avg_delay,
shape = type,
label = name)) +
borders("state", colour = "white", fill = "lightgrey") +
geom_point() +
coord_quickmap(xlim = c(-130, -65),
ylim = c(23, 50)) +
scale_color_viridis_c(option = "C") +
labs(col = "Average Delay at Arrival (mins.)", shape = "") +
# Themes and Customization
theme_void() +
theme(legend.position = "bottom")
# Start with the flights data-set
flights |>
# Compute average delay for each location
group_by(dest) |>
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) |>
# Add the latitude and longitude data
left_join(airports, join_by(dest == faa)) |>
select(-c(alt, tz, dst, tzone)) |>
mutate(type = "Destinations") |>
# Add a row for origin airports data
bind_rows(or_apts) |>
# Plot the map and points
ggplot(aes(x = lon, y = lat,
col = avg_delay,
shape = type,
label = name)) +
borders("state", colour = "white", fill = "lightgrey") +
geom_point(size = 2) +
coord_quickmap(xlim = c(-130, -65),
ylim = c(23, 50)) +
scale_color_viridis_c(option = "C") +
labs(col = "Average Delay at Arrival (mins.)", shape = "") +
# Themes and Customization
theme_void() +
theme(legend.position = "bottom")
# Start with the flights data-set for June 13, 2013
flights |>
filter(month == 6 & day == 13) |>
# Compute average delay for each location
group_by(dest) |>
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) |>
# Add the latitude and longitude data
left_join(airports, join_by(dest == faa)) |>
select(-c(alt, tz, dst, tzone)) |>
# Plot the map and points
ggplot(aes(x = lon, y = lat,
col = avg_delay,
label = name)) +
borders("state", colour = "white", fill = "lightgrey") +
geom_point() +
coord_quickmap(xlim = c(-130, -65),
ylim = c(23, 50)) +
scale_color_viridis_c(option = "C") +
labs(col = "Average Delay at Arrival (mins.)", shape = "",
title = "Flight delays on June 13, 2013") +
# Themes and Customization
theme_void() +
theme(legend.position = "bottom")
# Start with the flights data-set for June 13, 2013
flights |>
filter(month == 6 & day == 13) |>
# Compute average delay for each location
group_by(dest) |>
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) |>
# Add the latitude and longitude data
left_join(airports, join_by(dest == faa)) |>
select(-c(alt, tz, dst, tzone)) |>
# Plot the map and points
ggplot(aes(x = lon, y = lat,
col = avg_delay,
label = name)) +
borders("state", colour = "white", fill = "lightgrey") +
geom_point(size = 3) +
coord_quickmap(xlim = c(-130, -65),
ylim = c(23, 50)) +
scale_color_viridis_c(option = "C") +
labs(col = "Average Delay at Arrival (mins.)", shape = "",
title = "Flight delays on June 13, 2013") +
# Themes and Customization
theme_void() +
theme(legend.position = "bottom")
?scale_color_continuous
flights |>
mutate(june_13_2013 = (month == 6 & day == 13)) |>
group_by(june_13_2013) |>
summarise(average_departure_delay = mean(dep_delay, na.rm = TRUE))
flights |>
mutate(june_13_2013 = (month == 6 & day == 13)) |>
group_by(june_13_2013) |>
summarise(average_departure_delay = mean(dep_delay, na.rm = TRUE)) |>
gt() |>
cols_label_with(~ fn = janitor::make_clean_names(., case = "title"))
flights |>
mutate(june_13_2013 = (month == 6 & day == 13)) |>
group_by(june_13_2013) |>
summarise(average_departure_delay = mean(dep_delay, na.rm = TRUE)) |>
gt() |>
cols_label_with(fn = ~ janitor::make_clean_names(., case = "title"))
flights |>
mutate(j13 = if_else((month == 6 & day == 13),
"June 13, 2013",
"Rest of the year")) |>
group_by(j13) |>
summarise(average_departure_delay = mean(dep_delay, na.rm = TRUE)) |>
gt() |>
cols_label_with(fn = ~ janitor::make_clean_names(., case = "title"))
flights |>
mutate(day = if_else((month == 6 & day == 13),
"June 13, 2013",
"Rest of the year")) |>
group_by(j13) |>
summarise(average_departure_delay = mean(dep_delay, na.rm = TRUE)) |>
gt() |>
cols_label_with(fn = ~ janitor::make_clean_names(., case = "title"))
flights |>
mutate(Date = if_else((month == 6 & day == 13),
"June 13, 2013",
"Rest of the year")) |>
group_by(Date) |>
summarise(average_departure_delay = mean(dep_delay, na.rm = TRUE)) |>
gt() |>
cols_label_with(fn = ~ janitor::make_clean_names(., case = "title"))
flights |>
mutate(Date = if_else((month == 6 & day == 13),
"June 13, 2013",
"Rest of the year")) |>
group_by(Date) |>
summarise(average_departure_delay = mean(dep_delay, na.rm = TRUE)) |>
gt() |>
cols_label_with(fn = ~ janitor::make_clean_names(., case = "title")) |>
gt_theme_538()
flights |>
mutate(Date = if_else((month == 6 & day == 13),
"June 13, 2013",
"Rest of the year")) |>
group_by(Date) |>
summarise(average_departure_delay = mean(dep_delay, na.rm = TRUE)) |>
gt() |>
cols_label_with(fn = ~ janitor::make_clean_names(., case = "title")) |>
fmt_number(columns = average_departure_delay) |>
gt_theme_538()
parties <- tibble(
q = 1:4,
party = ymd(c("2022-01-10", "2022-04-04", "2022-07-11", "2022-10-03")),
start = ymd(c("2022-01-01", "2022-04-04", "2022-07-11", "2022-10-03")),
end = ymd(c("2022-04-03", "2022-07-11", "2022-10-02", "2022-12-31"))
)
parties
parties |>
inner_join(parties, join_by(overlaps(start, end, start, end), q < q))
parties |>
inner_join(parties, join_by(overlaps(start, end, start, end), q < q)) |>
select(start.x, end.x, start.y, end.y)
parties |>
inner_join(parties, join_by(overlaps(start, end, start, end), q < q))
parties |>
inner_join(parties, join_by(overlaps(start, end, start, end)))
parties |>
inner_join(parties, join_by(overlaps(start, end, start, end), q < q)) |>
select(start.x, end.x, start.y, end.y)
# Removing the "q < q" in the join_by()
parties |>
inner_join(parties, join_by(overlaps(start, end, start, end))) |>
select(start.x, end.x, start.y, end.y)
?join_by
?inner_join()
?overlaps
parties <- tibble(
q = 1:4,
party = ymd(c("2022-01-10", "2022-04-04", "2022-07-11", "2022-10-03")),
start = ymd(c("2022-01-01", "2022-04-04", "2022-07-11", "2022-10-03")),
end = ymd(c("2022-04-03", "2022-07-11", "2022-10-02", "2022-12-31"))
)
# Using the correct code in textbook
parties |>
inner_join(parties, join_by(overlaps(start, end, start, end), q < q)) |>
select(start.x, end.x, start.y, end.y)
# Removing the "q < q" in the join_by()
parties |>
inner_join(parties, join_by(overlaps(start, end, start, end))) |>
select(start.x, end.x, start.y, end.y)
