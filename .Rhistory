geom_smooth(method = "lm",
formula = {{y}} ~ {{x}},
se = FALSE) +
theme_classic()
}
scatterplot(df, var1, var2)
scatterplot <- function(data, x, y){
data |>
ggplot(aes(x = {{x}},
y = {{y}})) +
geom_point() +
geom_smooth(method = "lm",
formula = {{y}} ~ {{x}},
se = FALSE) +
labs(title = rlang::englue("A scatter plot of {{y}} vs. {{x}} from {{data}} data.frame")) +
theme_classic()
}
scatterplot(df, var1, var2)
scatterplot <- function(data, x, y){
ggplot(data, aes(x = {{x}},
y = {{y}})) +
geom_point() +
geom_smooth(method = "lm",
formula = {{y}} ~ {{x}},
se = FALSE) +
labs(title = rlang::englue("A scatter plot of {{y}} vs. {{x}} from {{data}} data.frame")) +
theme_classic()
}
scatterplot(df, var1, var2)
scatterplot <- function(data, x, y){
ggplot(data, aes(x = {{x}},
y = {{y}})) +
geom_point() +
geom_smooth(method = "lm",
formula = {{y}} ~ {{x}},
se = FALSE) +
labs(title = rlang::englue("A scatter plot of {{y}} vs. {{x}}")) +
theme_classic()
}
scatterplot(df, var1, var2)
?str_sub
---
title: "Chapter 26"
x <- 1:5
?rep
y <- 8:9
match_length <- function(x, y) {
rep(y, length.out = length(x))
}
x <- 1:5
y <- 8:9
match_length(x, y)
sample(2, 10, replace = TRUE)
?sample
sample(3, 10, replace = TRUE)
#| label: setup
library(tidyverse)
rnorm_na <- function(n, n_na, mean = 0, sd = 1) {
sample(c(rnorm(n - n_na, mean = mean, sd = sd), rep(NA, n_na)))
}
df_miss <- tibble(
a = rnorm_na(5, 1),
b = rnorm_na(5, 1),
c = rnorm_na(5, 2),
d = rnorm(5)
)
df_miss
df_miss |>
summarize(
across(a:d, median),
n = n()
)
penguins <- palmerpenguins::penguins
penguins
penguins |>
summarise(across(.cols = everything(),
.fns = n_distinct))
everything()
mtcars |>
summarise(across(everything(), mean))
palmerpenguins::penguins |>
summarise(across(.cols = everything(),
.fns = n_distinct))
?count
?n
ggplot2::diamonds |>
group_by(cut, clarity, color) |>
summarise(across(
.cols = where(is.numeric),
.fns = list(
mean = function(x) mean(x, na.rm = TRUE),
n = n
)
))
ggplot2::diamonds |>
group_by(cut, clarity, color) |>
summarise(across(
.cols = where(is.numeric),
.fns = list(
mean = function(x) mean(x, na.rm = TRUE),
n = n()
)
))
ggplot2::diamonds |>
group_by(cut, clarity, color) |>
summarise(across(
.cols = where(is.numeric),
.fns = function(x) mean(x, na.rm = TRUE)
),
n = n()
)
ggplot2::diamonds |>
group_by(cut, clarity, color) |>
summarise(
across(
.cols = where(is.numeric),
.fns = function(x) mean(x, na.rm = TRUE)
),
n = n()
)
?across
# Create a sample data frame
data <- data.frame(
A = c(1, 2, 3),
B = c(4, 5, 6)
)
# Use across() without naming the functions
data %>%
mutate(across(everything(), list(sqrt, log)))
# Use across() with named new functions
data %>%
mutate(across(everything(),
list(sqrt = sqrt,
log = log,
mean = \(x) mean(x, na.rm = TRUE)
)
)
)
# Create a sample data frame
data <- data.frame(
A = c(1, 2, 3, NA, 4),
B = c(4, NA, 5, 6, 7)
)
data
# Use across() without naming the functions
data %>%
mutate(across(everything(), list(sqrt, log)))
# Use across() with named new functions
data %>%
mutate(across(everything(),
list(sqrt = sqrt,
log = log,
mean = \(x) mean(x, na.rm = TRUE)
)
)
)
# Create a sample data frame
data <- data.frame(
A = c(1, 2, 3, NA, 4),
B = c(4, NA, 5, 6, 7)
)
# Use across() without naming the functions
data %>%
mutate(across(everything(), list(sqrt, log)))
# Use across() with named new functions
data %>%
mutate(
across(
everything(),
list(sqrt = sqrt,
log = log,
mean = \(x) mean(x, na.rm = TRUE)
)
)
)
expand_dates <- function(df) {
df |>
mutate(
across(where(is.Date), list(year = year, month = month, day = mday))
) |>
select(!where(is.Date))
}
df_date <- tibble(
name = c("Amy", "Bob", "Charlie", "David", "Eva"),
date = ymd(c("2009-08-03", "2010-01-16", "2012-05-20", "2013-11-30", "2015-07-12"))
)
df_date |>
expand_dates()
df_date
show_missing <- function(df, group_vars, summary_vars = everything()) {
df |>
group_by(pick({{ group_vars }})) |>
summarize(
across({{ summary_vars }}, \(x) sum(is.na(x))),
.groups = "drop"
) |>
select(where(\(x) any(x > 0)))
}
nycflights13::flights |> show_missing(c(year, month, day))
#| label: setup
library(tidyverse)
library(gt)
library(gtExtras)
show_missing <- function(df, group_vars, summary_vars = everything()) {
df |>
group_by(pick({{ group_vars }})) |>
summarize(
across({{ summary_vars }}, \(x) sum(is.na(x))),
.groups = "drop"
) |>
select(where(\(x) any(x > 0)))
}
nycflights13::flights |>
show_missing(c(year, month, day)) |>
slice_head(n = 5) |>
gt() |> gt_theme_538()
x <- c("one", "two", "three", "four", "five")
x[c(3, 2, 5)]
x[c(-1, -3, -5)]
x[-1]
x[-1, 3]
x[c(-1, 3)]
x[-c(1, 3)]
x <- c("one", "two", "three", "four", "five")
x[c(3, 2, 5)]
x[c(-1, -3, -5)]
x[-c(1, 3)]
x <- c(10, 3, NA, 5, 8, 1, NA)
# All non-missing values of x
x[!is.na(x)]
# All non-missing values of x
x[is.na(x)]
# All non-missing values of x
which(is.na(x))
# All even (or missing!) values of x
x[x %% 2 == 0]
x
x %% 2
# All even (or missing!) values of x
x[x %% 2 == 0]
x <- c(abc = 1, def = 2, xyz = 5)
x
x[c("xyz", "def")]
z[1]
x[1]
df <- tibble(
x = c(2, 3, 1, 1, NA),
y = letters[1:5],
z = runif(5)
)
df
df <- tibble(
x = c(2, 3, 1, 1, NA),
y = letters[1:5],
z = runif(5)
)
library(tidyverse)
df <- tibble(
x = c(2, 3, 1, 1, NA),
y = letters[1:5],
z = runif(5)
)
df
df |> filter(x > 1)
df[, "x" > 1]
df[, df$x > 1]
df[, (df$x > 1)]
df[(df$x > 1), ]
df
df[(df$x > 1), ]
# same as
df[!is.na(df$x) & df$x > 1, ]
df |> arrange(x, y)
# same as
df[order(df$x, df$y), ]
?rank
vec_a <- sample(1:10, size = 10, replace = TRUE)
vec_a <- sample(1:10, size = 10, replace = TRUE)
vec_a
names(vec_a) <- letters[1:length(vec_a)]
vec_a
rank(a)
rank(vec_a)
rank(vec_a, ties.method = "first")
rm(list = ls())
x[seq(0:length(x), )]
even_positions <- function(x){
x[seq(0:length(x), )]
}
?seq
even_positions <- function(x){
x[seq.int(from = 0,
to = length(x),
by = 2)]
}
?rep
x = rep(c(a, b), 10)
x = rep(c("a", "b"), 10)
x
x = rep(c("odd", "even"), 10)
even_positions(x)
# Method 2: simpler method using TRUE and FALSE
even_positions <- function(input_vector) {
even_elements <- input_vector[c(FALSE, TRUE)]
return(even_elements)
}
even_positions(x)
x
# Create a sequence of numbers from 1 to 20, each repeated twice
nums <- rep(1:20, each = 2)
nums
# Create a vector with alternating "odd" and "even" based on the sequence
x <- paste(ifelse(nums %% 2 == 1, "odd", "even"), nums)
x
# Creating a temporary vector to test out our function
# Create a sequence of numbers from 1 to 20, each repeated twice
nums <- rep(1:20, each = 2)
# Create a vector with alternating "odd" and "even" based on the sequence
x <- paste0(ifelse(nums %% 2 == 1, "odd", "even"), nums)
# Print the vector x
print(x)
x
# Creating a temporary vector to test out our function
# Create a sequence of numbers from 1 to 20, each repeated twice
nums <- rep(1:10, each = 2)
# Create a vector with alternating "odd" and "even" based on the sequence
x <- paste0(ifelse(nums %% 2 == 1, "odd", "even"), nums)
x
# Demonstrating an example with our created function
even_positions(x)
# Creating a function called even positions
even_positions <- function(x){
x[seq.int(from = 0,
to = length(x),
by = 2)]
}
# Creating a temporary vector to test out our function
# Create a sequence of numbers from 1 to 20, each repeated twice
nums <- rep(1:10, each = 2)
# Create a vector with alternating "odd" and "even" based on the sequence
x <- paste0(ifelse(nums %% 2 == 1, "odd", "even"), nums)
x
# Demonstrating an example with our created function
even_positions(x)
# Method 2: simpler method using TRUE and FALSE
even_positions <- function(input_vector) {
even_elements <- input_vector[c(FALSE, TRUE)]
return(even_elements)
}
even_positions(x)
x
# Creating a temporary vector to test out our function
# Create a sequence of numbers from 1 to 20, each repeated twice
nums <- rep(1:10, each = 2)
nums
paste0(ifelse(nums %% 2 == 1, "odd", "even"), nums)
nums %% 2
nums %/% 2
rep(1:10, each = 2)
chars <- c("odd", "even")
paste0(nums, chars)
# Create a vector with alternating "odd" and "even" based on the sequence
x <- paste0(chars, nums)
x
names(x) <- 1:length(x)
x
# Demonstrating an example with our created function
even_positions(x)
# Method 2: simpler method using TRUE and FALSE
even_positions <- function(input_vector) {
even_elements <- input_vector[c(FALSE, TRUE)]
return(even_elements)
}
even_positions(x)
drop_last <- function(x){
return(x[-length(x)])
}
drop_last(x)
x <- LETTERS[1:5]
drop_last(x)
x <- letters[1:5]
drop_last(x)
display_even <- function(x){
ifelse(is.numeric(x),
NULL,
"Error: The vector is not numeric. Please provide a numeric vector!")
return(x[x %% 2 == 0])
}
x <- sample.int(1:10, size = 6, replace = FALSE)
x
sample.int(1:10, size = 10, replace = FALSE)
?sample.int
sample.int(10, size = 10, replace = FALSE)
x
x <- sample.int(10, size = 10, replace = FALSE)
x
display_even(x)
display_even <- function(x){
return(x[x %% 2 == 0])
}
x <- sample.int(10, size = 10, replace = FALSE)
x
display_even(x)
x <- sample(c(1:10, NA), size = 10, replace = FALSE)
x
display_even(x)
display_even <- function(x){
return(x[(x %% 2 == 0) & (!is.na(x))])
}
x <- sample(c(1:10, NA), size = 10, replace = FALSE)
x
display_even(x)
?&&
# Better function with an error message facility
display_even <- function(input_vector) {
if (is.vector(input_vector) && is.numeric(input_vector)) {
even_values <- input_vector[!is.na(input_vector) & input_vector %% 2 == 0]
return(even_values)
} else {
stop("Input must be a numeric vector.")
}
}
# Example usage:
input_vector <- c(1, 2, 3, NA, 4, 5, 6, 7, NA, 8)
even_values <- display_even(input_vector)
print(even_values)
display_even(input_vector)
# Example usage:
display_even(x)
display_even <- function(x){
return(x[(x %% 2 == 0) & (!is.na(x))])
}
# Demonstrating an example with our created function
x <- sample(c(1:10, NA), size = 10, replace = FALSE)
x
display_even(x)
# Better function with an error message facility
display_even <- function(input_vector) {
if (is.vector(input_vector) && is.numeric(input_vector)) {
even_values <- input_vector[!is.na(input_vector) & input_vector %% 2 == 0]
return(even_values)
} else {
stop("Input must be a numeric vector.")
}
}
# Example usage:
display_even(x)
?which
x <- sample(c(-10, 10, NA, NA), 20)
x <- sample(c(-10, 10, NA, NA),
size = 20, replace = TRUE)
x
x <- sample(c(-10:10, NA, NA),
size = 20, replace = TRUE)
x
x <- sample(c(-10:10, rep(NA, 20)),
size = 20, replace = TRUE)
x
x <- sample(c(-10:10, rep(NA, 10)),
size = 20, replace = TRUE)
x
x <- sample(c(-10:10, rep(NA, 4)),
size = 20, replace = TRUE)
x
x[-which(x > 0)]
x[x <= 0]
c(-5:5, Inf, -Inf, NaN, NA)
x <- c(-5:5, Inf, -Inf, NaN, NA)
x[-which(x > 0)]
x[x <= 0]
x <- c(NA, NaN, -Inf, -5:5, Inf, NaN, NA)
x[-which(x > 0)]
x
#
x[which(x > 0)]
#
x[-which(x > 0)]
# Thus, -which() finds all the elements that are not present above
x[-which(x > 0)]
# On the other hand, logical condition
x[x <= 0]
# Thus, -which() finds all the elements that are not present above
x[-which(x > 0)]
x <- c(1, 2, 3, 4, 5)
x
x[[6]]
my_list <- list(a = 1, b = 2, c = 3)
my_list
my_list[["d"]]
# Example list
list1 <- list(
a = 1:10,
b = letters[1:5],
c = list(
c1  = 11:15,
c2 = letters[6:10]
)
)
list1
list1[[1]]
list1[1]
list1[1] |> classs()
list1[1] |> class()
list1[[1]] |> class()
# [[ ]] pulls out a vector, i.e. it produces element of the class of first element of the list
list[[1]]
# [1] pulls out a list that only contains the first element
list1[1]
list1[1] |> class()
vector("list", 10)
vector("list", 10) |> class()
?vector
