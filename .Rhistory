select(formatted_address, address_components) |>
# Since we know the address components have City, County, State and Country
# Names, lets try to create a column for each by unnest_wider
unnest_wider(address_components, names_sep = "_") |>
# To create tidy data of address levels
pivot_longer(cols = -formatted_address,
names_to = "level",
values_to = "address_components") |>
mutate(level = parse_number(level)) |>
# Further, making new columns from remaining list-columns
unnest_wider(address_components) |>
unnest_wider(types, names_sep = "_") |>
# Remove types_2 ("political) as it does not add any information
select(-types_2) |>
# Tidying up final display
rename(level_type = types_1) |>
relocate(level_type, .before = long_name) |>
drop_na() |>
mutate(level_type = str_to_title(level_type))
gmaps_cities |>
unnest_wider(json) |>
# Remove status as it adds no info
select(-status) |>
# Unnamed lists, so unnest longer - make rows
unnest_longer(results) |>
# Named lists to unnest wider into columns
unnest_wider(results) |>
# Select an id variable and address_components
select(formatted_address, address_components) |>
# Since we know the address components have City, County, State and Country
# Names, lets try to create a column for each by unnest_wider
unnest_wider(address_components, names_sep = "_") |>
# To create tidy data of address levels
pivot_longer(cols = -formatted_address,
names_to = "level",
values_to = "address_components") |>
mutate(level = parse_number(level)) |>
# Further, making new columns from remaining list-columns
unnest_wider(address_components) |>
unnest_wider(types, names_sep = "_") |>
# Remove types_2 ("political) as it does not add any information
select(-types_2) |>
# Tidying up final display
rename(level_type = types_1) |>
relocate(level_type, .before = long_name) |>
drop_na() |>
mutate(level_type = snakecase::to_any_case(level_type, "title"))
gmaps_cities |>
unnest_wider(json) |>
# Remove status as it adds no info
select(-status) |>
# Unnamed lists, so unnest longer - make rows
unnest_longer(results) |>
# Named lists to unnest wider into columns
unnest_wider(results) |>
# Select an id variable and address_components
select(formatted_address, address_components) |>
# Since we know the address components have City, County, State and Country
# Names, lets try to create a column for each by unnest_wider
unnest_wider(address_components, names_sep = "_") |>
# To create tidy data of address levels
pivot_longer(cols = -formatted_address,
names_to = "level",
values_to = "address_components") |>
mutate(level = parse_number(level)) |>
# Further, making new columns from remaining list-columns
unnest_wider(address_components) |>
unnest_wider(types, names_sep = "_") |>
# Remove types_2 ("political) as it does not add any information
select(-types_2) |>
# Tidying up final display
rename(level_type = types_1) |>
relocate(level_type, .before = long_name) |>
drop_na() |>
mutate(level_type = snakecase::to_any_case(level_type, "title")) |>
group_by(formatted_address) |>
gt() |>
gt_theme_538()
gmaps_cities |>
unnest_wider(json) |>
# Remove status as it adds no info
select(-status) |>
# Unnamed lists, so unnest longer - make rows
unnest_longer(results) |>
# Named lists to unnest wider into columns
unnest_wider(results) |>
# Select an id variable and address_components
select(formatted_address, address_components) |>
# Since we know the address components have City, County, State and Country
# Names, lets try to create a column for each by unnest_wider
unnest_wider(address_components, names_sep = "_") |>
# To create tidy data of address levels
pivot_longer(cols = -formatted_address,
names_to = "level",
values_to = "address_components") |>
mutate(level = parse_number(level)) |>
# Further, making new columns from remaining list-columns
unnest_wider(address_components) |>
unnest_wider(types, names_sep = "_") |>
# Remove types_2 ("political) as it does not add any information
select(-types_2) |>
# Tidying up final display
rename(level_type = types_1) |>
relocate(level_type, .before = long_name) |>
drop_na() |>
mutate(level_type = snakecase::to_any_case(level_type, "title")) |>
group_by(formatted_address) |>
gt(rowname_col = formatted_address) |>
gt_theme_538()
gmaps_cities |>
unnest_wider(json) |>
# Remove status as it adds no info
select(-status) |>
# Unnamed lists, so unnest longer - make rows
unnest_longer(results) |>
# Named lists to unnest wider into columns
unnest_wider(results) |>
# Select an id variable and address_components
select(formatted_address, address_components) |>
# Since we know the address components have City, County, State and Country
# Names, lets try to create a column for each by unnest_wider
unnest_wider(address_components, names_sep = "_") |>
# To create tidy data of address levels
pivot_longer(cols = -formatted_address,
names_to = "level",
values_to = "address_components") |>
mutate(level = parse_number(level)) |>
# Further, making new columns from remaining list-columns
unnest_wider(address_components) |>
unnest_wider(types, names_sep = "_") |>
# Remove types_2 ("political) as it does not add any information
select(-types_2) |>
# Tidying up final display
rename(level_type = types_1) |>
relocate(level_type, .before = long_name) |>
drop_na() |>
mutate(level_type = snakecase::to_any_case(level_type, "title")) |>
group_by(formatted_address) |>
gt(rowname_col = "formatted_address") |>
gt_theme_538()
gmaps_cities |>
unnest_wider(json) |>
# Remove status as it adds no info
select(-status) |>
# Unnamed lists, so unnest longer - make rows
unnest_longer(results) |>
# Named lists to unnest wider into columns
unnest_wider(results) |>
# Select an id variable and address_components
select(formatted_address, address_components) |>
# Since we know the address components have City, County, State and Country
# Names, lets try to create a column for each by unnest_wider
unnest_wider(address_components, names_sep = "_") |>
# To create tidy data of address levels
pivot_longer(cols = -formatted_address,
names_to = "level",
values_to = "address_components") |>
mutate(level = parse_number(level)) |>
# Further, making new columns from remaining list-columns
unnest_wider(address_components) |>
unnest_wider(types, names_sep = "_") |>
# Remove types_2 ("political) as it does not add any information
select(-types_2) |>
# Tidying up final display
rename(level_type = types_1) |>
relocate(level_type, .before = long_name) |>
drop_na() |>
mutate(level_type = snakecase::to_any_case(level_type, "title")) |>
gt(rowname_col = "formatted_address") |>
gt_theme_538()
gmaps_cities |>
unnest_wider(json) |>
# Remove status as it adds no info
select(-status) |>
# Unnamed lists, so unnest longer - make rows
unnest_longer(results) |>
# Named lists to unnest wider into columns
unnest_wider(results) |>
# Select an id variable and address_components
select(formatted_address, address_components) |>
# Since we know the address components have City, County, State and Country
# Names, lets try to create a column for each by unnest_wider
unnest_wider(address_components, names_sep = "_") |>
# To create tidy data of address levels
pivot_longer(cols = -formatted_address,
names_to = "level",
values_to = "address_components") |>
mutate(level = parse_number(level)) |>
# Further, making new columns from remaining list-columns
unnest_wider(address_components) |>
unnest_wider(types, names_sep = "_") |>
# Remove types_2 ("political) as it does not add any information
select(-types_2) |>
# Tidying up final display
rename(level_type = types_1) |>
relocate(level_type, .before = long_name) |>
drop_na() |>
mutate(level_type = snakecase::to_any_case(level_type, "title")) |>
gt(rowname_col = "formatted_address") |>
cols_label_with(fn = ~ janitor::make_clean_names(., case = "title"))
gmaps_cities |>
unnest_wider(json) |>
# Remove status as it adds no info
select(-status) |>
# Unnamed lists, so unnest longer - make rows
unnest_longer(results) |>
# Named lists to unnest wider into columns
unnest_wider(results) |>
# Select an id variable and address_components
select(formatted_address, address_components) |>
# Since we know the address components have City, County, State and Country
# Names, lets try to create a column for each by unnest_wider
unnest_wider(address_components, names_sep = "_") |>
# To create tidy data of address levels
pivot_longer(cols = -formatted_address,
names_to = "level",
values_to = "address_components") |>
mutate(level = parse_number(level)) |>
# Further, making new columns from remaining list-columns
unnest_wider(address_components) |>
unnest_wider(types, names_sep = "_") |>
# Remove types_2 ("political) as it does not add any information
select(-types_2) |>
# Tidying up final display
rename(level_type = types_1) |>
relocate(level_type, .before = long_name) |>
drop_na() |>
mutate(level_type = snakecase::to_any_case(level_type, "title")) |>
gt(row_group_as_column = TRUE) |>
cols_label_with(fn = ~ janitor::make_clean_names(., case = "title"))
gmaps_cities |>
unnest_wider(json) |>
# Remove status as it adds no info
select(-status) |>
# Unnamed lists, so unnest longer - make rows
unnest_longer(results) |>
# Named lists to unnest wider into columns
unnest_wider(results) |>
# Select an id variable and address_components
select(formatted_address, address_components) |>
# Since we know the address components have City, County, State and Country
# Names, lets try to create a column for each by unnest_wider
unnest_wider(address_components, names_sep = "_") |>
# To create tidy data of address levels
pivot_longer(cols = -formatted_address,
names_to = "level",
values_to = "address_components") |>
mutate(level = parse_number(level)) |>
# Further, making new columns from remaining list-columns
unnest_wider(address_components) |>
unnest_wider(types, names_sep = "_") |>
# Remove types_2 ("political) as it does not add any information
select(-types_2) |>
# Tidying up final display
rename(level_type = types_1) |>
relocate(level_type, .before = long_name) |>
drop_na() |>
mutate(level_type = snakecase::to_any_case(level_type, "title")) |>
group_by(formatted_address) |>
gt(row_group_as_column = TRUE) |>
cols_label_with(fn = ~ janitor::make_clean_names(., case = "title"))
gmaps_cities |>
unnest_wider(json) |>
# Remove status as it adds no info
select(-status) |>
# Unnamed lists, so unnest longer - make rows
unnest_longer(results) |>
# Named lists to unnest wider into columns
unnest_wider(results) |>
# Select an id variable and address_components
select(formatted_address, address_components) |>
# Since we know the address components have City, County, State and Country
# Names, lets try to create a column for each by unnest_wider
unnest_wider(address_components, names_sep = "_") |>
# To create tidy data of address levels
pivot_longer(cols = -formatted_address,
names_to = "level",
values_to = "address_components") |>
mutate(level = parse_number(level)) |>
# Further, making new columns from remaining list-columns
unnest_wider(address_components) |>
unnest_wider(types, names_sep = "_") |>
# Remove types_2 ("political) as it does not add any information
select(-types_2) |>
# Tidying up final display
rename(level_type = types_1) |>
relocate(level_type, .before = long_name) |>
drop_na() |>
mutate(level_type = snakecase::to_any_case(level_type, "title")) |>
group_by(formatted_address) |>
gt(row_group_as_column = TRUE) |>
cols_label_with(fn = ~ janitor::make_clean_names(., case = "title"))
gmaps_cities |>
unnest_wider(json) |>
# Remove status as it adds no info
select(-status) |>
# Unnamed lists, so unnest longer - make rows
unnest_longer(results) |>
# Named lists to unnest wider into columns
unnest_wider(results) |>
# Select an id variable and address_components
select(formatted_address, address_components) |>
# Since we know the address components have City, County, State and Country
# Names, lets try to create a column for each by unnest_wider
unnest_wider(address_components, names_sep = "_") |>
# To create tidy data of address levels
pivot_longer(cols = -formatted_address,
names_to = "level",
values_to = "address_components") |>
mutate(level = parse_number(level)) |>
# Further, making new columns from remaining list-columns
unnest_wider(address_components) |>
unnest_wider(types, names_sep = "_") |>
# Remove types_2 ("political) as it does not add any information
select(-types_2) |>
# Tidying up final display
rename(level_type = types_1) |>
relocate(level_type, .before = long_name) |>
drop_na() |>
mutate(level_type = snakecase::to_any_case(level_type, "title")) |>
group_by(formatted_address) |>
gt(groupname_col = "formatted_address",
row_group_as_column = TRUE) |>
cols_label_with(fn = ~ janitor::make_clean_names(., case = "title"))
gmaps_cities |>
unnest_wider(json) |>
# Remove status as it adds no info
select(-status) |>
# Unnamed lists, so unnest longer - make rows
unnest_longer(results) |>
# Named lists to unnest wider into columns
unnest_wider(results) |>
# Select an id variable and address_components
select(formatted_address, address_components) |>
# Since we know the address components have City, County, State and Country
# Names, lets try to create a column for each by unnest_wider
unnest_wider(address_components, names_sep = "_") |>
# To create tidy data of address levels
pivot_longer(cols = -formatted_address,
names_to = "level",
values_to = "address_components") |>
mutate(level = parse_number(level)) |>
# Further, making new columns from remaining list-columns
unnest_wider(address_components) |>
unnest_wider(types, names_sep = "_") |>
# Remove types_2 ("political) as it does not add any information
select(-types_2) |>
# Tidying up final display
rename(level_type = types_1) |>
relocate(level_type, .before = long_name) |>
drop_na() |>
mutate(level_type = snakecase::to_any_case(level_type, "title")) |>
gt(groupname_col = "formatted_address",
row_group_as_column = TRUE) |>
cols_label_with(fn = ~ janitor::make_clean_names(., case = "title"))
gmaps_cities |>
unnest_wider(json) |>
# Remove status as it adds no info
select(-status) |>
# Unnamed lists, so unnest longer - make rows
unnest_longer(results) |>
# Named lists to unnest wider into columns
unnest_wider(results) |>
# Select an id variable and address_components
select(formatted_address, address_components) |>
# Since we know the address components have City, County, State and Country
# Names, lets try to create a column for each by unnest_wider
unnest_wider(address_components, names_sep = "_") |>
# To create tidy data of address levels
pivot_longer(cols = -formatted_address,
names_to = "level",
values_to = "address_components") |>
mutate(level = parse_number(level)) |>
# Further, making new columns from remaining list-columns
unnest_wider(address_components) |>
unnest_wider(types, names_sep = "_") |>
# Remove types_2 ("political) as it does not add any information
select(-types_2) |>
# Tidying up final display
rename(level_type = types_1) |>
relocate(level_type, .before = long_name) |>
drop_na() |>
mutate(level_type = snakecase::to_any_case(level_type, "title")) |>
gt(groupname_col = "formatted_address",
row_group_as_column = TRUE) |>
cols_label_with(fn = ~ janitor::make_clean_names(., case = "title"))
gmaps_cities |>
unnest_wider(json) |>
# Remove status as it adds no info
select(-status) |>
# Unnamed lists, so unnest longer - make rows
unnest_longer(results) |>
# Named lists to unnest wider into columns
unnest_wider(results) |>
# Select an id variable and address_components
select(formatted_address, address_components) |>
# Since we know the address components have City, County, State and Country
# Names, lets try to create a column for each by unnest_wider
unnest_wider(address_components, names_sep = "_") |>
# To create tidy data of address levels
pivot_longer(cols = -formatted_address,
names_to = "level",
values_to = "address_components") |>
mutate(level = parse_number(level)) |>
# Further, making new columns from remaining list-columns
unnest_wider(address_components) |>
unnest_wider(types, names_sep = "_") |>
# Remove types_2 ("political) as it does not add any information
select(-types_2) |>
# Tidying up final display
rename(level_type = types_1) |>
relocate(level_type, .before = long_name) |>
drop_na() |>
mutate(level_type = snakecase::to_any_case(level_type, "title")) |>
gt(groupname_col = "formatted_address") |>
cols_label_with(fn = ~ janitor::make_clean_names(., case = "title"))
gmaps_cities |>
unnest_wider(json) |>
# Remove status as it adds no info
select(-status) |>
# Unnamed lists, so unnest longer - make rows
unnest_longer(results) |>
# Named lists to unnest wider into columns
unnest_wider(results) |>
# Select an id variable and address_components
select(formatted_address, address_components) |>
# Since we know the address components have City, County, State and Country
# Names, lets try to create a column for each by unnest_wider
unnest_wider(address_components, names_sep = "_") |>
# To create tidy data of address levels
pivot_longer(cols = -formatted_address,
names_to = "level",
values_to = "address_components") |>
mutate(level = parse_number(level)) |>
# Further, making new columns from remaining list-columns
unnest_wider(address_components) |>
unnest_wider(types, names_sep = "_") |>
# Remove types_2 ("political) as it does not add any information
select(-types_2) |>
# Tidying up final display
rename(level_type = types_1) |>
relocate(level_type, .before = long_name) |>
drop_na() |>
mutate(level_type = snakecase::to_any_case(level_type, "title")) |>
gt(rowname_col = NULL,
groupname_col = "formatted_address") |>
cols_label_with(fn = ~ janitor::make_clean_names(., case = "title"))
gmaps_cities |>
unnest_wider(json) |>
# Remove status as it adds no info
select(-status) |>
# Unnamed lists, so unnest longer - make rows
unnest_longer(results) |>
# Named lists to unnest wider into columns
unnest_wider(results) |>
# Select an id variable and address_components
select(formatted_address, address_components) |>
# Since we know the address components have City, County, State and Country
# Names, lets try to create a column for each by unnest_wider
unnest_wider(address_components, names_sep = "_") |>
# To create tidy data of address levels
pivot_longer(cols = -formatted_address,
names_to = "level",
values_to = "address_components") |>
mutate(level = parse_number(level)) |>
# Further, making new columns from remaining list-columns
unnest_wider(address_components) |>
unnest_wider(types, names_sep = "_") |>
# Remove types_2 ("political) as it does not add any information
select(-types_2) |>
# Tidying up final display
rename(level_type = types_1) |>
relocate(level_type, .before = long_name) |>
drop_na() |>
mutate(level_type = snakecase::to_any_case(level_type, "title")) |>
gt(rowname_col = NULL,
groupname_col = "formatted_address") |>
tab_options(row_group.as_column = TRUE) |>
cols_label_with(fn = ~ janitor::make_clean_names(., case = "title"))
gmaps_cities |>
unnest_wider(json) |>
# Remove status as it adds no info
select(-status) |>
# Unnamed lists, so unnest longer - make rows
unnest_longer(results) |>
# Named lists to unnest wider into columns
unnest_wider(results) |>
# Select an id variable and address_components
select(formatted_address, address_components) |>
# Since we know the address components have City, County, State and Country
# Names, lets try to create a column for each by unnest_wider
unnest_wider(address_components, names_sep = "_") |>
# To create tidy data of address levels
pivot_longer(cols = -formatted_address,
names_to = "level",
values_to = "address_components") |>
mutate(level = parse_number(level)) |>
# Further, making new columns from remaining list-columns
unnest_wider(address_components) |>
unnest_wider(types, names_sep = "_") |>
# Remove types_2 ("political) as it does not add any information
select(-types_2) |>
# Tidying up final display
rename(level_type = types_1) |>
relocate(level_type, .before = long_name) |>
drop_na() |>
mutate(level_type = snakecase::to_any_case(level_type, "title")) |>
gt(rowname_col = NULL,
groupname_col = "formatted_address") |>
tab_options(row_group.as_column = TRUE) |>
cols_label_with(fn = ~ janitor::make_clean_names(., case = "title")) |>
gt_theme_538()
