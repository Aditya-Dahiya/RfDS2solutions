label = name)) +
geom_segment(lwd = 10) +
geom_text(hjust = -0.05,
vjust = -1.5) +
theme_minimal() +
# (a) Combining the two variants that customize colors and x axis breaks.
scale_color_manual(values = c("Democratic" = "blue",
"Republican" = "red")) +
scale_x_continuous(breaks = x_labs,
labels = year(x_labs)) +
# Improving the display of the y axis.
scale_y_reverse() +
geom_rect(aes(xmin = start,
xmax = end,
ymin = 33.5,
ymax = 45.5,
fill = party),
alpha = 0.3,
col = NA) +
scale_fill_manual(values = c("Democratic" = "blue",
"Republican" = "red")) +
labs(color = "President's Political Party",
y = "President's Number",
x = "Year") +
theme(legend.position = "bottom") +
theme(panel.grid.major.x = element_line(color = "darkgrey"),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.text.y = element_text()) +
guides(fill = "none")
presidential |>
as_tibble() |>
mutate(id = 33 + row_number())
seq(
from = 1 + 33,
to = nrow(presidential) + 33,
by = 1
)
y_labs = seq(
from = 1 + 33,
to = nrow(presidential) + 33,
by = 1
)
presidential |>
as_tibble() |>
mutate(id = 33 + row_number()) |>
ggplot(aes(x = start, xend = end,
y = id, yend = id,
col = party,
label = name)) +
geom_segment(lwd = 10) +
geom_text(hjust = -0.05,
vjust = -1.5) +
theme_minimal() +
# (a) Combining the two variants that customize colors and x axis breaks.
scale_color_manual(values = c("Democratic" = "blue",
"Republican" = "red")) +
scale_x_continuous(breaks = x_labs,
labels = year(x_labs)) +
# Improving the display of the y axis.
scale_y_reverse() +
scale_y_continuous(breaks = y_labs,
labels = y_labs) +
geom_rect(aes(xmin = start,
xmax = end,
ymin = 33.5,
ymax = 45.5,
fill = party),
alpha = 0.3,
col = NA) +
scale_fill_manual(values = c("Democratic" = "blue",
"Republican" = "red")) +
labs(color = "President's Political Party",
y = "President's Number",
x = "Year") +
theme(legend.position = "bottom") +
theme(panel.grid.major.x = element_line(color = "darkgrey"),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.text.y = element_text()) +
guides(fill = "none")
presidential |>
as_tibble() |>
mutate(id = 33 + row_number()) |>
ggplot(aes(x = start, xend = end,
y = id, yend = id,
col = party,
label = name)) +
geom_segment(lwd = 10) +
geom_text(hjust = -0.05,
vjust = -1.5) +
theme_minimal() +
# (a) Combining the two variants that customize colors and x axis breaks.
scale_color_manual(values = c("Democratic" = "blue",
"Republican" = "red")) +
scale_x_continuous(breaks = x_labs,
labels = year(x_labs)) +
# Improving the display of the y axis.
scale_y_continuous(breaks = y_labs,
labels = y_labs) +
scale_y_reverse() +
geom_rect(aes(xmin = start,
xmax = end,
ymin = 33.5,
ymax = 45.5,
fill = party),
alpha = 0.3,
col = NA) +
scale_fill_manual(values = c("Democratic" = "blue",
"Republican" = "red")) +
labs(color = "President's Political Party",
y = "President's Number",
x = "Year") +
theme(legend.position = "bottom") +
theme(panel.grid.major.x = element_line(color = "darkgrey"),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.text.y = element_text()) +
guides(fill = "none")
?scale_y_reverse
presidential |>
as_tibble() |>
mutate(id = 33 + row_number()) |>
ggplot(aes(x = start, xend = end,
y = id, yend = id,
col = party,
label = name)) +
geom_segment(lwd = 10) +
geom_text(hjust = -0.05,
vjust = -1.5) +
theme_minimal() +
# (a) Combining the two variants that customize colors and x axis breaks.
scale_color_manual(values = c("Democratic" = "blue",
"Republican" = "red")) +
scale_x_continuous(breaks = x_labs,
labels = year(x_labs)) +
# Improving the display of the y axis.
scale_y_reverse(breaks = y_labs,
labels = y_labs) +
geom_rect(aes(xmin = start,
xmax = end,
ymin = 33.5,
ymax = 45.5,
fill = party),
alpha = 0.3,
col = NA) +
scale_fill_manual(values = c("Democratic" = "blue",
"Republican" = "red")) +
labs(color = "President's Political Party",
y = "President's Number",
x = "Year") +
theme(legend.position = "bottom") +
theme(panel.grid.major.x = element_line(color = "darkgrey"),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.text.y = element_text()) +
guides(fill = "none")
x_labs
presidential |>
select(start) |>
as_vector() |>
as_date() |>
year()
x_4yr_labs <-> seq(from = x_4yr_labs[1],
seq(from = x_4yr_labs[1],
to = x_4yr_labs[-1],
by = 4)
x_4yr_labs =
presidential |>
select(start) |>
as_vector() |>
as_date() |>
year()
seq(from = x_4yr_labs[1],
to = x_4yr_labs[-1],
by = 4)
x_4yr_labs[-1]
x_4yr_labs[1]
x_4yr_labs =
presidential |>
select(start) |>
as_vector() |>
as_date() |>
year() |>
unname()
x_4yr_labs[1]
x_4yr_labs[length(x_4yr_labs)]
seq(from = x_4yr_labs[1],
to = x_4yr_labs[length(x_4yr_labs)],
by = 4)
x_4yr_labs = seq(from = x_4yr_labs[1],
to = x_4yr_labs[length(x_4yr_labs)],
by = 4)
x_4yr_labs
x_4yr_labs =
presidential |>
select(start) |>
as_vector() |>
as_date()
x_4yr_labs = seq(from = x_4yr_labs[1],
to = x_4yr_labs[length(x_4yr_labs)],
by = 4)
x_4yr_labs
x_4yr_labs =
presidential |>
select(start) |>
as_vector() |>
as_date()
x_4yr_labs = seq(from = x_4yr_labs[1],
to = x_4yr_labs[length(x_4yr_labs)],
by = years(4))
x_4yr_labs[1]
x_4yr_labs[length(x_4yr_labs)]
years(4)
x_4yr_labs = seq(from = ymd(x_4yr_labs[1]),
to = ymd(x_4yr_labs[length(x_4yr_labs)]),
by = years(4))
?seq
x_4yr_labs = seq.Date(from = ymd(x_4yr_labs[1]),
to = ymd(x_4yr_labs[length(x_4yr_labs)]),
by = years(4))
seq(ymd("2023-09-01"), ymd("2023-09-10"), by = "days")
x_4yr_labs = seq.Date(from = ymd(x_4yr_labs[1]),
to = ymd(x_4yr_labs[length(x_4yr_labs)]),
by = "years")
x_4yr_labs
x_4yr_labs =
presidential |>
select(start) |>
as_vector() |>
as_date()
x_4yr_labs
x_4yr_labs = seq.Date(from = ymd(x_4yr_labs[1]),
to = ymd(x_4yr_labs[length(x_4yr_labs)]),
by = "4 years")
x_4yr_labs
x_4yr_labs =
presidential |>
select(start) |>
as_vector() |>
as_date()
x_4yr_labs = seq(from = ymd(x_4yr_labs[1]),
to = ymd(x_4yr_labs[length(x_4yr_labs)]),
by = "4 years")
x_4yr_labs
g =
presidential |>
as_tibble() |>
mutate(id = 33 + row_number()) |>
ggplot(aes(x = start, xend = end,
y = id, yend = id,
col = party,
label = name)) +
geom_segment(lwd = 10) +
# (a) Combining the two variants that customize colors and x axis breaks.
scale_color_manual(values = c("Democratic" = "blue",
"Republican" = "red")) +
scale_x_continuous(breaks = x_labs,
labels = year(x_labs)) +
# (b) Improving the display of the y axis.
scale_y_reverse(breaks = y_labs,
labels = y_labs) +
# (c) Labeling each term with the name of the president.
geom_text(hjust = -0.05,
vjust = -1.5) +
geom_rect(aes(xmin = start,
xmax = end,
ymin = 33.5,
ymax = 45.5,
fill = party),
alpha = 0.3,
col = NA) +
scale_fill_manual(values = c("Democratic" = "blue",
"Republican" = "red")) +
# (d) Adding informative plot labels.
labs(color = "President's Political Party",
y = "Table of Precedence Number",
x = "Year") +
theme_minimal() +
theme(legend.position = "bottom") +
theme(panel.grid.major.x = element_line(color = "darkgrey"),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.text.y = element_text()) +
guides(fill = "none")
g
print(g)
g +
scale_x_continuous(breaks = x_4yr_labs,
labels = year(x_4yr_labs))
#| label: fig-q3b-ex4
#| fig-cap: "Customizing plots by placing breaks every 4 years"
#| code-fold: true
x_4yr_labs =
presidential |>
select(start) |>
as_vector() |>
as_date()
x_4yr_labs = seq(from = ymd(x_4yr_labs[1]),
to = ymd(x_4yr_labs[length(x_4yr_labs)]),
by = "4 years")
g +
scale_x_continuous(breaks = x_4yr_labs,
labels = year(x_4yr_labs))
#| label: fig-q3a-ex4
#| fig-cap: "Changing the display of the presidential terms by customizing colours, axes and labels"
data("presidential")
# Creating a vector of years where a new president takes office
# to allow plotting it on the x-axis
x_labs =
presidential |>
select(start) |>
as_vector() |>
as_date()
y_labs = seq(
from = 1 + 33,
to = nrow(presidential) + 33,
by = 1
)
g =
presidential |>
as_tibble() |>
mutate(id = 33 + row_number()) |>
ggplot(aes(x = start, xend = end,
y = id, yend = id,
col = party,
label = name)) +
geom_segment(lwd = 10) +
# (a) Combining the two variants that customize colors and x axis breaks.
scale_color_manual(values = c("Democratic" = "blue",
"Republican" = "red")) +
scale_x_continuous(breaks = x_labs,
labels = year(x_labs)) +
# (b) Improving the display of the y axis.
scale_y_reverse(breaks = y_labs,
labels = y_labs) +
# (c) Labeling each term with the name of the president.
geom_text(hjust = -0.05,
vjust = -1.5) +
geom_rect(aes(xmin = start,
xmax = end,
ymin = 33.5,
ymax = 45.5,
fill = party),
alpha = 0.3,
col = NA) +
scale_fill_manual(values = c("Democratic" = "blue",
"Republican" = "red")) +
# (d) Adding informative plot labels.
labs(color = "President's Political Party",
y = "Table of Precedence Number",
x = "Year") +
theme_minimal() +
theme(legend.position = "bottom") +
theme(panel.grid.major.x = element_line(color = "darkgrey"),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.text.y = element_text()) +
guides(fill = "none")
print(g)
---
title: "Chapter 12"
ggplot(diamonds,
aes(x = carat, y = price)) +
geom_point(aes(color = cut),
alpha = 1/20)
ggplot(diamonds,
aes(x = carat, y = price)) +
geom_point(aes(color = cut),
alpha = 1/20) +
theme_light()
?overide.aes()
?guides
?guide_legend
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point(aes(color = cut), alpha = 1/20) +
theme_light() +
guides(color = guide_legend(override.aes = list(alpha = 1)))
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point(aes(color = cut), alpha = 1/20) +
theme_light() +
guides(color = guide_legend(override.aes = list(size = 5,
alpha = 1)))
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point(aes(color = cut), alpha = 1/20) +
theme_light() +
guides(color = guide_legend(override.aes = list(size = 5,
alpha = 0.05)))
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point(aes(color = cut), alpha = 1/20) +
theme_light() +
guides(color = guide_legend(override.aes = list(size = 5,
alpha = 0.5)))
g
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point(aes(color = cut), alpha = 1/20) +
theme_light() +
guides(color = guide_legend(override.aes = list(size = 5,
alpha = 0.5))) +
ggthemes::theme_wsj()
?theme_wsj
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point(aes(color = cut), alpha = 1/20) +
theme_light() +
guides(color = guide_legend(override.aes = list(size = 5,
alpha = 0.5))) +
ggthemes::theme_wsj(color = "gray")
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point(aes(color = cut), alpha = 1/20) +
theme_light() +
guides(color = guide_legend(override.aes = list(size = 5,
alpha = 0.5)))
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point(aes(color = cut), alpha = 1/20) +
theme_light() +
guides(color = guide_legend(override.aes = list(size = 5,
alpha = 0.5))) +
theme(axis.text = element_text(face = "bold",
color = "blue"))
#| label: fig-q2-ex5
#| fig-cap: "Figure make the axis labels blue and bolded."
#| fig-cap-location: top
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point(aes(color = cut), alpha = 1/20) +
theme_light() +
guides(color = guide_legend(override.aes = list(size = 5,
alpha = 0.5))) +
theme(axis.text = element_text(face = "bold",
color = "blue",
size = 8))
element_text()
?element_text
#| label: fig-q2-ex5
#| fig-cap: "Figure make the axis labels blue and bolded."
#| fig-cap-location: top
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point(aes(color = cut), alpha = 1/20) +
theme_light() +
guides(color = guide_legend(override.aes = list(size = 5,
alpha = 0.5))) +
theme(axis.text = element_text(face = "bold",
color = "blue",
size = 18))
#| label: fig-q2-ex5
#| fig-cap: "Figure make the axis labels blue and bolded."
#| fig-cap-location: top
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point(aes(color = cut), alpha = 1/20) +
theme_light() +
guides(color = guide_legend(override.aes = list(size = 5,
alpha = 0.5))) +
theme(axis.text = element_text(face = "bold",
color = "blue",
size = 12))
p1 <- ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
labs(title = "Plot 1")
p2 <- ggplot(mpg, aes(x = drv, y = hwy)) +
geom_boxplot() +
labs(title = "Plot 2")
p3 <- ggplot(mpg, aes(x = cty, y = hwy)) +
geom_point() +
labs(title = "Plot 3")
(p1 | p2) / p3
p1 <- ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
labs(title = "Plot 1")
p2 <- ggplot(mpg, aes(x = drv, y = hwy)) +
geom_boxplot() +
labs(title = "Plot 2")
p3 <- ggplot(mpg, aes(x = cty, y = hwy)) +
geom_point() +
labs(title = "Plot 3")
p1 | p2 / p3
#| label: fig-q1-ex6
#| fig-cap: "Plot produced by the code given in the question"
p1 <- ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
labs(title = "Plot 1")
p2 <- ggplot(mpg, aes(x = drv, y = hwy)) +
geom_boxplot() +
labs(title = "Plot 2")
p3 <- ggplot(mpg, aes(x = cty, y = hwy)) +
geom_point() +
labs(title = "Plot 3")
(p1 | p2) / p3
#| label: @fig-q1a-ex6
#| fig-cap: "Plot produced by the code when the parenthesis are omitted"
p1 <- ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
labs(title = "Plot 1")
p2 <- ggplot(mpg, aes(x = drv, y = hwy)) +
geom_boxplot() +
labs(title = "Plot 2")
p3 <- ggplot(mpg, aes(x = cty, y = hwy)) +
geom_point() +
labs(title = "Plot 3")
p1 | p2 / p3
p1 / (p2 | p3)
p1 / (p2 | p3) +
plot_annotation(tag_levels = paste0("Fig. ", 'A'))
p1 / (p2 | p3) +
plot_annotation(tag_levels = 'A')
p1 / (p2 | p3) +
plot_annotation(tag_levels = 'A',
tag_prefix = "Fig. ")
