patterns = c(
area_code = "[0-9]+",
"-| ",
exchange_code = "[0-9]+",
"-| ",
line_number = "[0-9]+"
)
) |>
gt() |>
gtExtras::gt_theme_538() |>
cols_label_with(fn = ~ janitor::make_clean_names(., case = "title"))
phone <- regex(
r"(
\(?     # optional opening parens
(\d{3}) # area code
[)\-]?  # optional closing parens or dash
\ ?     # optional space
(\d{3}) # another three numbers
[\ -]?  # optional space or dash
(\d{4}) # four more numbers
)",
comments = TRUE
)
str_extract(telephone_numbers, phone)
phone <- regex(
"(
\(?     # optional opening parens
phone <- regex(
r"(
\(?     # optional opening parens
(\d{3}) # area code
[)\-]?  # optional closing parens or dash
\ ?     # optional space
(\d{3}) # another three numbers
[\ -]?  # optional space or dash
(\d{4}) # four more numbers
)",
comments = TRUE
)
phone
str_extract(telephone_numbers, phone)
words[str_detect(^x) | str_detect(x$)]
words[str_detect(words, ^x) | str_detect(words, x$)]
words[str_detect(words, "^x") | str_detect(words, "x$")]
str_detect(words, "^x")
str_detect(words, "x$")
words[str_detect(words, "^xX") | str_detect(words, "x$")]
words[str_detect(words, "^xX")]
words
# Using a singular regular expression
str_detect(words, "\\b\\w*x\\w*\\b")
# Using a singular regular expression
str_view(words, "\\b\\w*x\\w*\\b")
# Using a singular regular expression
str_view(words, "\\bx\\w*\\b")
# Using a singular regular expression
str_view(words, "\\bx.*\\b")
# Using a singular regular expression
str_view(words, "\\b(x|\\b)\\w*")
# Using a singular regular expression
str_view(words, "(^xX)|(x$")
# Using a singular regular expression
str_view(words, "(^xX)|(x$)")
words[str_detect(words, "^xX") | str_detect(words, "x$")]
words |>
str_view("^(?i)[aeiouy].*[bcdfghjklmnpqrstvwxyz]$")
pattern_b = "^(?i)[aeiouy].*[bcdfghjklmnpqrstvwxyz]$"
?str_subset
str_subset(words, pattern_b)
pattern_b = "^(?i)[aeiou].*[bcdfghjklmnpqrstvwxyz]$"
str_subset(words, pattern_b)
# Using a combination of multiple str_detect() calls
words[
str_detect(words, "^(?i)[aeiou]") &
str_detect(words, "[^aeiou]$")
]
# Using a singular regular expression
pattern_b = "^(?i)[aeiou].*[^aeiou]$"
str_subset(words, pattern_b)
pattern_c = "^(?=.*a)(?=.*e)(?=.*i)(?=.*o)(?=.*u).+"
str_subset(words, pattern_c)
data(package = "datasets")$results[, "Item"]
euro
sunspots
sunspots |>
as_tibble() |>
pivot_longer(names_to = "Month",
values_to = "Value")
sunspots |>
as_tibble() |>
pivot_longer(
cols = everything(),
names_to = "Month",
values_to = "Value")
sunspots |>
as_tibble()
class(sunspots)
sunspots |>
as.matrix()
pattern1 = "\\b\\w*ie\\w*\\b"
pattern1 = "\\b\\w*ie\\w*\\b"
pattern_2a = "\\b\\w*cei\\w*\\b"
pattern_2b = "\\b\\w*cie\\w*\\b"
pattern_1 = "\\b\\w*ie\\w*\\b"
pattern_2a = "\\b\\w*cei\\w*\\b"
pattern_2b = "\\b\\w*cie\\w*\\b"
words[str_detect(words, pattern_1)]
words[str_detect(words, pattern_2a)]
words[str_detect(words, pattern_2b)]
pattern_1a = "\\b\\w*ie\\w*\\b"
pattern_1b = "\\b\\w*ei\\w*\\b"
pattern_2a = "\\b\\w*cei\\w*\\b"
pattern_2b = "\\b\\w*cie\\w*\\b"
words[str_detect(words, pattern_1a)]
words[str_detect(words, pattern_1b)]
words[str_detect(words, pattern_1a)]
words[str_detect(words, pattern_1b)]
pattern_1b = "\\b\\w+ei\\w*\\b"
# Words which contain
words[str_detect(words, pattern_1b)]
# Words which contain "i" before "e"
words[str_detect(words, pattern_1a)]
# Words which contain "e" before an "i"
words[str_detect(words, pattern_1b)]
# Words which contain "e" before an "i" after "c", thus following the rule.
# That is, evidence in favour of the rule
words[str_detect(words, pattern_2a)]
# Words which contain an "i" before "e" after "c", thus violating the rule.
# That is, evidence against the rule
words[str_detect(words, pattern_2b)]
# Words which contain "e" before an "i"
words[str_detect(words, pattern_1b)]
# Words which contain "e" before an "i", thus giving evidence against the rule
words[str_detect(words, pattern_1b)]
# Words which contain "e" before an "i" after "c", thus following the rule.
# That is, evidence in favour of the rule
words[str_detect(words, pattern_2a)]
# Words which contain an "i" before "e" after "c", thus violating the rule.
# That is, evidence against the rule
words[str_detect(words, pattern_2b)]
pattern_1b = "\\b\\w+[^c]ei\\w*\\b"
# Words which contain "e" before an "i", thus giving evidence against the rule
words[str_detect(words, pattern_1b)]
pattern_1b = "\\b\\w+ei\\w*\\b"
# Words which contain "e" before an "i", thus giving evidence against the rule
words[str_detect(words, pattern_1b)]
words[str_detect(words, "\\b\\w*(?!c)ei\\w*\\b")]
words[str_detect(words, "\\b\\w*cie\\w*\\b")]
words[str_detect(words, "\\b\\w*cie\\w*\\b")]
col_vec = colours()
col_vec
?colours
col_vec = colours(distinct = TRUE)
col_vec
col_vec = col_vec[str_detect(col_vec, "\\b\\w*\\d\\w*\\b")]
col_vec = colours(distinct = TRUE)
col_vec[str_detect(col_vec, "\\b\\w*\\d\\w*\\b")]
col_vec[!str_detect(col_vec, "\\b\\w*\\d\\w*\\b")]
col_vec = col_vec[!str_detect(col_vec, "\\b\\w*\\d\\w*\\b")]
col_vec
col_vec[str_detect(col_vec, "\\b(?:light|dark)\\w*\\b")]
data(package = "datasets")$results[, "Item"]
data(package = "datasets")$results[, "Item"] |>
class()
r_packs = data(package = "datasets")$results[, "Item"]
base_r_packs = data(package = "datasets")$results[, "Item"]
str_replace_all(base_r_packs,
pattern = "\\([^()]+\\)",
replacement = "")
base_r_packs = data(package = "datasets")$results[, "Item"]
str_replace_all(base_r_packs,
pattern = "\\([^()]+\\)",
replacement = "")
# Remove all the names of grouping data.frames in parenthesis
base_r_packs = str_replace_all(base_r_packs,
pattern = "\\([^()]+\\)",
replacement = "")
huge_regex = str_c("\\b(", str_flatten(base_r_packs, "|"), ")\\b")
huge_regex
# Extract all base R datasets into a character vector
base_r_packs = data(package = "datasets")$results[, "Item"]
base_r_packs
# Remove all the names of grouping data.frames in parenthesis
base_r_packs = str_replace_all(base_r_packs,
pattern = "\\([^()]+\\)",
replacement = "")
base_r_packs
base_r_packs = str_replace_all(base_r_packs,
pattern = "\\s+$",
replacement = "")
base_r_packs
str_view(string = data(package = "datasets")$results[, "Item"],
pattern = huge_regex)
vignette("regular-expressions", package = "stringr")
library(tidyverse)
library(gt)
data("gss_cat")
View(gss_cat)
gss_cat
gss_cat |>
ggplot(aes(x = rincome)) +
geom_bar()
gss_cat |>
ggplot(aes(y = rincome)) +
geom_bar()
gss_cat |>
ggplot(aes(y = rincome)) +
geom_bar() +
theme_minimal()
gss_cat |>
ggplot(aes(y = rincome)) +
geom_bar() +
theme_minimal() +
labs(x = "Number of respondents", y = NULL,
title = "Income Levels of respondents in General Social Survey")
library(ggthemes)
gss_cat |>
ggplot(aes(y = rincome)) +
geom_bar() +
theme_tufte() +
labs(x = "Number of respondents", y = NULL,
title = "Income Levels of respondents in General Social Survey")
gss_cat |>
ggplot(aes(y = rincome)) +
geom_bar() +
theme_clean() +
labs(x = "Number of respondents", y = NULL,
title = "Income Levels of respondents in General Social Survey")
gss_cat |>
ggplot(aes(y = rincome)) +
geom_bar() +
theme_calc() +
labs(x = "Number of respondents", y = NULL,
title = "Income Levels of respondents in General Social Survey")
gss_cat |>
ggplot(aes(y = rincome)) +
geom_bar() +
theme_minimal() +
labs(x = "Number of respondents", y = NULL,
title = "Income Levels of respondents in General Social Survey")
gss_cat |>
ggplot(aes(y = rincome)) +
geom_bar() +
theme_minimal() +
labs(x = "Number of respondents", y = NULL,
title = "Income Levels of respondents in General Social Survey") +
scale_x_continuous(limits = c(0,8000))
gss_cat |>
ggplot(aes(y = rincome)) +
geom_bar() +
theme_minimal() +
labs(x = "Number of respondents", y = NULL,
title = "Income Levels of respondents in General Social Survey")
?fct_relevel
levels(gss_cat$rincome)
gss_cat |>
ggplot(aes(y = ftc_relevel(rincome,
"Not applicable",
after = "Refused"))) +
geom_bar() +
theme_minimal() +
labs(x = "Number of respondents", y = NULL,
title = "Income Levels of respondents in General Social Survey")
gss_cat |>
ggplot(aes(y = fct_relevel(rincome,
"Not applicable",
after = "Refused"))) +
geom_bar() +
theme_minimal() +
labs(x = "Number of respondents", y = NULL,
title = "Income Levels of respondents in General Social Survey")
gss_cat |>
ggplot(aes(y = fct_relevel(rincome,
"Not applicable",
"Refused"))) +
geom_bar() +
theme_minimal() +
labs(x = "Number of respondents", y = NULL,
title = "Income Levels of respondents in General Social Survey")
gss_cat |>
ggplot(aes(y = fct_relevel(rincome,
"Not applicable",
"$25000 or more"))) +
geom_bar() +
theme_minimal() +
labs(x = "Number of respondents", y = NULL,
title = "Income Levels of respondents in General Social Survey")
gss_cat |>
ggplot(aes(y = fct_relevel(rincome,
"Not applicable"))) +
geom_bar() +
theme_minimal() +
labs(x = "Number of respondents", y = NULL,
title = "Income Levels of respondents in General Social Survey")
?fct_relevel
after = 12) +
gss_cat |>
ggplot(aes(y = fct_relevel(rincome,
"Not applicable",
after = 12))) +
geom_bar() +
theme_minimal() +
labs(x = "Number of respondents", y = NULL,
title = "Income Levels of respondents in General Social Survey")
gss_cat |>
ggplot(aes(y = fct_relevel(rincome,
"Not applicable",
after = 3))) +
geom_bar() +
theme_minimal() +
labs(x = "Number of respondents", y = NULL,
title = "Income Levels of respondents in General Social Survey")
gss_cat |>
ggplot(aes(y = fct_relevel(rincome,
"Not applicable",
after = 3))) +
geom_bar() +
theme_minimal() +
labs(x = "Number of respondents", y = NULL,
title = "Income Levels of respondents in General Social Survey") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
levels(gss_cat$rincome)
levels(gss_cat$rincome)[1:3, -1]
levels(gss_cat$rincome)[1:3, Inf]
levels(gss_cat$rincome)[1:3]
levels(gss_cat$rincome)[1:3, 16]
levels(gss_cat$rincome)[1:3, 15]
levels(gss_cat$rincome)[c(1:3, 15)]
levels(gss_cat$rincome)[c(1:3, 16)]
no_levels = levels(gss_cat$rincome)[c(1:3, 16)]
gss_cat |>
mutate(col_level = rincome %in% no_levels) |>
ggplot(aes(y = fct_relevel(rincome,
"Not applicable",
after = 3),
fill = col_level)) +
geom_bar() +
theme_minimal() +
labs(x = "Number of respondents", y = NULL,
title = "Income Levels of respondents in General Social Survey") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
gss_cat |>
mutate(col_level = rincome %in% no_levels) |>
ggplot(aes(y = fct_relevel(rincome,
"Not applicable",
after = 3),
fill = col_level)) +
geom_bar() +
theme_minimal() +
labs(x = "Number of respondents", y = NULL,
title = "Income Levels of respondents in General Social Survey") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
scale_fill_manual(values = c("darkgrey", "lightgrey"))
gss_cat |>
mutate(col_level = rincome %in% no_levels) |>
ggplot(aes(y = fct_relevel(rincome,
"Not applicable",
after = 3),
fill = col_level)) +
geom_bar() +
theme_minimal() +
labs(x = "Number of respondents", y = NULL,
title = "Income Levels of respondents in General Social Survey") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
scale_fill_manual(values = c("#3d3b3b", "#999494"))
gss_cat |>
mutate(col_level = rincome %in% no_levels) |>
ggplot(aes(y = fct_relevel(rincome,
"Not applicable",
after = 3),
fill = col_level)) +
geom_bar() +
theme_minimal() +
labs(x = "Number of respondents", y = NULL,
title = "Income Levels of respondents in General Social Survey") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none") +
scale_fill_manual(values = c("#3d3b3b", "#999494"))
gss_cat |>
count(relig, sort = TRUE)
gss_cat |>
count(partyid, sort = TRUE)
table(gss_cat$relig, gss_cat$denom)
gss_cat |>
group_by(relig) |>
count(denom)
gss_cat |>
group_by(relig) |>
n_distinct(denom)
gss_cat |>
group_by(relig) |>
summarise(n = n_distinct(denom))
gss_cat |>
group_by(relig) |>
summarise(n = n_distinct(denom)) |>
arrange(desc(n))
gss_cat |>
group_by(relig) |>
summarise(n = n_distinct(denom)) |>
arrange(desc(n)) |>
filter(n > 1)
gss_cat |>
filter(relig %in% c("Protestant", "Christian", "Other"))
gss_cat |>
filter(relig %in% c("Protestant", "Christian", "Other")) |>
group_by(relig, denom) |>
count()
gss_cat |>
filter(relig %in% c("Protestant", "Christian", "Other")) |>
group_by(relig, denom) |>
count(sort = TRUE)
gss_cat |>
filter(relig %in% c("Protestant", "Christian", "Other")) |>
group_by(relig, denom) |>
count(sort = TRUE) |>
tally()
gss_cat |>
filter(relig %in% c("Protestant", "Christian", "Other")) |>
group_by(relig, denom) |>
count(sort = TRUE)
gss_cat |>
filter(relig %in% c("Protestant", "Christian", "Other")) |>
group_by(relig, denom) |>
count(sort = TRUE)
gss_cat |>
filter(relig %in% c("Protestant", "Christian", "Other")) |>
group_by(relig, denom) |>
tally() |>
spread(relig, n)
gss_cat |>
filter(relig %in% c("Protestant", "Christian", "Other")) |>
group_by(relig, denom) |>
tally() |>
spread(denom, n)
gss_cat |>
filter(relig %in% c("Protestant", "Christian", "Other")) |>
group_by(relig, denom) |>
tally() |>
spread(relig, n)
gss_cat |>
filter(relig %in% c("Protestant", "Christian", "Other")) |>
group_by(relig, denom) |>
tally() |>
spread(relig, n)
gss_cat |>
filter(relig %in% c("Protestant", "Christian", "Other")) |>
group_by(relig, denom) |>
tally() |>
spread(relig, n) |>
arrange(desc(Christian))
gss_cat |>
filter(relig %in% c("Protestant", "Christian", "Other")) |>
group_by(relig, denom) |>
tally() |>
spread(relig, n) |>
arrange(desc(Christian)) |>
gt() |>
gt_theme_538()
gss_cat |>
filter(relig %in% c("Protestant", "Christian", "Other")) |>
group_by(relig, denom) |>
tally()
gss_cat |>
group_by(relig) |>
summarise(n = n_distinct(denom)) |>
arrange(desc(n))
gss_cat |>
group_by(relig) |>
summarise(n = n_distinct(denom)) |>
arrange(desc(n)) |>
ggplot(aes(y = relig, x = n)) +
geom_bar(stat = "identity") +
theme_tufte()
gss_cat |>
group_by(relig) |>
summarise(n = n_distinct(denom)) |>
arrange(desc(n)) |>
ggplot(aes(y = reorder(relig, n), x = n)) +
geom_bar(stat = "identity") +
theme_tufte()
gss_cat |>
group_by(relig) |>
summarise(n = n_distinct(denom)) |>
arrange(desc(n)) |>
ggplot(aes(y = reorder(relig, n), x = n)) +
geom_bar(stat = "identity") +
theme_tufte() +
labs(x = "Number of denominations", y = NULL,
title = "Only Protestant religion has demoninations within it")
gss_cat |>
group_by(relig) |>
summarise(n = n_distinct(denom)) |>
arrange(desc(n)) |>
ggplot(aes(y = reorder(relig, n), x = n)) +
geom_bar(stat = "identity") +
theme_void() +
labs(x = "Number of denominations", y = NULL,
title = "Only Protestant religion has demoninations within it")
gss_cat |>
group_by(relig) |>
summarise(n = n_distinct(denom)) |>
arrange(desc(n)) |>
ggplot(aes(y = reorder(relig, n), x = n)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(x = "Number of denominations", y = NULL,
title = "Only Protestant religion has demoninations within it")
