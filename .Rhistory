) |>
ggplot(aes(x = x_start,
y = y_start,
xend = x_end,
yend = y_end)) +
geom_segment()
tibble(
x_start = c(1, 2, 3, 4),
y_start = c(1, 3, 2, 4),
x_end = c(2, 4, 3, 5),
y_end = c(3, 1, 4, 2)
) |>
ggplot(aes(x = x_start,
y = y_start,
xend = x_end,
yend = y_end)) +
geom_segment()
angle <- seq(0, 7/4 * pi, length.out = 8)  # Angles for 8 directions
arrow_length <- 0.8
data <- data.frame(
x_start = rep(0, 8),             # Common starting point
y_start = rep(0, 8),
x_end = cos(angle) * arrow_length,  # Calculate end points based on angles
y_end = sin(angle) * arrow_length
) |>
ggplot(aes(x = x_start,
y = y_start,
xend = x_end,
yend = y_end)) +
geom_segment()
data.frame(
x_start = rep(0, 8),             # Common starting point
y_start = rep(0, 8),
x_end = cos(angle) * arrow_length,  # Calculate end points based on angles
y_end = sin(angle) * arrow_length
) |>
ggplot(aes(x = x_start,
y = y_start,
xend = x_end,
yend = y_end)) +
geom_segment()
angle = seq(0, 7/4 * pi, length.out = 8)  # Angles for 8 directions
arrow_length = 0.8
tibble(
x_start = rep(0, 8),                 # Common starting point
y_start = rep(0, 8),
x_end = cos(angle) * arrow_length,   # Calculate end points based on angles
y_end = sin(angle) * arrow_length
) |>
ggplot(aes(x = x_start,
y = y_start,
xend = x_end,
yend = y_end)) +
geom_segment()
rep(0, 8)
seq(0, 7/4 * pi, length.out = 8)
cos(angle) * arrow_length
angle = seq(0, 7/4 * pi, length.out = 24)  # Angles for 8 directions
arrow_length = 0.8
tibble(
x_start = rep(0, 8),                 # Common starting point
y_start = rep(0, 8),
x_end = cos(angle) * arrow_length,   # Calculate end points based on angles
y_end = sin(angle) * arrow_length
) |>
ggplot(aes(x = x_start,
y = y_start,
xend = x_end,
yend = y_end)) +
geom_segment()
nos = 8
angle = seq(0, 7/4 * pi, length.out = nos)  # Angles for 8 directions
arrow_length = 0.8
tibble(
x_start = rep(0, nos),                 # Common starting point
y_start = rep(0, nos),
x_end = cos(angle) * arrow_length,   # Calculate end points based on angles
y_end = sin(angle) * arrow_length
) |>
ggplot(aes(x = x_start,
y = y_start,
xend = x_end,
yend = y_end)) +
geom_segment()
nos = 24
angle = seq(0, 7/4 * pi, length.out = nos)  # Angles for 8 directions
arrow_length = 0.8
tibble(
x_start = rep(0, nos),                 # Common starting point
y_start = rep(0, nos),
x_end = cos(angle) * arrow_length,   # Calculate end points based on angles
y_end = sin(angle) * arrow_length
) |>
ggplot(aes(x = x_start,
y = y_start,
xend = x_end,
yend = y_end)) +
geom_segment()
?arrow
tibble(
x_start = rep(0, nos),                 # Common starting point
y_start = rep(0, nos),
x_end = cos(angle) * arrow_length,   # Calculate end points based on angles
y_end = sin(angle) * arrow_length
) |>
ggplot(aes(x = x_start,
y = y_start,
xend = x_end,
yend = y_end)) +
geom_segment(arrow = arrow(ends = "last"))
nos = 16
angle = seq(0, 7/4 * pi, length.out = nos)  # Angles for 8 directions
arrow_length = 0.8
g = tibble(
x_start = rep(0, nos),              # Common starting point
y_start = rep(0, nos),
x_end = cos(angle) * arrow_length,  # Calculate end points based on angles
y_end = sin(angle) * arrow_length
) |>
ggplot(aes(x = x_start,
y = y_start,
xend = x_end,
yend = y_end))
nos = 16
angle = seq(0, 7/4 * pi, length.out = nos)  # Angles for 8 directions
arrow_length = 0.8
g = tibble(
x_start = rep(0, nos),              # Common starting point
y_start = rep(0, nos),
x_end = cos(angle) * arrow_length,  # Calculate end points based on angles
y_end = sin(angle) * arrow_length
) |>
ggplot(aes(x = x_start,
y = y_start,
xend = x_end,
yend = y_end))
gridExtra::grid.arrange(
g + geom_segment(arrow = arrow(ends = "last")) +
labs(subtitle = "arrow(ends = last)"),
g + geom_segment(arrow = arrow(ends = "first")) +
labs(subtitle = "arrow(ends = first)"),
g + geom_segment(arrow = arrow(ends = "both")) +
labs(subtitle = "arrow(ends = both)"),
ncol = 3
)
nos = 16
angle = seq(0, 7/4 * pi, length.out = nos)  # Angles for 8 directions
arrow_length = 0.8
g = tibble(
x_start = rep(0, nos),              # Common starting point
y_start = rep(0, nos),
x_end = cos(angle) * arrow_length,  # Calculate end points based on angles
y_end = sin(angle) * arrow_length
) |>
ggplot(aes(x = x_start,
y = y_start,
xend = x_end,
yend = y_end)) +
theme_void()
gridExtra::grid.arrange(
g + geom_segment(arrow = arrow(ends = "last")) +
labs(subtitle = "arrow(ends = last)"),
g + geom_segment(arrow = arrow(ends = "first")) +
labs(subtitle = "arrow(ends = first)"),
g + geom_segment(arrow = arrow(ends = "both")) +
labs(subtitle = "arrow(ends = both)"),
ncol = 3
)
nos = 24
angle = seq(0, 7/4 * pi, length.out = nos)  # Angles for 8 directions
arrow_length = 0.8
g = tibble(
x_start = rep(0, nos),              # Common starting point
y_start = rep(0, nos),
x_end = cos(angle) * arrow_length,  # Calculate end points based on angles
y_end = sin(angle) * arrow_length
) |>
ggplot(aes(x = x_start,
y = y_start,
xend = x_end,
yend = y_end)) +
theme_void()
gridExtra::grid.arrange(
g + geom_segment(arrow = arrow(ends = "last")) +
labs(subtitle = "arrow(ends = last)"),
g + geom_segment(arrow = arrow(ends = "first")) +
labs(subtitle = "arrow(ends = first)"),
g + geom_segment(arrow = arrow(ends = "both")) +
labs(subtitle = "arrow(ends = both)"),
ncol = 3
)
nos = 8
angle = seq(0, 7/4 * pi, length.out = nos)  # Angles for 8 directions
arrow_length = 0.8
g = tibble(
x_start = rep(0, nos),              # Common starting point
y_start = rep(0, nos),
x_end = cos(angle) * arrow_length,  # Calculate end points based on angles
y_end = sin(angle) * arrow_length
) |>
ggplot(aes(x = x_start,
y = y_start,
xend = x_end,
yend = y_end)) +
theme_void()
gridExtra::grid.arrange(
g + geom_segment(arrow = arrow(ends = "last")) +
labs(subtitle = "arrow(ends = last)"),
g + geom_segment(arrow = arrow(ends = "first")) +
labs(subtitle = "arrow(ends = first)"),
g + geom_segment(arrow = arrow(ends = "both")) +
labs(subtitle = "arrow(ends = both)"),
ncol = 3
)
nos = 8
angle = seq(0, 7/4 * pi, length.out = nos)  # Angles for 8 directions
arrow_length = 0.8
g = tibble(
x_start = rep(0, nos),              # Common starting point
y_start = rep(0, nos),
x_end = cos(angle) * arrow_length,  # Calculate end points based on angles
y_end = sin(angle) * arrow_length
) |>
ggplot(aes(x = x_start,
y = y_start,
xend = x_end,
yend = y_end)) +
theme_void()
gridExtra::grid.arrange(
g + geom_segment(arrow = arrow(ends = "last")) +
labs(subtitle = "arrow(ends = last)"),
g + geom_segment(arrow = arrow(ends = "first")) +
labs(subtitle = "arrow(ends = first)"),
g + geom_segment(arrow = arrow(ends = "both")) +
labs(subtitle = "arrow(ends = both)"),
g + geom_segment(arrow = arrow(type = "open")) +
labs(subtitle = "arrow(type = open)"),
g + geom_segment(arrow = arrow(type = "closed")) +
labs(subtitle = "arrow(type = closed)"),
ncol = 3
)
gridExtra::grid.arrange(
g + geom_segment(arrow = arrow(type = "open")) +
labs(subtitle = "arrow(type = open)"),
g + geom_segment(arrow = arrow(type = "closed")) +
labs(subtitle = "arrow(type = closed)"),
g + geom_segment(arrow = arrow(angle = 15)) +
labs(subtitle = "arrow(angle = 15)"),
g + geom_segment(arrow = arrow(angle = 90)) +
labs(subtitle = "arrow(angle = 90)"),
g + geom_segment(arrow = arrow(ends = "first")) +
labs(subtitle = "arrow(ends = first)"),
g + geom_segment(arrow = arrow(ends = "both")) +
labs(subtitle = "arrow(ends = both)"),
g + geom_segment(arrow = arrow(ends = "last")) +
labs(subtitle = "arrow(ends = last)"),
g + geom_segment(arrow = arrow(ends = "first")) +
labs(subtitle = "arrow(ends = first)"),
g + geom_segment(arrow = arrow(ends = "both")) +
labs(subtitle = "arrow(ends = both)"),
ncol = 3
)
nos = 8
angle = seq(0, 7/4 * pi, length.out = nos)  # Angles for 8 directions
arrow_length = 0.8
g = tibble(
x_start = rep(0, nos),              # Common starting point
y_start = rep(0, nos),
x_end = cos(angle) * arrow_length,  # Calculate end points based on angles
y_end = sin(angle) * arrow_length
) |>
ggplot(aes(x = x_start,
y = y_start,
xend = x_end,
yend = y_end)) +
theme_void()
gridExtra::grid.arrange(
g + geom_segment(arrow = arrow(type = "open")) +
labs(subtitle = "arrow(type = open)"),
g + geom_segment(arrow = arrow(type = "closed")) +
labs(subtitle = "arrow(type = closed)"),
g + geom_segment(arrow = arrow(angle = 15)) +
labs(subtitle = "arrow(angle = 15)"),
g + geom_segment(arrow = arrow(angle = 90)) +
labs(subtitle = "arrow(angle = 90)"),
g + geom_segment(arrow = arrow(ends = "first")) +
labs(subtitle = "arrow(ends = first)"),
g + geom_segment(arrow = arrow(ends = "last")) +
labs(subtitle = "arrow(ends = last)"),
g + geom_segment(arrow = arrow(ends = "both")) +
labs(subtitle = "arrow(ends = both)"),
g + geom_segment(arrow = arrow(length = unit(0.5, "inches"))) +
labs(subtitle = "arrow(length = unit(0.5, inches)"),
g + geom_segment(arrow = arrow(length = unit(0.1, "inches"))) +
labs(subtitle = "arrow(length = unit(0.1, inches)"),
ncol = 3
)
nos = 8
angle = seq(0, 7/4 * pi, length.out = nos)  # Angles for 8 directions
arrow_length = 0.8
g = tibble(
x_start = rep(0, nos),              # Common starting point
y_start = rep(0, nos),
x_end = cos(angle) * arrow_length,  # Calculate end points based on angles
y_end = sin(angle) * arrow_length
) |>
ggplot(aes(x = x_start,
y = y_start,
xend = x_end,
yend = y_end)) +
theme_void()
gridExtra::grid.arrange(
g + geom_segment(arrow = arrow(type = "open")) +
labs(subtitle = "arrow(type = open)"),
g + geom_segment(arrow = arrow(type = "closed")) +
labs(subtitle = "arrow(type = closed)"),
g + geom_segment(arrow = arrow(angle = 15)) +
labs(subtitle = "arrow(angle = 15)"),
g + geom_segment(arrow = arrow(angle = 90)) +
labs(subtitle = "arrow(angle = 90)"),
g + geom_segment(arrow = arrow(ends = "first")) +
labs(subtitle = "arrow(ends = first)"),
g + geom_segment(arrow = arrow(ends = "last")) +
labs(subtitle = "arrow(ends = last)"),
g + geom_segment(arrow = arrow(ends = "both")) +
labs(subtitle = "arrow(ends = both)"),
g + geom_segment(arrow = arrow(length = unit(1, "cm"))) +
labs(subtitle = "arrow(length = unit(1, cm)"),
g + geom_segment(arrow = arrow(length = unit(0.5, "cm"))) +
labs(subtitle = "arrow(length = unit(0.5, cm)"),
ncol = 3
)
#| label: fig-q5-ex3
#| fig-cap: "Customizing the arrows in geom_segment() using the 4 main arguments to arrow()"
#| fig-cap-location: top
#| fig-asp: 1
nos = 8                                     # Number of spokes to create
angle = seq(0, 7/4 * pi, length.out = nos)  # Angles for 8 directions
arrow_length = 0.8                          # Length of line segment
g = tibble(
x_start = rep(0, nos),              # Common starting point
y_start = rep(0, nos),
x_end = cos(angle) * arrow_length,  # Calculate end points based on angles
y_end = sin(angle) * arrow_length
) |>
ggplot(aes(x = x_start,
y = y_start,
xend = x_end,
yend = y_end)) +
theme_void()
gridExtra::grid.arrange(
g + geom_segment(arrow = arrow(type = "open")) +
labs(subtitle = "arrow(type = open)"),
g + geom_segment(arrow = arrow(type = "closed")) +
labs(subtitle = "arrow(type = closed)"),
g + geom_segment(arrow = arrow(angle = 15)) +
labs(subtitle = "arrow(angle = 15)"),
g + geom_segment(arrow = arrow(angle = 90)) +
labs(subtitle = "arrow(angle = 90)"),
g + geom_segment(arrow = arrow(ends = "first")) +
labs(subtitle = "arrow(ends = first)"),
g + geom_segment(arrow = arrow(ends = "last")) +
labs(subtitle = "arrow(ends = last)"),
g + geom_segment(arrow = arrow(ends = "both")) +
labs(subtitle = "arrow(ends = both)"),
g + geom_segment(arrow = arrow(length = unit(1, "cm"))) +
labs(subtitle = "arrow(length = unit(1, cm)"),
g + geom_segment(arrow = arrow(length = unit(0.5, "cm"))) +
labs(subtitle = "arrow(length = unit(0.5, cm)"),
ncol = 3
)
?geom_label
#| label: fig-q3c-ex3
#| fig-cap: "Scatter-plot of highway mileage vs. horsepower, for different body type of cars - with different annotations in each facet"
#| code-fold: true
#| fig-width: 8
annt_con = "Convertibles generally have lower HP"
annt_cup = "Fuel efficiency decreases with rising HP"
annt_sed = "Sedans generally have lower HP"
annt_hbk = "Data-set has only two hatchbacks"
annt_df = tibble(
bdy_style = as_vector(distinct(gtcars, bdy_style)),
annt = str_wrap(c(annt_con, annt_cup, annt_sed, annt_hbk),
width = 15),
x_annt = 800,
y_annt = 27.5
) |>
mutate(bdy_style = str_to_title(bdy_style))
gtcars |>
# Cosmetic improvements for labelling in plot
mutate(bdy_style = str_to_title(bdy_style)) |>
mutate(drivetrain = case_when(
drivetrain == "awd" ~ "All-Wheel Drive",
drivetrain == "rwd" ~ "Rear-Wheel Drive"
)) |>
ggplot(aes(x = hp,
y = mpg_h,
color = drivetrain)) +
geom_point(size = 1.5) +
# To make mpg_h comparable visually across facets,
# we select layout of 4 columns
facet_wrap(~bdy_style, ncol = 4) +
geom_label(
data = annt_df,
mapping = aes(x = x_annt,
y = y_annt,
label = annt),
color = "#454647",
fontface = "bold",
label.size = 0.1
) +
theme_light() +
theme(legend.position = "bottom") +
labs(x = "Horsepower",
y = "Highway Fuel efficiency (miles per gallon)",
color = "Car's drivetrain",
title = "Higher HP lowers highway mileage",
caption = "Data grom gt package (gtcars)")
#| label: fig-q3c-ex3
#| fig-cap: "Scatter-plot of highway mileage vs. horsepower, for different body type of cars - with different annotations in each facet"
#| code-fold: true
#| fig-width: 8
annt_con = "Convertibles generally have lower HP"
annt_cup = "Fuel efficiency decreases with rising HP"
annt_sed = "Sedans generally have lower HP"
annt_hbk = "Data-set has only two hatchbacks"
annt_df = tibble(
bdy_style = as_vector(distinct(gtcars, bdy_style)),
annt = str_wrap(c(annt_con, annt_cup, annt_sed, annt_hbk),
width = 15),
x_annt = 800,
y_annt = 27.5
) |>
mutate(bdy_style = str_to_title(bdy_style))
gtcars |>
# Cosmetic improvements for labelling in plot
mutate(bdy_style = str_to_title(bdy_style)) |>
mutate(drivetrain = case_when(
drivetrain == "awd" ~ "All-Wheel Drive",
drivetrain == "rwd" ~ "Rear-Wheel Drive"
)) |>
ggplot(aes(x = hp,
y = mpg_h,
color = drivetrain)) +
geom_point(size = 1.5) +
# To make mpg_h comparable visually across facets,
# we select layout of 4 columns
facet_wrap(~bdy_style, ncol = 4) +
geom_label(
data = annt_df,
mapping = aes(x = x_annt,
y = y_annt,
label = annt),
color = "#454647",
fontface = "bold",
label.size = 0.1,
size = 5
) +
theme_light() +
theme(legend.position = "bottom") +
labs(x = "Horsepower",
y = "Highway Fuel efficiency (miles per gallon)",
color = "Car's drivetrain",
title = "Higher HP lowers highway mileage",
caption = "Data grom gt package (gtcars)")
#| label: fig-q3c-ex3
#| fig-cap: "Scatter-plot of highway mileage vs. horsepower, for different body type of cars - with different annotations in each facet"
#| code-fold: true
#| fig-width: 8
annt_con = "Convertibles generally have lower HP"
annt_cup = "Fuel efficiency decreases with rising HP"
annt_sed = "Sedans generally have lower HP"
annt_hbk = "Data-set has only two hatchbacks"
annt_df = tibble(
bdy_style = as_vector(distinct(gtcars, bdy_style)),
annt = str_wrap(c(annt_con, annt_cup, annt_sed, annt_hbk),
width = 15),
x_annt = 800,
y_annt = 27.5
) |>
mutate(bdy_style = str_to_title(bdy_style))
gtcars |>
# Cosmetic improvements for labelling in plot
mutate(bdy_style = str_to_title(bdy_style)) |>
mutate(drivetrain = case_when(
drivetrain == "awd" ~ "All-Wheel Drive",
drivetrain == "rwd" ~ "Rear-Wheel Drive"
)) |>
ggplot(aes(x = hp,
y = mpg_h,
color = drivetrain)) +
geom_point(size = 1.5) +
# To make mpg_h comparable visually across facets,
# we select layout of 4 columns
facet_wrap(~bdy_style, ncol = 4) +
geom_label(
data = annt_df,
mapping = aes(x = x_annt,
y = y_annt,
label = annt),
color = "#454647",
fontface = "bold",
label.size = 0.1,
size = 3
) +
theme_light() +
theme(legend.position = "bottom") +
labs(x = "Horsepower",
y = "Highway Fuel efficiency (miles per gallon)",
color = "Car's drivetrain",
title = "Higher HP lowers highway mileage",
caption = "Data grom gt package (gtcars)")
