str_replace("\\)", "") |>
as_tibble() |>
separate_wider_regex(
cols = value,
patterns = c(
area_code = "[0-9]+",
"-| ",
exchange_code = "[0-9]+",
"-| ",
line_number = "[0-9]+"
)
)
telephone_numbers |>
str_replace(" ", "-") |>
str_replace("\\(", "") |>
str_replace("\\)", "") |>
as_tibble() |>
separate_wider_regex(
cols = value,
patterns = c(
area_code = "[0-9]+",
"-| ",
exchange_code = "[0-9]+",
"-| ",
line_number = "[0-9]+"
)
) |>
gt() |>
gt_theme_538() |>
cols_label_with(fn = ~janitor::make_clean_names(case = "title"))
telephone_numbers |>
str_replace(" ", "-") |>
str_replace("\\(", "") |>
str_replace("\\)", "") |>
as_tibble() |>
separate_wider_regex(
cols = value,
patterns = c(
area_code = "[0-9]+",
"-| ",
exchange_code = "[0-9]+",
"-| ",
line_number = "[0-9]+"
)
) |>
gt() |>
gtExtras::gt_theme_538() |>
cols_label_with(fn = ~janitor::make_clean_names(case = "title"))
telephone_numbers |>
str_replace(" ", "-") |>
str_replace("\\(", "") |>
str_replace("\\)", "") |>
as_tibble() |>
separate_wider_regex(
cols = value,
patterns = c(
area_code = "[0-9]+",
"-| ",
exchange_code = "[0-9]+",
"-| ",
line_number = "[0-9]+"
)
) |>
gt() |>
gtExtras::gt_theme_538()
telephone_numbers |>
str_replace(" ", "-") |>
str_replace("\\(", "") |>
str_replace("\\)", "") |>
as_tibble() |>
separate_wider_regex(
cols = value,
patterns = c(
area_code = "[0-9]+",
"-| ",
exchange_code = "[0-9]+",
"-| ",
line_number = "[0-9]+"
)
) |>
make_clean_names(case = "title")
telephone_numbers |>
str_replace(" ", "-") |>
str_replace("\\(", "") |>
str_replace("\\)", "") |>
as_tibble() |>
separate_wider_regex(
cols = value,
patterns = c(
area_code = "[0-9]+",
"-| ",
exchange_code = "[0-9]+",
"-| ",
line_number = "[0-9]+"
)
)
?make_clean_names
cols_label_with(fn = ~ janitor::make_clean_names(., case = "title"))
telephone_numbers |>
str_replace(" ", "-") |>
str_replace("\\(", "") |>
str_replace("\\)", "") |>
as_tibble() |>
separate_wider_regex(
cols = value,
patterns = c(
area_code = "[0-9]+",
"-| ",
exchange_code = "[0-9]+",
"-| ",
line_number = "[0-9]+"
)
) |>
gt() |>
gtExtras::gt_theme_538() |>
cols_label_with(fn = ~ janitor::make_clean_names(., case = "title"))
babynames |>
str_detect(pattern = "\b[Anan].*a\b")
babynames |>
slice_head(n = 50) |>
select(name) |>
as_vector() |>
unname()
babynames |>
slice_head(n = 50) |>
select(name) |>
as_vector() |>
unname() |>
str_detect(pattern = "\b[Anan].*a\b")
babynames |>
slice_head(n = 50) |>
filter(str_detect(pattern = "\b[Anan].*a\b"))
?str_detect
babynames |>
slice_head(n = 50) |>
filter(str_detect(name, pattern = "\b[Anan].*a\b"))
babynames |>
slice_head(n = 50) |>
filter(str_detect(name, pattern = "\b[An].*a\b"))
babynames |>
slice_head(n = 50) |>
filter(str_detect(name, pattern = "[An].*a"))
babynames |>
slice_head(n = 50) |>
select(name) |>
as_vector() |>
str_flatten_comma()
# Define your input string
input_string <- "'\\? How about \"$^$\""
input_string
str_view(input_string)
"'\\? How about \"\\$\\^\\$\""
regex_pattern <- "'\\? How about \"\\$\\^\\$\""
str_view(regex_pattern)
# Use str_detect to check if the string contains the pattern
result <- str_detect(input_string, regex_pattern)
# Print the result
cat("Does the input string contain the pattern? ", result, "\n")
str_detect(input_string, regex_pattern)
input_string = ""'\? How about \"$^$\"""
input_string = "'\\? How about \"$^$\""
input_string
input_string = "\"'\\? How about \"$^$\""
regex_pattern <- "\"\'\\\?"
#| label: setup
library(tidyverse)
library(babynames)
library(gt)
library(gtExtras)
library(janitor)
fruit |> str_view(pattern = "\b(\w)(\w*)\1\1\b")
fruit |> str_view(pattern = "^(..).*\\1$")
fruit |> str_view(pattern = "\b(\w)(\w*)\1\1\b")
?as_tibble
# The string you want to match
input_string <- "'\\"
# The string you want to match
input_string <- "\"'\\"
str_view(input_string)
# Pattern to match the literal string
pattern <- "\"\'\\\\"
str_view(pattern)
str_view(match_pattern)
match_pattern <- "\"\'\\\\"
str_view(match_pattern)
# Use str_detect to check if the string contains the pattern
if (str_detect(input_string, match_pattern)) {
print("Pattern found in the input string.")
} else {
print("Pattern not found in the input string.")
}
# The string you want to match
input_string <- "\"$^$\""
str_view(input_string)
# Pattern to match the literal string
match_pattern <- "\"$^$\""
str_view(match_pattern)
# Pattern to match the literal string
match_pattern <- "\"\$\^\$\""
str_view(match_pattern)
# Use str_detect to check if the string contains the pattern
if (str_detect(input_string, match_pattern)) {
print("Pattern found in the input string.")
} else {
print("Pattern not found in the input string.")
}
# Pattern to match the literal string
match_pattern <- "\"\\$\\^\\$\""
str_view(match_pattern)
# Use str_detect to check if the string contains the pattern
if (str_detect(input_string, match_pattern)) {
print("Pattern found in the input string.")
} else {
print("Pattern not found in the input string.")
}
# The string you want to match
input_string <- "\"$^$\""
str_view(input_string)
# Pattern to match the literal string
match_pattern <- "\"\\$\\^\\$\""
str_view(match_pattern)
# Use str_detect to check if the string contains the pattern
if (str_detect(input_string, match_pattern)) {
print("Pattern found in the input string.")
} else {
print("Pattern not found in the input string.")
}
words |>
str_view(pattern = "^[Yy]")
words |>
str_view(pattern = "^y")
words
words |>
str_view(pattern = "^y")
words |>
str_view(pattern = "?!y")
words |>
str_view(pattern = "!y")
words |>
str_view(pattern = "!^y")
words |>
str_view(pattern = "^!y")
words |>
str_view(pattern = "^(!y)")
words |>
str_view(pattern = "^(?!y)\\w+")
words |>
str_view(pattern = "^(?!y)\\w+") |>
print(n = Inf)
words
words |>
str_view(pattern = "^(?!y)")
words |>
str_view(pattern = "^(?!y)") |>
length()
words |> length()
words |>
str_view(pattern = "^y")
words |>
str_view(pattern = "x$")
words |>
str_view(pattern = "\\b\\w{3}\\b")
words |>
str_view(str_length() == 3)
words |>
str_view(words, str_length == 3)
words |>
str_subset(pattern = str_length(words)==3)
?str_sub
str_length(words)==3
str_subset(words, str_length(words) == 3)
three_let_words = str_length(words) == 3
words[three_let_words]
words[three_let_words] |>
length()
words |>
str_view(pattern = "\\b\\w{3}\\b") |>
length()
words |>
str_view(pattern = "\\b\\w{7,}\\b")
words |>
str_subset(pattern = "\\b\\w{7,}\\b")
# Finding letters exactly three letters long using regex
words |>
str_subset(pattern = "\\b\\w{3}\\b")
# Finding letters exactly three letters long using regex
words |>
str_subset(pattern = "\\b\\w{3}\\b")
words |>
str_subset(pattern = "\\b\\w*[aeiou][^aeiou]\\w*\\b")
words |>
str_view(pattern = "\\b\\w*[aeiou][^aeiou]\\w*\\b")
words |>
str_view(pattern = "\\b\\w*[aeiou][^aeiou]*[aeiou][^aeiou]*\\w*\\b")
words |>
str_view(pattern = "[aeiou][^aeiou]*[aeiou][^aeiou]*")
words |>
str_view(pattern = "[aeiou][^aeiou]*[aeiou][^aeiou]")
words |>
str_view(pattern = "\\b\\w*[aeiou][^aeiou]\\w*\\b")
words |>
str_view(pattern = "\\b\\w*[aeiou][^aeiou]*[aeiou][^aeiou]*\\w*\\b")
words |>
str_view(pattern = "[aeiou][^aeiou]*[aeiou][^aeiou]*")
words |>
str_view(pattern = "[aeiou][^aeiou][aeiou][^aeiou]")
words |>
str_view(pattern = "[aeiou][^aeiou]")
words |>
str_view(pattern = "[aeiou][^aeiou][aeiou][^aeiou]")
words |>
str_view(pattern = "\\b(?:([aeiou][^aeiou])\\1)+\\b")
words |>
str_view(pattern = "\\b(?:([aeiou][^aeiou])\\1)+\\b")
words |>
str_view(pattern = "(?:([aeiou][^aeiou])\\1)+")
words |>
str_view(pattern = "\\b(?:([aeiou][^aeiou])+\\b")
words |>
str_view(pattern = "\\b(?:([aeiou][^aeiou]))+\\b")
words |>
str_view(pattern = "\\b(?:([aeiou][^aeiou])\\2)+\\b")
words |>
str_view(pattern = "\\b(?:([aeiou][^aeiou]))+\\b")
words |>
str_view(pattern = "\\b(?:([aeiou][^aeiou]))+{2}\\b")
words |>
str_view(pattern = "\\b(?:([aeiou][^aeiou]))+\\b")
words |>
str_view(pattern = "\\b(?:[aeiou][^aeiou])+\\b")
words |>
str_view(pattern = "\\b(?:[aeiou][^aeiou]){2}\\b")
words |>
str_view(pattern = "\\b(?:[aeiou][^aeiou]){2-9}\\b")
words |>
str_view(pattern = "\\b(?:[aeiou][^aeiou]){3}\\b")
words |>
str_view(pattern = "\\b(?:[aeiou][^aeiou]){4}\\b")
words |>
str_view(pattern = "\\b(?:[aeiou][^aeiou]){2,}\\b")
words |>
str_view(pattern = "\\b([aeiou][^aeiou]){2,}\\b")
words |>
str_view(pattern = "^(?:[aeiou][^aeiou]){2,}$")
# Sample passage with mixed spellings
text <- "The airplane is made of aluminum. The analog signal is stronger. Don't be an ass. The center is closed for defense training. I prefer a donut, while she likes a doughnut. His hair is gray, but hers is grey. We're modeling a new project. The skeptic will not believe it. Please summarize the report."
# Define the regular expressions
patterns <- c(
"air(?:plane|oplane)",
"alumin(?:um|ium)",
"analog(?:ue)?",
"ass|arse",
"cent(?:er|re)",
"defen(?:se|ce)",
"dou(?:gh)?nut",
"gr(?:a|e)y",
"model(?:ing|ling)",
"skep(?:tic|tic)",
"summar(?:ize|ise)"
)
# Find and highlight the spellings
for (pattern in patterns) {
matches <- str_extract_all(text, pattern)
if (length(matches[[1]]) > 0) {
text <- str_replace_all(text, pattern, paste0("**", matches[[1]], "**"))
}
}
# Print the modified text
cat(text)
str_view(text, patterns)
# Print the modified text
str_view(text)
# Print the modified text
md(text)
# Sample passage with mixed spellings
text <- "The airplane is made of aluminum. The analog signal is stronger. Don't be an ass. The center is closed for defense training. I prefer a donut, while she likes a doughnut. His hair is gray, but hers is grey. We're modeling a new project. The skeptic will not believe it. Please summarize the report."
# Define the regular expressions
patterns <- c(
"air(?:plane|oplane)",
"alumin(?:um|ium)",
"analog(?:ue)?",
"ass|arse",
"cent(?:er|re)",
"defen(?:se|ce)",
"dou(?:gh)?nut",
"gr(?:a|e)y",
"model(?:ing|ling)",
"skep(?:tic|tic)",
"summar(?:ize|ise)"
)
# Find and highlight the spellings
for (pattern in patterns) {
matches <- str_extract_all(text, pattern)
if (length(matches[[1]]) > 0) {
text <- str_replace_all(text, pattern, paste0("**", matches[[1]], "**"))
}
}
# Print the modified text
md(text)
# Print the modified text
md(text) |>
view()
sentence <- "The airplane/aeroplane is flying high."
# Regular expression
pattern <- "air(?:plane|oplane)"
str_view(sentence, pattern)
?str_view
# Regular expression
pattern <- "air(?:plane|oplane)+"
str_view(sentence, pattern)
# Regular expression
pattern <- "air(?:plane|oplane)*"
str_view(sentence, pattern)
# Regular expression
pattern <- "air(?:plane|oplane)"
match <- str_extract(sentence, pattern)
if (!is.na(match)) {
sentence <- str_replace(sentence, pattern, paste0("**", match, "**"))
}
cat(sentence)
# Sample passage with mixed spellings
sample_text <- "The airplane is made of aluminum. The analog signal is stronger. Don't be an ass. The center is closed for defense training. I prefer a donut, while she likes a doughnut. His hair is gray, but hers is grey. We're modeling a new project. The skeptic will not believe it. Please summarize the report."
# Define the regular expressions
patterns_to_detect <- c(
"air(?:plane|oplane)",
"alumin(?:um|ium)",
"analog(?:ue)?",
"ass|arse",
"cent(?:er|re)",
"defen(?:se|ce)",
"dou(?:gh)?nut",
"gr(?:a|e)y",
"model(?:ing|ling)",
"skep(?:tic|tic)",
"summar(?:ize|ise)"
)
# Find and highlight the spellings
for (pattern in patterns_to_detect) {
matches <- str_extract_all(sample_text, pattern)
if (length(matches[[1]]) > 0) {
sample_text <- str_replace_all(sample_text,
pattern,
paste0("**", matches[[1]], "**"))
}
}
sample_text
words
words |>
str_replace_all("\\b(\\w)(\\w*)(\\w)\\b", "\\3\\2\\1")
?str_replace_all
words |>
str_replace_all(pattern = "\\b(\\w)(\\w*)(\\w)\\b",
replacement = "\\3\\2\\1")
new_words = words |>
str_replace_all(pattern = "\\b(\\w)(\\w*)(\\w)\\b",
replacement = "\\3\\2\\1")
# Fidning which of the new strings are part of the original "words"
new_words %in% words
# Fidning which of the new strings are part of the original "words"
str_subset(new_words %in% words)
# Fidning which of the new strings are part of the original "words"
new_words[new_words %in% words]
# Fidning which of the new strings are part of the original "words"
tibble(
original_words = words[new_words %in% words],
new_words = new_words[new_words %in% words]
)
# Fidning which of the new strings are part of the original "words"
tibble(
original_words = words[new_words %in% words],
new_words = new_words[new_words %in% words]
) |>
gt() |>
gt_theme_538() |>
opt_interactive()
# Fidning which of the new strings are part of the original "words"
tibble(
original_words = words[new_words %in% words],
new_words = new_words[new_words %in% words]
) |>
gt() |>
opt_interactive()
# Fidning which of the new strings are part of the original "words"
tibble(
original_words = words[new_words %in% words],
new_words = new_words[new_words %in% words]
) |>
gt() |>
cols_label_with(columns = everything(),
fn = ~ make_clean_names(., case = "title"))
# Fidning which of the new strings are part of the original "words"
tibble(
original_words = words[new_words %in% words],
new_words = new_words[new_words %in% words]
) |>
gt() |>
cols_label_with(columns = everything(),
fn = ~ make_clean_names(., case = "title")) |>
opt_interactive()
test_string = c("a.bc..de", "1.2.3", "x...y", ".1.2.3",
"a.b.c.", ".a.b.c")
test_regex = "\\.\\.\\.\\.\\.\\.\\."
str_view(test_regex)
test_regex = "\\..\\..\\..\\.\\.\\.\\."
str_view(test_regex)
test_regex = "\\..\\..\\.."
str_view(test_regex)
str_detect(test_string, test_regex)
tibble(
test_string = test_string,
match_result = str_detect(test_string, test_regex)
)
