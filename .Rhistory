?tribble
#| label: bill_depth_mm
as_tibble(names(penguins)) |>
gt::gt()
#| label: bill_depth_mm
names(penguins) |>
as_tibble() |>
t() |>
gt::gt()
#| label: bill_depth_mm
names(penguins) |>
t() |>
as_tibble() |>
gt::gt()
#| label: tbl-penguinscols
#| tbl-cap: "List of variables in the penguins dataset"
#| tbl-cap-location: top
names(penguins) |>
t() |>
as_tibble() |>
gt::gt()
# Finding the details of the variables.
# ?penguins
install.packages("gtExtras")
# Displaying the result
gt::gt(df) |>
gt::tab_header(title = "Correlation Coefficitents",
subtitle = "Between Bill Length & Bill Depth amongst
different penguins") |>
gtExtras::gt_theme_guardian()
#| label: tbl-correlations
#| class-source: "fold-hide"
#| tbl-cap: "Correlation Table amongst different types of penguins"
# Checking the correlation between the two variables
test1 = function(x) {cor.test(x$bill_length_mm, x$bill_depth_mm)$estimate}
# An empty data-frame to collect results
df = tibble(Penguins = NA,
Correlation = NA,
.rows = 4)
# Finding Correlation by each penguin variety
for (y in 1:3) {
c = penguins |>
filter(species == unique(penguins$species)[y]) |>
test1() |>
format(digits = 2)
df[y,2] = c
df[y,1] = unique(penguins$species)[y]
}
# Converting the nature of 1st column from factor to character
df$Penguins = as.character(df$Penguins)
# Storing the overall correlation
df[4,1] = "Overall"
df[4,2] = penguins |> test1() |> format(digits = 2)
# Displaying the result
gt::gt(df) |>
gt::tab_header(title = "Correlation Coefficitents",
subtitle = "Between Bill Length & Bill Depth amongst
different penguins") |>
gtExtras::gt_theme_guardian()
# Displaying the result
gt::gt(df) |>
gt::tab_header(title = "Correlation Coefficitents",
subtitle = "Between Bill Length & Bill Depth amongst
different penguins") |>
gtExtras::gt_theme_nytimes()
# Displaying the result
gt::gt(df) |>
gt::tab_header(title = "Correlation Coefficitents",
subtitle = "Between Bill Length & Bill Depth amongst
different penguins") |>
gtExtras::gt_theme_538()
# Displaying the result
gt::gt(df) |>
gt::tab_header(title = "Correlation Coefficitents",
subtitle = "Between Bill Length & Bill Depth amongst
different penguins") |>
gtExtras::gt_theme_538() |>
gtExtras::gt_highlight_rows(rows = 4)
?gt_highlight_rows
# Displaying the result
gt::gt(df) |>
gt::tab_header(title = "Correlation Coefficitents",
subtitle = "Between Bill Length & Bill Depth amongst
different penguins") |>
gtExtras::gt_theme_538() |>
gtExtras::gt_highlight_rows(rows = 4, fill = "#c2bbba")
# Displaying the result
gt::gt(df) |>
gt::tab_header(title = "Correlation Coefficitents",
subtitle = "Between Bill Length & Bill Depth amongst
different penguins") |>
gtExtras::gt_theme_538() |>
gtExtras::gt_highlight_rows(rows = 4, fill = "#d4cecd")
install.packages("gtsummary")
library(gtsummary)
tbl_summary(penguins)
tbl_summary(penguins, missing = "no")
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm)) +
geom_point()
?geom_point()
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm)) +
geom_point(na.rm = TRUE) +
labs(caption = md("Data come from the `palmerpenguins` package."))
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm)) +
geom_point(na.rm = TRUE) +
labs(caption = gt::md("Data come from the `palmerpenguins` package."))
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm)) +
geom_point(na.rm = TRUE) +
labs(caption = gt::md("Data come from the", `palmerpenguins` "package."))
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm)) +
geom_point(na.rm = TRUE) +
labs(caption = gt::md("Data come from the *palmerpenguins* package."))
ggplot(data = penguins,
mapping = aes(x = bill_depth_mm,
y = bill_length_mm)) +
geom_point(na.rm = TRUE) +
labs(caption = "Data come from the palmerpenguins package.")
install.packages("devtools")
require(devtools)
#| label: fig-leaflet
#| fig-cap: "A map of Chandigarh, India using Leaflet"
#| fig-cap-location: bottom
library(leaflet)
leaflet() |>
setView(76.801175, 30.761403, zoom = 14) |>
addTiles() |>
addMarkers(76.801175, 30.761403,
popup = "Haryana Civil Secretariat")  |>
addMarkers(76.803773534,
30.752910586,
popup = "Rock Garden")
#| label: fig-leaflet
#| fig-cap: "A map of Chandigarh, India using Leaflet"
#| fig-cap-location: bottom
library(leaflet)
leaflet() |>
setView(76.801175, 30.761403, zoom = 14) |>
addTiles() |>
addMarkers(76.801175, 30.761403,
popup = "Haryana Civil Secretariat")  |>
addMarkers(76.803773534,
30.752910586,
popup = "Rock Garden")
install_version("knitr", version = "1.40", repos = "http://cran.us.r-project.org")
citation()
citation("pkgname")
citation("tidyverse")
#| label: setup
#| error: false
#| warning: false
library(tidyverse)
library(palmerpenguins)
penguins = penguins
penguins |>
ggplot(mapping = aes(x = flipper_length_mm,
y = body_mass_g)) +
geom_point(mapping = aes(color = bill_depth_mm)) +
geom_smooth()
#| label: fig-recreatewrong
#| fig-cap: "The Wrong Recreated figure using the ggplot2 code"
penguins |>
ggplot(mapping = aes(x = flipper_length_mm,
y = body_mass_g,
color = bill_depth_mm)) +
geom_point() +
geom_smooth()
#| label: fig-recreatewrong
#| fig-cap: "The Wrong Recreated figure using the ggplot2 code"
penguins |>
ggplot(mapping = aes(x = flipper_length_mm,
y = body_mass_g,
color = bill_depth_mm)) +
geom_point() +
geom_smooth()
#| label: fig-recreatewrong
#| fig-cap: "The Wrong Code - Recreated figure"
#| error: true
#| warning: true
#| message: true
penguins |>
ggplot(mapping = aes(x = flipper_length_mm,
y = body_mass_g,
color = bill_depth_mm)) +
geom_point() +
geom_smooth()
#| label: setup
#| error: false
#| warning: false
library(tidyverse)
library(palmerpenguins)
penguins = penguins
#| label: fig-recreatewrong
#| fig-cap: "The Wrong Code - Recreated figure"
#| error: true
#| warning: true
#| message: true
penguins |>
ggplot(mapping = aes(x = flipper_length_mm,
y = body_mass_g,
color = bill_depth_mm)) +
geom_point() +
geom_smooth()
#| label: fig-recreatewrong
#| fig-cap: "The Wrong Code - Recreated figure"
#| error: true
#| warning: true
#| message: true
penguins |>
ggplot(mapping = aes(x = flipper_length_mm,
y = body_mass_g,
color = bill_depth_mm)) +
geom_point() +
geom_smooth()
#| label: setup
#| error: false
#| warning: false
library(tidyverse)
library(palmerpenguins)
penguins = penguins
ggplot(data = penguins,
mapping = aes(x = flipper_length_mm,
y = body_mass_g,
color = island)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = penguins,
mapping = aes(x = flipper_length_mm,
y = body_mass_g)) +
geom_point() +
geom_smooth()
ggplot() +
geom_point(data = penguins,
mapping = aes(x = flipper_length_mm,
y = body_mass_g)
) +
geom_smooth(data = penguins,
mapping = aes(x = flipper_length_mm,
y = body_mass_g))
g1 = ggplot(data = penguins,
mapping = aes(x = flipper_length_mm,
y = body_mass_g)) +
geom_point() +
geom_smooth()
g2 = ggplot() +
geom_point(data = penguins,
mapping = aes(x = flipper_length_mm,
y = body_mass_g)
) +
geom_smooth(data = penguins,
mapping = aes(x = flipper_length_mm,
y = body_mass_g))
?grid.arrange
#| label: fig-Question-10-code
#| fig-cap: "Comparison of the two plots produced by the codes in Question 10"
#| echo: false
#| warning: false
#| message: false
g1 = ggplot(data = penguins,
mapping = aes(x = flipper_length_mm,
y = body_mass_g)) +
geom_point() +
geom_smooth() +
labs(caption = "Code 1")
g2 = ggplot() +
geom_point(data = penguins,
mapping = aes(x = flipper_length_mm,
y = body_mass_g)
) +
geom_smooth(data = penguins,
mapping = aes(x = flipper_length_mm,
y = body_mass_g)) +
labs(caption = "Code 2")
gridExtra::grid.arrange(g1, g2,
ncol = 2)
#| label: fig-Question-10-code
#| fig-cap: "Comparison of the two plots produced by the codes in Question 10"
#| echo: false
#| warning: false
#| message: false
#| out-width: "70%"
g1 = ggplot(data = penguins,
mapping = aes(x = flipper_length_mm,
y = body_mass_g)) +
geom_point() +
geom_smooth() +
labs(caption = "Code 1")
g2 = ggplot() +
geom_point(data = penguins,
mapping = aes(x = flipper_length_mm,
y = body_mass_g)
) +
geom_smooth(data = penguins,
mapping = aes(x = flipper_length_mm,
y = body_mass_g)) +
labs(caption = "Code 2")
gridExtra::grid.arrange(g1, g2,
ncol = 2)
rm(g1, g2)
penguins |>
ggplot(aes(x=species)) |>
geom_bar()
penguins |>
ggplot(aes(x = species)) +
geom_bar()
penguins |>
ggplot(aes(y = species)) +
geom_bar() +
labs(caption = "Species on y-axis")
#| label: fig-Question-1-Exercise-2.4.3
#| fig-cap: "Change in figure when species is assigned to y-axis"
#| fig-cap-location: top
p1 = penguins |>
ggplot(aes(x = species)) +
geom_bar() +
labs(caption = "Species on x-axis")
p2 = penguins |>
ggplot(aes(y = species)) +
geom_bar() +
labs(caption = "Species on y-axis")
gridExtra::grid.arrange(p1, p2, ncol = 2)
#| label: fig-Question-1-Exercise-2.4.3
#| fig-cap: "Change in figure when species is assigned to y-axis"
#| fig-cap-location: top
#| fig-asp: 0.5
p1 = penguins |>
ggplot(aes(x = species)) +
geom_bar() +
labs(caption = "Species on x-axis")
p2 = penguins |>
ggplot(aes(y = species)) +
geom_bar() +
labs(caption = "Species on y-axis")
gridExtra::grid.arrange(p1, p2, ncol = 2)
#| label: fig-Question_2_Ex_2.4.3
#| fig-cap: "The two plots produced by the code given, with red color vs. red fill"
#| fig-asp: 0.5
gridExtra::grid.arrange(
ggplot(penguins, aes(x = species)) + geom_bar(color = "red") +
labs(caption = "Color = Red"),
ggplot(penguins, aes(x = species)) + geom_bar(fill = "red") +
labs(caption = "Fill = Red"),
ncol = 2)
#| label: setup
#| error: false
#| warning: false
library(tidyverse)
library(palmerpenguins)
penguins = penguins
#| label: fig-Question_2_Ex_2.4.3
#| fig-cap: "The two plots produced by the code given, with red color vs. red fill"
#| fig-asp: 0.5
gridExtra::grid.arrange(
ggplot(penguins, aes(x = species)) + geom_bar(color = "red") +
labs(caption = "Color = Red"),
ggplot(penguins, aes(x = species)) + geom_bar(fill = "red") +
labs(caption = "Fill = Red"),
ncol = 2)
?geom_histogram
ggplot(diamonds, aes(x=carat)) + geom_histogram()
#| label: fig-hist1
#| fig-cap: "Histogram with different bin-widths tried out to select the most relevant one"
#| warning: false
#| fig-asp: 1
ftrs = theme_classic() + labs(x=NULL, y=NULL)
ggplot(diamonds, aes(x=carat)) + geom_histogram() + ftrs
#| label: fig-hist1
#| fig-cap: "Histogram with different bin-widths tried out to select the most relevant one"
#| warning: false
#| fig-asp: 1
f1 = theme_classic()
#| label: fig-hist1
#| fig-cap: "Histogram with different bin-widths tried out to select the most relevant one"
#| warning: false
#| fig-asp: 1
f1 = theme_classic()
f2 = labs(x=NULL, y=NULL)
ggplot(diamonds, aes(x=carat)) + geom_histogram() + f1 + f2
ggplot(diamonds, aes(x=carat)) +
geom_histogram(fill = "white", color = "darkgrey") +
theme_classic() + labs(x = NULL, y = NULL,
caption = "Default Bindwidth")
ggplot(diamonds, aes(x=carat)) +
geom_histogram(fill = "white") +
theme_classic() + labs(x = NULL, y = NULL,
caption = "Default Bindwidth")
ggplot(diamonds, aes(x=carat)) +
geom_histogram(fill = "white", color = "black") +
theme_classic() + labs(x = NULL, y = NULL,
caption = "Default Bindwidth")
ggplot(diamonds, aes(x=carat)) +
geom_histogram(fill = "white", color = "black",
binwidth = 1) +
theme_classic() + labs(x = NULL, y = NULL,
caption = "Default Bindwidth")
ggplot(diamonds, aes(x=carat)) +
geom_histogram(fill = "white", color = "black",
binwidth = 0.1) +
theme_classic() + labs(x = NULL, y = NULL,
caption = "Default Bindwidth")
ggplot(diamonds, aes(x=carat)) +
geom_histogram(fill = "white", color = "black",
binwidth = 0.2) +
theme_classic() + labs(x = NULL, y = NULL,
caption = "Default Bindwidth")
g1 = ggplot(diamonds, aes(x=carat)) +
geom_histogram(fill = "white", color = "black") +
theme_classic() + labs(x = NULL, y = NULL,
caption = "Default Bindwidth")
for (i in c(0.1, 0.2, 0.3, 0.5, 1)) {
ggplot(diamonds, aes(x=carat)) +
geom_histogram(fill = "white", color = "black",
binwidth = 0.2) +
theme_classic() +
labs(x = NULL, y = NULL,
caption = "Bindwidth = ", i)
}
for (i in c(0.1, 0.2, 0.3, 0.5, 1)) {
ggplot(diamonds, aes(x=carat)) +
geom_histogram(fill = "white", color = "black",
binwidth = 0.2) +
theme_classic() +
labs(x = NULL, y = NULL,
caption = "Bindwidth = ", i)
}
for (i in c(0.1, 0.2, 0.3, 0.5, 1)) {
ggplot(diamonds, aes(x=carat)) +
geom_histogram(fill = "white", color = "black",
binwidth = i) +
theme_classic() +
labs(x = NULL, y = NULL,
caption = "Bindwidth = ", i)
}
g2 = ggplot(diamonds, aes(x=carat)) +
geom_histogram(fill = "white", color = "black",
binwidth = 0.1) +
theme_classic() +
labs(x = NULL, y = NULL,
caption = "Bindwidth = 0.1")
View(g2)
g2
g2 = ggplot(diamonds, aes(x=carat)) +
geom_histogram(fill = "white", color = "black",
binwidth = 0.1) +
theme_classic() +
labs(x = NULL, y = NULL,
subtitle = "Bindwidth = 0.1")
#| label: fig-hist1
#| fig-cap: "Histogram with different bin-widths tried out to select the most relevant one"
#| warning: false
#| fig-asp: 1
f1 = theme_classic()
f2 = labs(x=NULL, y=NULL)
g1 = ggplot(diamonds, aes(x=carat)) +
geom_histogram(fill = "white", color = "black") +
theme_classic() + labs(x = NULL, y = NULL,
subtitle = "Default Bindwidth")
g2 = ggplot(diamonds, aes(x=carat)) +
geom_histogram(fill = "white", color = "black",
binwidth = 0.1) +
theme_classic() +
labs(x = NULL, y = NULL,
subtitle = "Bindwidth = 0.1")
g3 = ggplot(diamonds, aes(x=carat)) +
geom_histogram(fill = "white", color = "black",
binwidth = 0.2) +
theme_classic() +
labs(x = NULL, y = NULL,
subtitle = "Bindwidth = 0.2")
g4 = ggplot(diamonds, aes(x=carat)) +
geom_histogram(fill = "white", color = "black",
binwidth = 0.3) +
theme_classic() +
labs(x = NULL, y = NULL,
subtitle = "Bindwidth = 0.3")
g5 = ggplot(diamonds, aes(x=carat)) +
geom_histogram(fill = "white", color = "black",
binwidth = 0.5) +
theme_classic() +
labs(x = NULL, y = NULL,
subtitle = "Bindwidth = 0.5")
g6 = ggplot(diamonds, aes(x=carat)) +
geom_histogram(fill = "white", color = "black",
binwidth = 1) +
theme_classic() +
labs(x = NULL, y = NULL,
subtitle = "Bindwidth = 1")
gridExtra::grid.arrange(g1, g2, g3, g4, g5, g6,
ncol = 3, nrow = 2)
ggplot(diamonds, aes(x=carat)) +
geom_histogram(fill = "white", color = "black") +
theme_classic() + labs(x = NULL, y = NULL,
subtitle = "Default Bindwidth")
View(g1)
g1[["layers"]][[1]][["computed_stat_params"]][["binwidth"]]
g1[["layers"]][[1]][["computed_stat_params"]][["binwidth"]]
rm(g1, g2, g3, g4, g5, g6)
#| label: setup
#| error: false
#| warning: false
library(tidyverse)
library(palmerpenguins)
penguins = penguins
