y = "Carat of the diamond",
caption = "Note 1: Width of boxplot is proportional to square root of the number of observations.\nNote 2: The notches don't overlap indicating that medians are significantly different",
title = "Relation between cut and carat")
diamonds |>
ggplot(aes(x = cut,
y = carat)) +
geom_boxplot(notch = TRUE,
varwidth = TRUE,
fill = "lightgrey") +
theme_minimal() +
coord_cartesian(ylim = c(0,2)) +
labs(x = "Cut of the diamond",
y = "Carat of the diamond",
caption = "Note 1: Width of boxplot is proportional to square root of the number of observations.\nNote 2: The notches don't overlap indicating that medians are significantly different",
title = "Relation between cut and carat")
diamonds |>
ggplot(aes(x = cut,
y = carat)) +
geom_boxplot(notch = TRUE,
varwidth = TRUE,
fill = "lightgrey",
outlier.alpha = 0.1) +
theme_minimal() +
coord_cartesian(ylim = c(0,2)) +
labs(x = "Cut of the diamond",
y = "Carat of the diamond",
caption = "Note 1: Width of boxplot is proportional to square root of the number of observations.\nNote 2: The notches don't overlap indicating that medians are significantly different",
title = "Relation between cut and carat")
?coord_flip
diamonds |>
ggplot(aes(x = cut,
y = carat)) +
geom_boxplot(notch = TRUE,
varwidth = TRUE,
fill = "lightgrey",
outlier.alpha = 0.1) +
theme_minimal() +
coord_cartesian(ylim = c(0,2)) +
labs(x = "Cut of the diamond",
y = "Carat of the diamond",
caption = "Note 1: Width of boxplot is proportional to square root of the number of observations.\nNote 2: The notches don't overlap indicating that medians are significantly different",
title = "Relation between cut and carat") +
coord_flip()
diamonds |>
ggplot(aes(x = cut,
y = carat)) +
geom_boxplot(notch = TRUE,
varwidth = TRUE,
fill = "lightgrey",
outlier.alpha = 0.1) +
theme_minimal() +
labs(x = "Cut of the diamond",
y = "Carat of the diamond",
caption = "Note 1: Width of boxplot is proportional to square root of the number of observations.\nNote 2: The notches don't overlap indicating that medians are significantly different",
title = "Relation between cut and carat") +
coord_flip() +
coord_cartesian(xlim = c(0,2))
diamonds |>
ggplot(aes(x = cut,
y = carat)) +
geom_boxplot(notch = TRUE,
varwidth = TRUE,
fill = "lightgrey",
outlier.alpha = 0.1) +
theme_minimal() +
labs(x = "Cut of the diamond",
y = "Carat of the diamond",
caption = "Note 1: Width of boxplot is proportional to square root of the number of observations.\nNote 2: The notches don't overlap indicating that medians are significantly different",
title = "Relation between cut and carat") +
coord_flip(xlim = c(0,2))
diamonds |>
ggplot(aes(x = cut,
y = carat)) +
geom_boxplot(notch = TRUE,
varwidth = TRUE,
fill = "lightgrey",
outlier.alpha = 0.1) +
theme_minimal() +
labs(x = "Cut of the diamond",
y = "Carat of the diamond",
caption = "Note 1: Width of boxplot is proportional to square root of the number of observations.\nNote 2: The notches don't overlap indicating that medians are significantly different",
title = "Relation between cut and carat") +
coord_flip(ylim = c(0,2))
diamonds |>
ggplot(aes(x = cut,
y = carat)) +
geom_boxplot(notch = TRUE,
varwidth = TRUE,
fill = "lightgrey",
outlier.alpha = 0.1) +
theme_minimal() +
coord_cartesian(ylim = c(0,2)) +
labs(x = "Cut of the diamond",
y = "Carat of the diamond",
caption = "Note 1: Width of boxplot is proportional to square root of the number of observations.\nNote 2: The notches don't overlap indicating that medians are significantly different",
title = "Relation between cut and carat")
diamonds |>
ggplot(aes(x = cut,
y = carat)) +
geom_boxplot(notch = TRUE,
varwidth = TRUE,
fill = "lightgrey",
outlier.alpha = 0.1) +
theme_minimal() +
labs(x = "Cut of the diamond",
y = "Carat of the diamond",
caption = "Note 1: Width of boxplot is proportional to square root of the number of observations.\nNote 2: The notches don't overlap indicating that medians are significantly different",
title = "Relation between cut and carat") +
coord_flip(ylim = c(0,2))
diamonds |>
ggplot(aes(y = cut,
x = carat)) +
geom_boxplot(notch = TRUE,
varwidth = TRUE,
fill = "lightgrey",
outlier.alpha = 0.1) +
theme_minimal() +
labs(x = "Cut of the diamond",
y = "Carat of the diamond",
caption = "Note 1: Width of boxplot is proportional to square root of the number of observations.\nNote 2: The notches don't overlap indicating that medians are significantly different",
title = "Relation between cut and carat") +
coord_cartesian(xlim = c(0,2))
diamonds |>
ggplot(aes(y = cut,
x = carat)) +
geom_boxplot(notch = TRUE,
varwidth = TRUE,
fill = "lightgrey",
outlier.alpha = 0.1) +
theme_minimal() +
labs(y = "Cut of the diamond",
x = "Carat of the diamond",
caption = "Note 1: Width of boxplot is proportional to square root of the number of observations.\nNote 2: The notches don't overlap indicating that medians are significantly different",
title = "Relation between cut and carat") +
coord_cartesian(xlim = c(0,2))
install.packages(lvplot)
install.packages("lvplot")
library(lvplot)
diamonds |>
ggplot(aes(x = cut,
y = carat)) +
geom_lv()
?geom_lv
diamonds |>
ggplot(aes(x = cut,
y = carat)) +
geom_lv(varwidth = TRUE,
fill = "lightgrey",
outlier.alpha = 0.1)
diamonds |>
ggplot(aes(x = cut,
y = carat)) +
geom_lv(varwidth = TRUE,
fill = "lightgrey",
outlier.alpha = 0.1) +
theme_minimal() +
coord_cartesian(ylim = c(0,2))
diamonds |>
ggplot(aes(x = cut,
y = carat)) +
geom_lv(varwidth = TRUE,
fill = "lightgrey",
outlier.alpha = 0.1) +
theme_minimal() +
coord_cartesian(ylim = c(0,3))
diamonds |>
ggplot(aes(x = cut,
y = carat)) +
geom_violin()
diamonds |>
ggplot(aes(x = cut,
y = price)) +
geom_lv(varwidth = TRUE,
fill = "lightgrey",
outlier.alpha = 0.1) +
theme_minimal()
diamonds |>
ggplot(aes(x = cut,
y = price)) +
geom_lv(fill = "lightgrey",
outlier.alpha = 0.1) +
theme_minimal()
diamonds |>
ggplot(aes(x = cut,
y = price)) +
geom_lv(varwidth = TRUE,
fill = "lightgrey") +
theme_minimal()
?geom_lv
diamonds |>
ggplot(aes(x = cut,
y = price)) +
geom_lv(varwidth = TRUE,
fill = "lightgrey") +
theme_minimal() +
labs(x = "Cut of the diamond",
y = "Price of the diamond",
caption = "Note 1: Width of lvplot is proportional to square root of the number of observations",
title = "Relation between cut and carat")
diamonds |>
ggplot(aes(x = cut,
y = carat)) +
geom_violin() +
+
labs(x = "Cut of the diamond",
y = "Price of the diamond",
caption = "Note : Width of lvplot is proportional to square root of the number of observations",
title = "Relation between cut and price with a Violin Plot")
diamonds |>
ggplot(aes(x = cut,
y = carat)) +
geom_violin() +
labs(x = "Cut of the diamond",
y = "Price of the diamond",
caption = "Note : Width of lvplot is proportional to square root of the number of observations",
title = "Relation between cut and price with a Violin Plot")
diamonds |>
ggplot(aes(x = cut,
y = carat)) +
geom_violin() +
labs(x = "Cut of the diamond",
y = "Price of the diamond",
caption = "Note : Width of lvplot is proportional to square root of the number of observations",
title = "Relation between cut and price with a Violin Plot") +
coord_cartesian(ylim = c(0,3))
diamonds |>
ggplot(aes(x = cut,
y = price)) +
geom_violin() +
labs(x = "Cut of the diamond",
y = "Price of the diamond",
caption = "Note : Width of lvplot is proportional to square root of the number of observations",
title = "Relation between cut and price with a Violin Plot")
diamonds |>
ggplot(aes(x = cut,
y = price)) +
geom_lv(varwidth = TRUE,
fill = "lightgrey") +
theme_minimal() +
labs(x = "Cut of the diamond",
y = "Price of the diamond",
caption = "Note : Width of lvplot is proportional to square root of the number of observations",
title = "Relation between cut and price with an LV-Plot")
?geom_violin
diamonds |>
ggplot(aes(x = cut,
y = price)) +
geom_violin() +
theme_minimal() +
labs(x = "Cut of the diamond",
y = "Price of the diamond",
caption = "Note : Width of lvplot is proportional to square root of the number of observations",
title = "Relation between cut and price with a Violin Plot")
diamonds |>
ggplot(aes(x = cut,
y = price)) +
geom_lv(fill = "lightgrey") +
theme_minimal() +
labs(x = "Cut of the diamond",
y = "Price of the diamond",
title = "Relation between cut and price with an LV-Plot")
diamonds |>
ggplot(aes(x = cut,
y = price)) +
geom_violin(fill = "lightgrey",
scale = "count") +
theme_minimal() +
labs(x = "Cut of the diamond",
y = "Price of the diamond",
caption = "Note : Width of lvplot is proportional to square root of the number of observations",
title = "Relation between cut and price with a Violin Plot")
diamonds |>
ggplot(aes(x = cut,
y = price)) +
geom_violin(fill = "lightgrey") +
theme_minimal() +
labs(x = "Cut of the diamond",
y = "Price of the diamond",
caption = "Note : Width of lvplot is proportional to square root of the number of observations",
title = "Relation between cut and price with a Violin Plot")
names(diamonds)
sapply(diamonds, class)
diamonds |>
ggplot(aes(x = cut,
y = price)) +
geom_violin()
diamonds |>
ggplot(aes(x = cut,
y = price)) +
theme_minimal() +
labs(x = "Cut of the diamond",
y = "Price of the diamond")
g = diamonds |>
ggplot(aes(x = cut,
y = price)) +
theme_minimal() +
labs(x = "Cut of the diamond",
y = "Price of the diamond")
g + geom_violin()
g + geom_freqpoly()
diamonds |>
ggplot(aes(x = cut,
y = price)) +
theme_minimal() +
labs(x = "Cut of the diamond",
y = "Price of the diamond") +
geom_violin()
# Faceted histogram
diamonds |>
ggplot(aes(price)) +
theme_minimal() +
geom_histogram()
# Faceted histogram
diamonds |>
ggplot(aes(price)) +
theme_minimal() +
geom_histogram() +
facet_wrap(~cut)
# Faceted histogram
diamonds |>
ggplot(aes(price)) +
theme_minimal() +
geom_histogram() +
facet_wrap(~cut,
scales = "free")
# Violin Plot
diamonds |>
ggplot(aes(x = cut,
y = price)) +
theme_minimal() +
labs(x = "Cut of the diamond",
y = "Price of the diamond") +
geom_violin()
# Faceted histogram
diamonds |>
ggplot(aes(price)) +
theme_minimal() +
geom_histogram() +
facet_wrap(~cut,
scales = "free")
# Faceted histogram
diamonds |>
ggplot(aes(price)) +
theme_classic() +
geom_histogram() +
facet_wrap(~cut,
scales = "free")
# Coloured frequency polygon
diamonds |>
ggplot(aes(price)) +
theme_classic() +
geom_freqpoly(aes(color = cut))
# Coloured frequency polygon
diamonds |>
ggplot(aes(price)) +
theme_classic() +
geom_freqpoly(aes(color = cut),
lwd = 1,
alpha = 0.5)
# Coloured frequency polygon
diamonds |>
ggplot(aes(price)) +
theme_classic() +
geom_freqpoly(aes(color = cut),
lwd = 1,
alpha = 0.5) +
scale_color_brewer(palette = 1)
# Coloured frequency polygon
diamonds |>
ggplot(aes(price)) +
theme_classic() +
geom_freqpoly(aes(color = cut),
lwd = 1,
alpha = 0.5) +
scale_color_brewer(palette = "set1")
library(RColorBrewer)
# Coloured frequency polygon
diamonds |>
ggplot(aes(price)) +
theme_classic() +
geom_freqpoly(aes(color = cut),
lwd = 1,
alpha = 0.5) +
scale_color_brewer(palette = "set1")
# Coloured frequency polygon
diamonds |>
ggplot(aes(price)) +
theme_classic() +
geom_freqpoly(aes(color = cut),
lwd = 1,
alpha = 0.5) +
scale_color_brewer(palette = "Set1")
# Coloured frequency polygon
diamonds |>
ggplot(aes(price)) +
theme_classic() +
geom_freqpoly(aes(color = cut),
lwd = 1,
alpha = 0.5) +
scale_color_brewer(palette = "Dark2")
# Coloured frequency polygon
diamonds |>
ggplot(aes(price)) +
theme_classic() +
geom_freqpoly(aes(color = cut),
lwd = 1) +
scale_color_brewer(palette = "Dark2")
# Coloured density plot
diamonds |>
ggplot(aes(price)) +
theme_classic() +
geom_density(aes(color = cut),
lwd = 1) +
scale_color_brewer(palette = "Dark2")
gridExtra::grid.arrange(
# Violin Plot
diamonds |>
ggplot(aes(x = cut,
y = price)) +
theme_classic() +
labs(x = "Cut of the diamond",
y = "Price of the diamond") +
geom_violin(),
# Faceted histogram
diamonds |>
ggplot(aes(price)) +
theme_classic() +
geom_histogram() +
facet_wrap(~cut,
scales = "free"),
# Coloured frequency polygon
diamonds |>
ggplot(aes(price)) +
theme_classic() +
geom_freqpoly(aes(color = cut),
lwd = 1) +
scale_color_brewer(palette = "Dark2"),
# Coloured density plot
diamonds |>
ggplot(aes(price)) +
theme_classic() +
geom_density(aes(color = cut),
lwd = 1) +
scale_color_brewer(palette = "Dark2"),
ncol = 2,
nrow = 2)
diamonds |>
ggplot(aes(price)) +
theme_classic() +
geom_histogram() +
facet_wrap(~cut,
scales = "free")
diamonds |>
ggplot(aes(x = cut,
y = price)) +
theme_classic() +
labs(x = "Cut of the diamond",
y = "Price of the diamond") +
geom_violin()
diamonds |>
ggplot(aes(price)) +
theme_classic() +
geom_freqpoly(aes(color = cut),
lwd = 1) +
scale_color_brewer(palette = "Dark2")
diamonds |>
ggplot(aes(price)) +
theme_classic() +
geom_density(aes(color = cut),
lwd = 1) +
scale_color_brewer(palette = "Dark2")
# Coloured density plot
diamonds |>
ggplot(aes(price)) +
theme_classic() +
geom_density(aes(color = cut),
lwd = 1) +
scale_color_brewer(palette = "Dark2") +
labs(title = "Coloured density plot")
# Violin Plot
diamonds |>
ggplot(aes(x = cut,
y = price)) +
theme_classic() +
labs(x = "Cut of the diamond",
y = "Price of the diamond") +
geom_violin() +
labs(title = "Violin Plot")
# Faceted histogram
diamonds |>
ggplot(aes(price)) +
theme_classic() +
geom_histogram() +
facet_wrap(~cut,
scales = "free") +
labs(title = "Faceted histogram")
# Coloured frequency polygon
diamonds |>
ggplot(aes(price)) +
theme_classic() +
geom_freqpoly(aes(color = cut),
lwd = 1) +
scale_color_brewer(palette = "Dark2") +
labs(title = "Coloured frequency polygon")
# Coloured density plot
diamonds |>
ggplot(aes(price)) +
theme_classic() +
geom_density(aes(color = cut),
lwd = 1) +
scale_color_brewer(palette = "Dark2") +
labs(title = "Coloured density plot")
