flights |>
count(origin, dest) |>
arrange(desc(n)) |>
slice_head(n = 5)
flights |>
group_by(origin, dest) |>
summarise(n = n()) |>
arrange(desc(n)) |>
ungroup() |>
slice_head(n = 5)
flights |>
count(origin, dest) |>
arrange(desc(n)) |>
slice_head(n = 5)
flights |>
count(origin, dest, sort = TRUE) |>
slice_head(n = 5)
Suppose we have the following tiny data frame:
df <- tibble(x = 1:5,
y = c("a", "b", "a", "a", "b"),
z = c("K", "K", "L", "L", "K") )
df
df |>
group_by(y)
df |> arrange(y)
df |>
group_by(y) |>
summarize(mean_x = mean(x))
df |>
group_by(y, z) |>
summarize(mean_x = mean(x))
df |>
group_by(y, z) |>
summarize(mean_x = mean(x), .groups = "drop")
df
# Code Chunk 1
df |>
group_by(y, z) |>
summarize(mean_x = mean(x))
# Code Chunk 2
df |>
group_by(y, z) |>
mutate(mean_x = mean(x))
df <- tibble(x = 1:5,
y = c("a", "b", "a", "a", "b"),
z = c("K", "K", "L", "L", "K") )
df
df
# Code Chunk 1
df |>
group_by(y, z) |>
summarize(mean_x = mean(x))
# Code Chunk 2
df |>
group_by(y, z) |>
mutate(mean_x = mean(x))
library(gt)
gt(a)
library(tidyverse)
a = flights |>
group_by(dest) |>
slice_max(n=1, order_by = dep_delay, na_rm = TRUE) |>
select(dest, flight, origin, dep_delay, month, day) |>
arrange(desc(dep_delay), desc(flight))
#| label: setup
library(tidyverse)
library(nycflights13)
library(gt)
data("flights")
a = flights |>
group_by(dest) |>
slice_max(n=1, order_by = dep_delay, na_rm = TRUE) |>
select(dest, flight, origin, dep_delay, month, day) |>
arrange(desc(dep_delay), desc(flight))
# Option 2: Directly use slice_max() with "by" argument
b = flights |>
slice_max(n=1, order_by = dep_delay, by = dest, na_rm = TRUE) |>
select(dest, flight, origin, dep_delay, month, day) |>
arrange(desc(dep_delay), desc(flight))
# Check results
sum(a != b)
# Display results
b |>
slice_head(n=5) |>
gt() |>
cols_label(c("Destination", "Flight", "Origin Airport",
"Departure Depay (minutes)", "Month", "Date"))
# Display results
b |>
slice_head(n=5) |>
gt() |>
cols_label(dest = "Destination",
flight = "Flight",
origin = "Origin Airport",
dep_delay = "Departure Depay (minutes)",
month = "Month",
day = "Date"))
# Display results
b |>
slice_head(n=5) |>
gt() |>
cols_label(dest = "Destination",
flight = "Flight",
origin = "Origin Airport",
dep_delay = "Departure Depay (minutes)",
month = "Month",
day = "Date")
# Display results
b |>
slice_head(n=5) |>
gt() |>
cols_label(dest = "Destination",
flight = "Flight",
origin = "Origin Airport",
dep_delay = "Departure Depay (minutes)",
month = "Month",
day = "Date") |>
cols_align(align = "center")
install.packages("styler")
library(styler)
?styler
styler:::style_active_file()
styler:::style_active_file()
130 %/% 100
1159 %/% 100
1159 %% 100
styler:::style_active_file()
#| label: setup
library(tidyverse)
library(nycflights13)
library(gt)
data("flights")
flights |>
group_by(sched_dep_time) |>
summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) |>
ggplot(aes(x = sched_dep_time, y = avg_delay)) +
geom_line() +
geom_smooth(color = "red", se = FALSE) +
theme_bw() +
labs(x = "Scheduled Departure time",
y = "Average delay in minutes")
flights |>
group_by(sched_dep_time) |>
summarise(avg_delay = mean(dep_delay, na.rm = TRUE))
flights |>
group_by(sched_dep_time) |>
summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) |>
mutate(hour = sched_dep_time %/% 100,
minute = sched_dep_time %% 100) |>
mutate(time_min = hour*60 + minute) |>
ggplot(aes(x = time_min, y = avg_delay)) +
geom_line() +
geom_smooth(color = "red", se = FALSE) +
theme_bw() +
labs(x = "Scheduled Departure time",
y = "Average delay in minutes")
flights |>
group_by(sched_dep_time) |>
summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) |>
mutate(hour = sched_dep_time %/% 100,
minute = sched_dep_time %% 100) |>
mutate(time_min = hour*60 + minute) |>
ggplot(aes(x = time_min, y = avg_delay)) +
geom_line() +
geom_smooth(color = "red", se = FALSE) +
theme_bw() +
labs(x = "Scheduled Departure time (in min. since start of day)",
y = "Average delay in minutes")
flights |>
group_by(sched_dep_time) |>
summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) |>
mutate(hour = sched_dep_time %/% 100,
minute = sched_dep_time %% 100) |>
mutate(time_hr = hour + minute/60) |>
ggplot(aes(x = time_hr, y = avg_delay)) +
geom_line() +
geom_smooth(color = "red", se = FALSE) +
theme_bw() +
labs(x = "Scheduled Departure time (in min. since start of day)",
y = "Average delay in minutes")
flights |>
group_by(sched_dep_time) |>
summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) |>
mutate(hour = sched_dep_time %/% 100,
minute = sched_dep_time %% 100) |>
mutate(time_hr = hour + minute/60) |>
ggplot(aes(x = time_hr, y = avg_delay)) +
geom_line() +
geom_smooth(color = "red", se = FALSE) +
theme_bw() +
labs(x = "Scheduled Departure time (in Hrs.)",
y = "Average delay in minutes") +
scale_x_continuous(limits = c(4,24))
?scale_x_continuous
?seq
flights |>
group_by(sched_dep_time) |>
summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) |>
mutate(hour = sched_dep_time %/% 100,
minute = sched_dep_time %% 100) |>
mutate(time_hr = hour + minute/60) |>
ggplot(aes(x = time_hr, y = avg_delay)) +
geom_line() +
geom_smooth(color = "red", se = FALSE) +
theme_bw() +
labs(x = "Scheduled Departure time (in Hrs.)",
y = "Average delay in minutes") +
scale_x_continuous(breaks = seq(from = 0, to = 24, by = 4))
styler:::style_active_file()
styler:::set_style_transformers()
styler:::style_active_file()
flights |>
group_by(month) |>
summarize(
delay = mean(arr_delay, na.rm = TRUE)
) |>
ggplot(aes(x = month, y = delay)) +
geom_point() +
geom_line()
flights |>
filter(dest == "IAH") |>
group_by(year, month, day) |>
summarize(n = n(),
delay = mean(arr_delay, na.rm = TRUE)) |>
filter(n > 10)
flights |>
filter(dest == "IAH") |>
group_by(year, month, day) |>
summarize(n = n(),
delay = mean(arr_delay, na.rm = TRUE)) |>
filter(n > 10)
flights |>
filter(carrier == "UA",
dest %in% c("IAH","HOU"),
sched_dep_time > 0900,
sched_arr_time < 2000) |>
group_by(flight) |>
summarize(delay = mean(arr_delay, na.rm=TRUE),
cancelled = sum(is.na(arr_delay)), n = n()) |>
filter(n > 10)
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
flights |>
filter(carrier == "UA", dest %in% c("IAH", "HOU"), sched_dep_time >
0900, sched_arr_time < 2000) |>
group_by(flight) |>
summarise(delay = mean(
arr_delay,
na.rm = TRUE
), cancelled = sum(is.na(arr_delay)), n = n()) |>
filter(n > 10)
flights |>
filter(dest == "IAH") |>
group_by(year, month, day) |>
summarise(
n = n(),
delay = mean(arr_delay, na.rm = TRUE)
) |>
filter(n > 10)
styler:::style_active_file()
styler:::style_active_file()
#| label: Chunk-6.3.4
library(tidyverse)
library(tidyverse)
household
household |>
pivot_longer(
cols = !family,
names_to = c(".value", "child"),
names_sep = "_",
values_to = "Value"
)
household |>
pivot_longer(
cols = !family,
names_to = c(".value", "child"),
names_sep = "_",
values_to = "Value",
values_drop_na = TRUE
)
# Method 1
library(tidyverse)
household |>
pivot_longer(
cols = !family,
names_to = c(".value", "child"),
names_sep = "_",
values_to = "Value",
values_drop_na = TRUE
)
household |>
pivot_longer(
cols = !family,
names_to = c(".value", "child"),
names_sep = "_",
values_to = "Value",
values_drop_na = TRUE
)
households
household
cms_patient_experience
names(cms_patient_experience)
distinct(cms_patient_experience$measure_cd)
cms_patient_experience |> distinct(measure_cd)
cms_patient_experience
names(cms_patient_experience)
cms_patient_experience |>
distinct(measure_cd)
cms_patient_experience |>
distinct(measure_title)
cms_patient_experience
cms_patient_experience |>
pivot_wider(names_from = measure_cd,
values_from = prf_rate)
?pivot_wider
cms_patient_experience |>
pivot_wider(
names_from = measure_cd,
values_from = prf_rate,
id_cols = org_pac_id)
cms_patient_experience |>
pivot_wider(
names_from = measure_cd,
values_from = prf_rate,
id_cols = c(org_pac_id, org_nm))
cms_patient_experience |>
pivot_wider(
names_from = measure_cd,
values_from = prf_rate,
id_cols = starts_with("org"))
?pull
cms_patient_experience |>
distinct(org_nm)
cms_patient_experience |>
distinct(org_nm) |>
pull()
cms_patient_experience |>
distinct(org_nm) |>
pull() |>
class()
df <- tribble(
~id, ~measurement, ~value,
"A",        "bp1",    100,
"A",        "bp1",    102,
"A",        "bp2",    120,
"B",        "bp1",    140,
"B",        "bp2",    115
)
df
# Chunk 1: Chunk-6.3.4
#| label: Chunk-6.3.4
#| message: false
#| error: false
#| warning: false
# Method 1
library(tidyverse)
household |>
pivot_longer(
cols = !family,
names_to = c(".value", "child"),
names_sep = "_",
values_to = "Value",
values_drop_na = TRUE
)
# Method 2
# Chunk 2: pivot-wider-working
#| label: pivot-wider-working
#| collapse: true
df <- tribble(
~id, ~measurement, ~value,
"A",        "bp1",    100,
"A",        "bp1",    102,
"A",        "bp2",    120,
"B",        "bp1",    140,
"B",        "bp2",    115
)
df
df |>
pivot_wider(
id_cols = id,
names_from = measurement,
values_from = value
)
# Using the Code given by R in Warning to find out the
# duplicate observation
df |>
group_by(id, measurement) |>
summarise(n = n(), .groups = "drop") |>
filter(n > 1)
# Using the Code given by R in Warning to find out the
# duplicate observation
df |>
group_by(id, measurement) |>
summarise(n = n()) |>
filter(n > 1)
# Using the Code given by R in Warning to find out the
# duplicate observation
df |>
group_by(id, measurement) |>
summarise(n = n(), .groups = "drop") |>
filter(n > 1)
x <- 2
x y = 2
tidyverse::tidyverse_logo()
usethis::use_blank_slate()
rm(list = ls())
library(tidyverse)
getwd()
ggplot(diamonds, aes(x = carat, y = price)) +
geom_hex()
ggsave("diamonds.png")
write_csv(diamonds, "data/diamonds.csv")
write_csv(diamonds, "docs/diamonds.csv")
install.packages("bit")
write_csv(diamonds, "docs/diamonds.csv")
getwd()
quarto install extension sellorm/quarto-twitter-embed
library(tidyverse)
read_csv("https://raw.githubusercontent.com/hadley/r4ds/main/data/students.csv")
spec()
df = read_csv("https://raw.githubusercontent.com/hadley/r4ds/main/data/students.csv")
df = read_csv("https://raw.githubusercontent.com/hadley/r4ds/main/data/students.csv",
show_col_types = FALSE)
df = read_csv("https://raw.githubusercontent.com/hadley/r4ds/main/data/students.csv")
spec(df)
df |>
class()
df = read_csv("https://raw.githubusercontent.com/hadley/r4ds/main/data/students.csv") |>
as_tibble()
class(df)
names(df)
df
library(styler)
styler::style_text(colnames(df))
colnames(df)
style_text(df)
library(prettycode)
install.packages("prettycode")
library(prettycode)
style_text(df)
df
df = read_csv(
"https://raw.githubusercontent.com/hadley/r4ds/main/data/students.csv",
na = c("N/A", "")) |>
as_tibble()
df
df = read_csv(
"https://raw.githubusercontent.com/hadley/r4ds/main/data/students.csv",
na = c("N/A", "")
) |>
as_tibble() |>
rename(
student_id = `Student ID`,
full_name = `Full Name`
)
df
library(janitor)
df = read_csv(
"https://raw.githubusercontent.com/hadley/r4ds/main/data/students.csv",
na = c("N/A", "")
) |>
as_tibble() |>
clean_names()
df
df = read_csv(
"https://raw.githubusercontent.com/hadley/r4ds/main/data/students.csv",
na = c("N/A", "")
) |>
as_tibble() |>
clean_names() |>
mutate(meal_plan = as_factor(meal_plan))
df
df = read_csv(
"https://raw.githubusercontent.com/hadley/r4ds/main/data/students.csv",
na = c("N/A", "")
) |>
as_tibble() |>
clean_names() |>
mutate(
meal_plan = as_factor(meal_plan),
age = parse_number(age)
)
df
df = read_csv(
"https://raw.githubusercontent.com/hadley/r4ds/main/data/students.csv",
na = c("N/A", "")
) |>
as_tibble() |>
clean_names() |>
mutate(
meal_plan = as_factor(meal_plan),
age = parse_number(if_else(age == "five", 5, age))
)
df
read_csv(
"https://raw.githubusercontent.com/hadley/r4ds/main/data/students.csv",
na = c("N/A", "")
) |>
as_tibble() |>
clean_names()
df = read_csv(
"https://raw.githubusercontent.com/hadley/r4ds/main/data/students.csv",
na = c("N/A", "")
) |>
as_tibble() |>
clean_names() |>
mutate(
meal_plan = as_factor(meal_plan),
age = parse_number(if_else(age == "five", "5", age))
)
df
