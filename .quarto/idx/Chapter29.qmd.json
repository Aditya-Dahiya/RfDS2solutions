{"title":"Chapter 29: Quarto","markdown":{"yaml":{"title":"Chapter 29: Quarto","author":"Aditya Dahiya","bibliography":"references.bib","execute":{"warning":false,"cache":true},"date":"2023-07-25"},"headingText":"29.2.1 Exercises","containsRefs":false,"markdown":"\n\n\n1.  **Create a new Quarto document using *File \\> New File \\> Quarto Document*. Read the instructions. Practice running the chunks individually. Then render the document by clicking the appropriate button and then by using the appropriate keyboard short cut. Verify that you can modify the code, re-run it, and see modified output.**\n\n-   The document has been created. Some of the chunks are as follows:\n\n```{r}\n#| label: setup\nlibrary(tidyverse)\n```\n\n```{r}\n#| label: diamonds1\n#| message: false\ndiamonds |> \n  filter(carat > 2) |>\n  ggplot(mapping = aes(x=carat, y=price,\n                       color = color)) +\n  geom_point(alpha = 0.5) + \n  #scale_y_continuous(trans = \"log\") +\n  geom_smooth(se=FALSE) + \n  scale_color_brewer(palette = 2)\n```\n\n-   Verifying that the code can be modified and re-run:--\n\n```{r error=FALSE, message=FALSE}\n#| label: Plot2-Diamonds-Improved\n\ndiamonds |> \n  filter(carat > 2) |>\n  filter (carat < 3) |>\n  filter (price > 10000) |>\n  ggplot(mapping = aes(x=carat, y=price,\n                       color = color)) +\n  geom_point(alpha = 0.3) + \n  scale_y_continuous(trans = \"log\") +\n  geom_smooth(se=FALSE) + \n  scale_color_brewer(palette = 4) +\n  theme_minimal() +\n  labs(title = \"Plot of relation between Carat and Price\",\n       subtitle = \"For different colours of diamonds\",\n       y = \"Price (in $)\", x = \"Carat\") +\n  theme(legend.position = \"bottom\")\n```\n\n2.  **Create one new Quarto document for each of the three built-in formats: HTML, PDF and Word. Render each of the three documents. How do the outputs differ? How do the inputs differ? (You may need to install LaTeX in order to build the PDF output --- RStudio will prompt you if this is necessary.)**\n\nThe outputs are different in the following ways:\\--\n\n-   The output text and code are same, but rendering to PDF takes more time than Word. HTML rendering seems to be the fastest.\n\n-   PDF and MS Word cannot incorporate interactive graphics, while HTML offers interactivity.\n\n-   The size of the PDF document is the largest, followed by MS Word document, while the HTML uses the least disk space.\n\n# 29.3.1 Exercises\n\n1.  **Re-create the document in [Figure 29.5](https://r4ds.hadley.nz/quarto.html#fig-visual-editor) using the visual editor.**\n\nText Formatting\n\n*italic* **bold** underline ~~strikeout~~ [small caps]{.smallcaps} `code` superscript^2^ and subscript~2~\n\n### Headings\n\n# 1st Level Header\n\n## 2nd Level Header\n\n### 3rd Level Header\n\n## Lists\n\n-   Bulleted list item 1\n\n-   Item 2\n\n    -   Item 2a\n\n    -   Item 2b\n\n1.  Numbered list item 1\n\n2.  Item 2. The numbers are incremented automatically in the output.\n\n### Links and Images\n\n<https://example.com/>\n\n[linked phrases](https://www.oxfordinternationalenglish.com/linking-words-and-phrases-in-english/ \"Oxford English Dictionary meaning of Linked Phrases\")\n\n[![Credits: Nick Tierney's (mostly) rstats blog](https://www.njtierney.com/post/2022/04/11/rmd-to-qmd/imgs/r-knitr-rmd.jpeg){fig-alt=\"Notes on Changing from Rmarkdown/Bookdown to Quarto\" width=\"338\"}](https://www.njtierney.com/post/2022/04/11/rmd-to-qmd/)\n\nTables\n\n| First Header     | Second Header    |\n|------------------|------------------|\n| Content Cell 1.1 | Content Cell 2.1 |\n| Content Cell 1.2 | Content Cell 2.2 |\n| Content Cell 1.3 | Content Cell 2.3 |\n\n: My First Table in Quarto\n\n2.  **Using the visual editor, insert a code chunk using the Insert menu and then the insert anything tool.**\n\n    Here, I am inserting a code chunk using simple the \"/\" key, and then selecting R-code option:\\--\n\n    ```{r}\n    #| label: Hello-World\n    print(\"Hello World\")\n    ```\n\n3.  **Using the visual editor, figure out how to:**\n\n    a.  **Add a footnote.**\n\n        You can add a foot note by selecting the menu **Insert** --\\> **Footnote**; or, by using **Ctrl+Shift+7**. Here is an example.[^1]\n\n    b.  **Add a horizontal rule.**\n\n        You can add a foot note by selecting the menu **Insert** --\\> **Horizontal Rule**. Here is an example:\\--\n\n        ------------------------------------------------------------------------\n\n    c.  **Add a block quote.**\n\n        You can add a foot note by selecting the menu **Format** --\\> **Block quote**. Here is how we add a block quote:-\n\n        > A block quote is a long quote formatted as a separate \"block\" of text. Instead of using quotation marks, you place the quote on a new line, and indent the entire quote to mark it apart from your own words[^2]\n\n4.  **In the visual editor, go to Insert \\> Citation and insert a citation to the paper titled [Welcome to the Tidyverse](https://joss.theoj.org/papers/10.21105/joss.01686) using its DOI (digital object identifier), which is [10.21105/joss.01686](https://doi.org/10.21105/joss.01686). Render the document and observe how the reference shows up in the document. What change do you observe in the YAML of your document?**\n\n[^1]: This is a sample footnote to answer the Question 3(a) of the 29.3.1 Exercises within the Chapter 29 \"Quarto\" of the Book \"[R for Data Science, 2nd Edition](https://r4ds.hadley.nz/ \"R for Data Science (2e)\")\" by Wickham, Cetinkaya-Rundel & Grolemund.\n\n[^2]: Source: [Scribbr.com](https://www.scribbr.com/frequently-asked-questions/what-is-a-block-quote/ \"FAQs at scribbr.com\"). What is a block quote?\n\nLet us first add some text from the paper, so that we can use a citation:\\-\\--\n\n> At a high level, the tidyverse is a language for solving data science challenges with R code. Its primary goal is to facilitate a conversation between a human and a computer about data. Less abstractly, the tidyverse is a collection of R packages that share a high-level design philosophy and low-level grammar and data structures, so that learning one package makes it easier to learn the next. [@wickham2019]\n\nOnce we render the document, the citation shows up in the very end of the HTML webpage rendered. It is displayed just above the footnotes. The YAML header of the document, when viewed in the \"Source\" displays an additional line `bibliography: references.bib`.\n\n# 29.4.1 Exercises\n\n1.  **Practice what you've learned by creating a brief CV. The title should be your name, and you should include headings for (at least) education or employment. Each of the sections should include a bulleted list of jobs/degrees. Highlight the year in bold.**\n\n    #### Aditya Dahiya\n\n    -   Education\n\n        -   **2005 - 2010:** Bachelor of Medicine and Bachelor of Surgery (M.B.B.S.), All India Institute of Medical Sciences, New Delhi\n\n        -   **2011-2013:** Master of Arts (Public Policy), Indira Gandhi National Open University\n\n        -   **2021-22:** Master of Public Health, Harvard University, U.S.A.\n\n    -   Employment\n\n        -   **2010-2011:** Junior Resident Doctor, Neuro-Radiology, A.I.I.M.S., New Delhi\n\n        -   **2011-to date:** Indian Administrative Services, Government of India\n\n2.  **Using the source editor and the Markdown quick reference, figure out how to:**\n\n    a.  **Add a footnote.**\n\n        To begin with we add a footnote here.[^3] Then, we inspect the `Source` tab and find that the method to create a footnote in source editor is to use `[^x]`, where `x` represents the footnote number. Further, I could not find the `footnote` option in **Markdown Quick Reference** though **Help** menu in the RStudio. But, I searched online and found from [here](https://crimebythenumbers.com/r-markdown.html \"Crime by the Numbers: A Criminologist’s Guide to R by Jacob Kaplan\") that \"*to create a footnote in R Markdown, you use the carrot \\^ followed immediately by square brackets \\[\\]. Put the text inside of the \\[\\] and it'll print that at the bottom of the page.* *Code for a footnote will look like this: \\^\\[This sentence will be printed as a footnote.\\] .* So, I try it here again. [^4]\n\n    b.  **Add a horizontal rule.**\n\n        The easiest way to add a horizontal rule in the source editor is \"\\-\\--\", i.e. three hyphens. Or, in the **Visual** editor, we can choose **Insert** -\\> **Horizontal Rule**.\n\n        ------------------------------------------------------------------------\n\n    c.  **Add a block quote.**\n\n        A block quote can be added in the source editor by using a tab, followed by `>` key, followed by the text. Further, the book, [R Markdown: The Definitive Guide](https://bookdown.org/yihui/rmarkdown/tufte-quotes.html \"R Markdown: The Definitive Guide by Yihui Xie, J. J. Allaire, Garrett Grolemund\"), tells us that *\"paragraphs that start with* `>` *are converted to block quotes.\"*\n\n3.  **Copy and paste the contents of `diamond-sizes.qmd` from <https://github.com/hadley/r4ds/tree/main/quarto> in to a local R Quarto document. Check that you can run it, then add text after the frequency polygon that describes its most striking features.**\n\n[^3]: I use Ctrl + Shift + 7 to create a footnote here.\n\n[^4]: This is a test footnote I wrote in the Source Editor\n\n```{r}\n#| include: false\n#| label: Tidyverse-Diamonds\nlibrary(tidyverse)\n\nsmaller = diamonds |> \n  filter(carat <= 2.5)\n```\n\nWe have data about `r nrow(diamonds)` diamonds. Only `r nrow(diamonds) - nrow(smaller)` are larger than 2.5 carats. The distribution of the remainder is shown below:\n\n```{r}\n#| label: plot-smaller-diamonds\n#| echo: false\n\nsmaller |> \n  ggplot(aes(x = carat)) + \n  geom_freqpoly(binwidth = 0.01)\nrm(smaller)\n```\n\n**Here's the paragraph:** The frequency polygon tells us that the carat distribution peaks at increments of 0.1, reflecting the fact the measurements of `carat` is done in increments of 0.1. Further, there are fewer diamonds of higher `carat` size.\n\n4.  **Create a document in a Google doc or MS Word (or locate a document you have created previously) with some content in it such as headings, hyperlinks, formatted text, etc. Copy the contents of this document and paste it into a Quarto document in the visual editor. Then, switch over to the source editor and inspect the source code.**\n\nThis is sample MS Word Document. I will copy this document into **Visual Editor** of Quarto, and then see the code entered in the **Source Editor**.\n\n-   **First, here's a list of 4 largest continents:**\n\n    (i) Asia\n    (ii) Africa\n    (iii) North America\n    (iv) South America\n    (v) Europe\n    (vi) Oceania\n    (vii) Antarctica\n\n-   **Second, here's a list of largest oceans**\n\n    1.  Pacific Ocean\n    2.  Atlantic Ocean\n    3.  Indian Ocean\n    4.  Arctic Ocean\n    5.  Southern Ocean\n\nThe text can be **bold,** *iltalic,* or, it can be [underlined.]{.underline}\n\nI observe that The **Source Editor** automatically inserts the R Markdown code needed to produce the visual output of MS Word. The **Visual Editor** displays the text, just like MS Word. Of course, there are some bugs, especially in bulletined lists and numbered lists with indents. I am unable to create copy the format of sub-lists within bullet points into the **Visual Editor**. So, I manually went to the **Source Editor,** and inserted two `tabs` before each sub-list point. But, for retaining the formatting of **bold,** *italics* or underline, the Visual Editor of Quarto is pretty awesome!\n\n```{r}\n#| label: Testing-Chapter-29.5\n#| \n1+3 / 4\n```\n\n# **29.5.5 Exercises**\n\n1.  **Add a section that explores how diamond sizes vary by cut, color, and clarity. Assume you're writing a report for someone who doesn't know R, and instead of setting `echo: false` on each chunk, set a global option.**\n\nLet's explore the `diamonds` data-set. There are `r format(nrow(diamonds), big.mark = \",\")` diamonds in the data-set. We create histograms for `color`, `cut` and `clarity`. These three help us explore the distribution of diamonds among different types of `color`, `cut` and `clarity`. To not display the code, I use `#|echo: false` at the start of the chunk. Alternatively, I could use the following code in the YAML header:\n\n```{r}\n#| eval: false\n#| label: Global-Options-Format\nknitr: \n  opts_chunk: \n    collapse: true\n```\n\n```{r}\n#| label: ggplot2-example\nnrow(diamonds)\ng1 = ggplot(data = diamonds, mapping = aes(y = cut)) + \n  geom_bar(stat = \"count\") +\n  theme_classic() +\n  labs(x = NULL, y = \"Cut\")\ng2 = ggplot(data = diamonds, mapping = aes(y = color,\n                                      fill = color,\n                                      color = color)) + \n  geom_bar(stat = \"count\") +\n  theme_classic() +\n  labs(x = NULL, y = \"Color\") +\n  theme(legend.position = \"null\")\ng3 = ggplot(data = diamonds, mapping = aes(y = clarity)) + \n  geom_bar(stat = \"count\") +\n  theme_classic() +\n  labs(x = \"Number of Diamonds\", y = \"Clarity\") +\n  theme(legend.position = \"null\")\nlibrary(patchwork)\np = g1 / g2 / g3 + plot_layout(ncol = 1)\nprint(p)\n```\n\n2.  **Download `diamond-sizes.qmd` from <https://github.com/hadley/r4ds/tree/main/quarto>. Add a section that describes the largest 20 diamonds, including a table that displays their most important attributes.**\n\n    Here's the added section.\n\n    Examining the 20 largest diamonds, by `carat` since we know from American Gem Society's [website](https://www.americangemsociety.org/buying-diamonds-with-confidence/4cs-of-diamonds/understanding-diamond-carat-weight-the-4cs-of-diamonds/#:~:text=Carat%20is%20the%20unit%20of,carat%20equals%200.007%20ounce%20avoirdupois. \"Understanding Diamond Carat Weight: The 4Cs of Diamonds\") that *\"Carat is the unit of measurement for the physical weight of diamonds. One carat equals 0.200 grams or 1/5 gram and is subdivided into 100 points.\"*\n\n    ```{r}\n    #| label: Largest-20-diamonds\n    #| fig-show: hold\n    #| fig-cap: Comparison of the distribution of cut, color and clarity amongst all diamonds vs. the 20 largest diamonds\n\n    top20 = diamonds |>\n      arrange(desc(carat)) |>\n      top_n(20)\n\n    # Examining the cut, color and clarity of the top 20 diamonds, in comparison to all diamonds\n    g4 = ggplot(data = top20, mapping = aes(y = cut)) + \n      geom_bar(stat = \"count\") +\n      theme_classic() +\n      labs(x = NULL, y = \"Cut\")\n    g5 = ggplot(data = top20, mapping = aes(y = color,\n                                          fill = color,\n                                          color = color)) + \n      geom_bar(stat = \"count\") +\n      theme_classic() +\n      labs(x = NULL, y = \"Color\") +\n      theme(legend.position = \"null\")\n    g6 = ggplot(data = top20, mapping = aes(y = clarity)) + \n      geom_bar(stat = \"count\") +\n      theme_classic() +\n      labs(x = \"No. of Largest Diamonds\", y = \"Clarity\") +\n      theme(legend.position = \"null\")\n    library(patchwork)\n    p1 = g1 / g2 / g3 / g4 / g5 / g6 + plot_layout(ncol = 2, \n                                                   nrow = 3,\n                                                   byrow = FALSE)\n    print(p1)\n    ```\n\n    Hence, we can see that the largest diamonds are, on average, of poorer cut, i.e. `Fair`. They are more likely to be of `l1` `clarity` and `J` and `I` colours.\n\n    ```{r}\n    #| label: Remove-Objects\n    #| echo: false\n    rm(list = ls())\n    ```\n\n3.  **Modify `diamonds-sizes.qmd` to use `label_comma()` to produce nicely formatted output. Also include the percentage of diamonds that are larger than 2.5 carats.**\n\n```{r}\n#| label: Comma-Function-Smaller-Diamonds\nsmaller <- diamonds |> \n  filter(carat <= 2.5)\ncomma = function(x) {format(x, digits = 2, big.mark = \",\")}\n```\n\nThus, we conclude that we have data about `r comma(nrow(diamonds))` diamonds. Only `r comma(nrow(diamonds) - nrow(smaller))` are larger than 2.5 carats. The percentage of diamonds that are larger than 2.5 carats is `r comma(100*(nrow(diamonds)-nrow(smaller))/nrow(diamonds))` %. The inline code that I used to get these numbers is:--\n\n```{r}\n#| label: 29.5.5-Question-3-Code\n#| eval: false\ncomma(nrow(diamonds))\ncomma(nrow(diamonds)-nrow(smaller))\ncomma(100*(nrow(diamonds)-nrow(smaller))/nrow(diamonds))\n```\n\n# **29.6.3 Exercises**\n\n1.  **Open `diamond-sizes.qmd` in the visual editor, find an image of a diamond, copy it, and paste it into the document. Double click on the image and add a caption. Resize the image and render your document. Observe how the image is saved in your current working directory.**\n\n    Let's add an image of a diamond here.\n\n    [![Diamond using Canon, EOS 80D. Credits: image from unsplash.com Published May 27, 2020.](images/Diamond-Unsplash.jpg){width=\"3in\"}](https://unsplash.com/photos/RD5GI4A4bu4){#fig-diamondphoto}\n\n    When I render the document, the same image is saved in the `/docs/images` directory of my Quarto Website project. The image name is the same as that of the original file.\n\n2.  **Edit the label of the code chunk in `diamond-sizes.qmd` that generates a plot to start with the prefix `fig-` and add a caption to the figure with the chunk option `fig-cap`. Then, edit the text above the code chunk to add a cross-reference to the figure with Insert \\> Cross Reference.**\n\n    The R-code for generating the figure has been copied from `diamond-sizes.qmd`. It is displayed below. The cross-reference to the generated figure is @fig-freqpoly. I do this by adding `#| label: fig-freqpoly` and `#| fig-cap: \"Frequency Polygon of smaller diamonds\"` before the `R` code.\n\n    ```{r}\n    #| label: fig-freqpoly\n    #| fig-cap: \"Frequency Polygon of smaller diamonds\"\n\n    diamonds |> \n      filter(carat <= 2.5) |>\n      ggplot(aes(x = carat)) + \n        geom_freqpoly(binwidth = 0.01) +\n        theme_light() +\n        labs(x=\"Diamond Carat Size\", y = \"Number of Diamonds\")\n    ```\n\n3.  **Change the size of the figure with the following chunk options, one at a time, render your document, and describe how the figure changes.**\n\n    I have created the 4 figures in a separate `.qmd` file, `Ch29-6-3-1.qmd`. You can check the file in the GitHub repository [here](https://github.com/Aditya-Dahiya/RfDS2solutions/blob/main/Ch29-6-3-1-3.qmd \"The .qmd file for Question 3\"). The results are as follows:\n\n    a.  The option `fig-width:10` keeps the width at a fixed 10 inches\n\n    b.  The option `fig-height: 3` keeps the height at a fixed 3 inches, and thus disturbs the aspect ratio\n\n    c.  The option `out-width:\"100%\"` keeps the aspect ratio fixed at the default *(approximately 0.618, the golden ratio)*, and makes the plot occupy 100% width of the knitted HTML document.\n\n    d.  The option `out-width: \"20%\"` keeps the aspect ratio fixed at the default *(approximately 0.618, the golden ratio)*, and makes the plot occupy only **20% width** of the knitted HTML document. This makes the plot too small to see.\n\n    Overall, after many iterations, I agree that the one of the best options would be `out-width: \"70%\"` and the `fig-align: center`, as this preserves the aspect ratio, and allows some breathing space on the sides of the plot.\n\n# **29.7.1 Exercises**\n\n1.  **Open `diamond-sizes.qmd` in the visual editor, insert a code chunk, and add a table with [`knitr::kable()`](https://rdrr.io/pkg/knitr/man/kable.html) that shows the first 5 rows of the `diamonds` data frame.**\n\n    I will use the `kable` and the `kableExtra` packages to produce the Table. The table dispalys the largest 5 diamonds by the `carat` size variable.\n\n    ```{r}\n    library(kableExtra)\n    diamonds |>\n      top_n(5, carat) |>\n      kbl() |>\n      kable_classic_2(full_width = FALSE)\n\n    ```\n\n2.  **Display the same table with `gt::gt()` instead.**\n\n    The `gt` package gives us even more flexibility to add Title, Sub-title and even do R-Markdown style font editing in the text entered in the subtitle below.\n\n    ```{r}\n    library(gt)\n    diamonds |>\n      top_n(5, carat) |>\n      gt() |>\n      tab_header(title = \"The attributes of the largest 5 diamonds\",\n                 subtitle = md(\"Source: *Diamonds* Dataset; **R** Tidyverse\"))\n    ```\n\n3.  **Add a chunk label that starts with the prefix `tbl-` and add a caption to the table with the chunk option `tbl-cap`. Then, edit the text above the code chunk to add a cross-reference to the table with Insert \\> Cross Reference.**\n\n    Now, I use the `tbl-cap` option in the chunk to create a caption for the table, and cross reference it here in the text as @tbl-gttab2. This is done by adding `#| label: tbl-gttab2` and `#| tbl-cap: \"gt table with a cross-reference caption\"` before the `R` code.\n\n    ```{r}\n    #| label: tbl-gttab2\n    #| tbl-cap: \"gt table with a cross-reference caption\"\n\n    library(gt)\n    diamonds |>\n      top_n(5, carat) |>\n      gt() |>\n      tab_header(title = \"The attributes of the largest 5 diamonds\",\n                 subtitle = md(\"Source: *Diamonds* Dataset; **R** Tidyverse\"))\n    ```\n\n# **29.8.1 Exercises**\n\n1.  **Set up a network of chunks where `d` depends on `c` and `b`, and both `b` and `c` depend on `a`. Have each chunk print [`lubridate::now()`](https://lubridate.tidyverse.org/reference/now.html), set `cache: true`, then verify your understanding of caching.**\n\n    Let's generate the first chunk by the name `cache-a` below:-\n\n    ```{r}\n    #| label: cache-a\n    #| cache: true\n\n    library(lubridate)\n    now()\n    ```\n\n    The second, third and fourth chunks are:-\n\n    The Chunk named `cache-b`\n\n    ```{r}\n    #| label: cache-b\n    #| cache: true\n    #| dependson: \"cache-a\"\n\n    library(lubridate)\n    now()\n    ```\n\n    The chunk named `cache-c`\n\n    ```{r}\n    #| label: cache-c\n    #| cache: true\n    #| dependson: \"cache-a\"\n\n    library(lubridate)\n    now()\n    ```\n\n    The chunk named `cache-d`\n\n    ```{r}\n    #| label: cache-d\n    #| cache: true\n    #| dependson: c(\"cache-b\", \"cache-c\")\n\n    library(lubridate)\n    now()\n    ```\n\n    The way I understand it, `cache-d` depends on either of the two code chunks' (`cache-b` and `cache-c`) results changing. And, both of these in turn depend on `cache-a`'s results changing. Thus, on each rendering of the file, we see that this chunk `cache-a` will never its result because it has been cached, i.e. we had put `#| cache: true` above the first code chunk called `cache-a`. Since the code itself never changes, `R` and ***Quarto*** never bother to re-run the code again, rather than just use the output, i.e. the time from when the code first ran! And, the other three chunks depend on `cache-a` changing, which does not. Thus, all the four code chunks are stuck with the same output i.e., the date and time when this code was first run afresh. Hope I am getting this right! If not, please raise an issue or a pull request on GitHub [here](https://github.com/Aditya-Dahiya/RfDS2solutions/blob/main/Chapter29.qmd \"Chapter 29 qmd file\").\n\n# 29.11 Workflow\n\nLessons from the Workflow chapter include the following:\n\n1.  Include the `sessionInfo()` as a easy and dirty hack to know the version of packages used during the intial rendering of this quarto document and its `R` code.\n\n    ```{r}\n    #| label: sessionInfo\n    sessionInfo()\n    ```\n\n2.  Use the `renv` package to store the exact versions of the packages to run your code years from now.\n\n    ```{r}\n    #| label: renv-package\n    # install.packages(renv)\n    # renv::init()\n    # renv::deactivate(clean = TRUE)\n    ```\n\n3.  Avoid entering data in `R` , but if you must, use the function `tribble()` of the package `tibble`\n\n    ```{r}\n    #| label: entering-data-with-tibble\n    tibble(alpha = 1:5,\n                  beta = LETTERS[1:5],\n                  gamma = 101:105,\n                  delta = LETTERS[21:25]) |>\n      gt::gt() |>\n      gt::tab_caption(caption = \"A Temporary Table created using tibble()\") |>\n      gt::tab_header(title = \"A temporary Table\")\n    ```\n","srcMarkdownNoYaml":"\n\n# 29.2.1 Exercises\n\n1.  **Create a new Quarto document using *File \\> New File \\> Quarto Document*. Read the instructions. Practice running the chunks individually. Then render the document by clicking the appropriate button and then by using the appropriate keyboard short cut. Verify that you can modify the code, re-run it, and see modified output.**\n\n-   The document has been created. Some of the chunks are as follows:\n\n```{r}\n#| label: setup\nlibrary(tidyverse)\n```\n\n```{r}\n#| label: diamonds1\n#| message: false\ndiamonds |> \n  filter(carat > 2) |>\n  ggplot(mapping = aes(x=carat, y=price,\n                       color = color)) +\n  geom_point(alpha = 0.5) + \n  #scale_y_continuous(trans = \"log\") +\n  geom_smooth(se=FALSE) + \n  scale_color_brewer(palette = 2)\n```\n\n-   Verifying that the code can be modified and re-run:--\n\n```{r error=FALSE, message=FALSE}\n#| label: Plot2-Diamonds-Improved\n\ndiamonds |> \n  filter(carat > 2) |>\n  filter (carat < 3) |>\n  filter (price > 10000) |>\n  ggplot(mapping = aes(x=carat, y=price,\n                       color = color)) +\n  geom_point(alpha = 0.3) + \n  scale_y_continuous(trans = \"log\") +\n  geom_smooth(se=FALSE) + \n  scale_color_brewer(palette = 4) +\n  theme_minimal() +\n  labs(title = \"Plot of relation between Carat and Price\",\n       subtitle = \"For different colours of diamonds\",\n       y = \"Price (in $)\", x = \"Carat\") +\n  theme(legend.position = \"bottom\")\n```\n\n2.  **Create one new Quarto document for each of the three built-in formats: HTML, PDF and Word. Render each of the three documents. How do the outputs differ? How do the inputs differ? (You may need to install LaTeX in order to build the PDF output --- RStudio will prompt you if this is necessary.)**\n\nThe outputs are different in the following ways:\\--\n\n-   The output text and code are same, but rendering to PDF takes more time than Word. HTML rendering seems to be the fastest.\n\n-   PDF and MS Word cannot incorporate interactive graphics, while HTML offers interactivity.\n\n-   The size of the PDF document is the largest, followed by MS Word document, while the HTML uses the least disk space.\n\n# 29.3.1 Exercises\n\n1.  **Re-create the document in [Figure 29.5](https://r4ds.hadley.nz/quarto.html#fig-visual-editor) using the visual editor.**\n\nText Formatting\n\n*italic* **bold** underline ~~strikeout~~ [small caps]{.smallcaps} `code` superscript^2^ and subscript~2~\n\n### Headings\n\n# 1st Level Header\n\n## 2nd Level Header\n\n### 3rd Level Header\n\n## Lists\n\n-   Bulleted list item 1\n\n-   Item 2\n\n    -   Item 2a\n\n    -   Item 2b\n\n1.  Numbered list item 1\n\n2.  Item 2. The numbers are incremented automatically in the output.\n\n### Links and Images\n\n<https://example.com/>\n\n[linked phrases](https://www.oxfordinternationalenglish.com/linking-words-and-phrases-in-english/ \"Oxford English Dictionary meaning of Linked Phrases\")\n\n[![Credits: Nick Tierney's (mostly) rstats blog](https://www.njtierney.com/post/2022/04/11/rmd-to-qmd/imgs/r-knitr-rmd.jpeg){fig-alt=\"Notes on Changing from Rmarkdown/Bookdown to Quarto\" width=\"338\"}](https://www.njtierney.com/post/2022/04/11/rmd-to-qmd/)\n\nTables\n\n| First Header     | Second Header    |\n|------------------|------------------|\n| Content Cell 1.1 | Content Cell 2.1 |\n| Content Cell 1.2 | Content Cell 2.2 |\n| Content Cell 1.3 | Content Cell 2.3 |\n\n: My First Table in Quarto\n\n2.  **Using the visual editor, insert a code chunk using the Insert menu and then the insert anything tool.**\n\n    Here, I am inserting a code chunk using simple the \"/\" key, and then selecting R-code option:\\--\n\n    ```{r}\n    #| label: Hello-World\n    print(\"Hello World\")\n    ```\n\n3.  **Using the visual editor, figure out how to:**\n\n    a.  **Add a footnote.**\n\n        You can add a foot note by selecting the menu **Insert** --\\> **Footnote**; or, by using **Ctrl+Shift+7**. Here is an example.[^1]\n\n    b.  **Add a horizontal rule.**\n\n        You can add a foot note by selecting the menu **Insert** --\\> **Horizontal Rule**. Here is an example:\\--\n\n        ------------------------------------------------------------------------\n\n    c.  **Add a block quote.**\n\n        You can add a foot note by selecting the menu **Format** --\\> **Block quote**. Here is how we add a block quote:-\n\n        > A block quote is a long quote formatted as a separate \"block\" of text. Instead of using quotation marks, you place the quote on a new line, and indent the entire quote to mark it apart from your own words[^2]\n\n4.  **In the visual editor, go to Insert \\> Citation and insert a citation to the paper titled [Welcome to the Tidyverse](https://joss.theoj.org/papers/10.21105/joss.01686) using its DOI (digital object identifier), which is [10.21105/joss.01686](https://doi.org/10.21105/joss.01686). Render the document and observe how the reference shows up in the document. What change do you observe in the YAML of your document?**\n\n[^1]: This is a sample footnote to answer the Question 3(a) of the 29.3.1 Exercises within the Chapter 29 \"Quarto\" of the Book \"[R for Data Science, 2nd Edition](https://r4ds.hadley.nz/ \"R for Data Science (2e)\")\" by Wickham, Cetinkaya-Rundel & Grolemund.\n\n[^2]: Source: [Scribbr.com](https://www.scribbr.com/frequently-asked-questions/what-is-a-block-quote/ \"FAQs at scribbr.com\"). What is a block quote?\n\nLet us first add some text from the paper, so that we can use a citation:\\-\\--\n\n> At a high level, the tidyverse is a language for solving data science challenges with R code. Its primary goal is to facilitate a conversation between a human and a computer about data. Less abstractly, the tidyverse is a collection of R packages that share a high-level design philosophy and low-level grammar and data structures, so that learning one package makes it easier to learn the next. [@wickham2019]\n\nOnce we render the document, the citation shows up in the very end of the HTML webpage rendered. It is displayed just above the footnotes. The YAML header of the document, when viewed in the \"Source\" displays an additional line `bibliography: references.bib`.\n\n# 29.4.1 Exercises\n\n1.  **Practice what you've learned by creating a brief CV. The title should be your name, and you should include headings for (at least) education or employment. Each of the sections should include a bulleted list of jobs/degrees. Highlight the year in bold.**\n\n    #### Aditya Dahiya\n\n    -   Education\n\n        -   **2005 - 2010:** Bachelor of Medicine and Bachelor of Surgery (M.B.B.S.), All India Institute of Medical Sciences, New Delhi\n\n        -   **2011-2013:** Master of Arts (Public Policy), Indira Gandhi National Open University\n\n        -   **2021-22:** Master of Public Health, Harvard University, U.S.A.\n\n    -   Employment\n\n        -   **2010-2011:** Junior Resident Doctor, Neuro-Radiology, A.I.I.M.S., New Delhi\n\n        -   **2011-to date:** Indian Administrative Services, Government of India\n\n2.  **Using the source editor and the Markdown quick reference, figure out how to:**\n\n    a.  **Add a footnote.**\n\n        To begin with we add a footnote here.[^3] Then, we inspect the `Source` tab and find that the method to create a footnote in source editor is to use `[^x]`, where `x` represents the footnote number. Further, I could not find the `footnote` option in **Markdown Quick Reference** though **Help** menu in the RStudio. But, I searched online and found from [here](https://crimebythenumbers.com/r-markdown.html \"Crime by the Numbers: A Criminologist’s Guide to R by Jacob Kaplan\") that \"*to create a footnote in R Markdown, you use the carrot \\^ followed immediately by square brackets \\[\\]. Put the text inside of the \\[\\] and it'll print that at the bottom of the page.* *Code for a footnote will look like this: \\^\\[This sentence will be printed as a footnote.\\] .* So, I try it here again. [^4]\n\n    b.  **Add a horizontal rule.**\n\n        The easiest way to add a horizontal rule in the source editor is \"\\-\\--\", i.e. three hyphens. Or, in the **Visual** editor, we can choose **Insert** -\\> **Horizontal Rule**.\n\n        ------------------------------------------------------------------------\n\n    c.  **Add a block quote.**\n\n        A block quote can be added in the source editor by using a tab, followed by `>` key, followed by the text. Further, the book, [R Markdown: The Definitive Guide](https://bookdown.org/yihui/rmarkdown/tufte-quotes.html \"R Markdown: The Definitive Guide by Yihui Xie, J. J. Allaire, Garrett Grolemund\"), tells us that *\"paragraphs that start with* `>` *are converted to block quotes.\"*\n\n3.  **Copy and paste the contents of `diamond-sizes.qmd` from <https://github.com/hadley/r4ds/tree/main/quarto> in to a local R Quarto document. Check that you can run it, then add text after the frequency polygon that describes its most striking features.**\n\n[^3]: I use Ctrl + Shift + 7 to create a footnote here.\n\n[^4]: This is a test footnote I wrote in the Source Editor\n\n```{r}\n#| include: false\n#| label: Tidyverse-Diamonds\nlibrary(tidyverse)\n\nsmaller = diamonds |> \n  filter(carat <= 2.5)\n```\n\nWe have data about `r nrow(diamonds)` diamonds. Only `r nrow(diamonds) - nrow(smaller)` are larger than 2.5 carats. The distribution of the remainder is shown below:\n\n```{r}\n#| label: plot-smaller-diamonds\n#| echo: false\n\nsmaller |> \n  ggplot(aes(x = carat)) + \n  geom_freqpoly(binwidth = 0.01)\nrm(smaller)\n```\n\n**Here's the paragraph:** The frequency polygon tells us that the carat distribution peaks at increments of 0.1, reflecting the fact the measurements of `carat` is done in increments of 0.1. Further, there are fewer diamonds of higher `carat` size.\n\n4.  **Create a document in a Google doc or MS Word (or locate a document you have created previously) with some content in it such as headings, hyperlinks, formatted text, etc. Copy the contents of this document and paste it into a Quarto document in the visual editor. Then, switch over to the source editor and inspect the source code.**\n\nThis is sample MS Word Document. I will copy this document into **Visual Editor** of Quarto, and then see the code entered in the **Source Editor**.\n\n-   **First, here's a list of 4 largest continents:**\n\n    (i) Asia\n    (ii) Africa\n    (iii) North America\n    (iv) South America\n    (v) Europe\n    (vi) Oceania\n    (vii) Antarctica\n\n-   **Second, here's a list of largest oceans**\n\n    1.  Pacific Ocean\n    2.  Atlantic Ocean\n    3.  Indian Ocean\n    4.  Arctic Ocean\n    5.  Southern Ocean\n\nThe text can be **bold,** *iltalic,* or, it can be [underlined.]{.underline}\n\nI observe that The **Source Editor** automatically inserts the R Markdown code needed to produce the visual output of MS Word. The **Visual Editor** displays the text, just like MS Word. Of course, there are some bugs, especially in bulletined lists and numbered lists with indents. I am unable to create copy the format of sub-lists within bullet points into the **Visual Editor**. So, I manually went to the **Source Editor,** and inserted two `tabs` before each sub-list point. But, for retaining the formatting of **bold,** *italics* or underline, the Visual Editor of Quarto is pretty awesome!\n\n```{r}\n#| label: Testing-Chapter-29.5\n#| \n1+3 / 4\n```\n\n# **29.5.5 Exercises**\n\n1.  **Add a section that explores how diamond sizes vary by cut, color, and clarity. Assume you're writing a report for someone who doesn't know R, and instead of setting `echo: false` on each chunk, set a global option.**\n\nLet's explore the `diamonds` data-set. There are `r format(nrow(diamonds), big.mark = \",\")` diamonds in the data-set. We create histograms for `color`, `cut` and `clarity`. These three help us explore the distribution of diamonds among different types of `color`, `cut` and `clarity`. To not display the code, I use `#|echo: false` at the start of the chunk. Alternatively, I could use the following code in the YAML header:\n\n```{r}\n#| eval: false\n#| label: Global-Options-Format\nknitr: \n  opts_chunk: \n    collapse: true\n```\n\n```{r}\n#| label: ggplot2-example\nnrow(diamonds)\ng1 = ggplot(data = diamonds, mapping = aes(y = cut)) + \n  geom_bar(stat = \"count\") +\n  theme_classic() +\n  labs(x = NULL, y = \"Cut\")\ng2 = ggplot(data = diamonds, mapping = aes(y = color,\n                                      fill = color,\n                                      color = color)) + \n  geom_bar(stat = \"count\") +\n  theme_classic() +\n  labs(x = NULL, y = \"Color\") +\n  theme(legend.position = \"null\")\ng3 = ggplot(data = diamonds, mapping = aes(y = clarity)) + \n  geom_bar(stat = \"count\") +\n  theme_classic() +\n  labs(x = \"Number of Diamonds\", y = \"Clarity\") +\n  theme(legend.position = \"null\")\nlibrary(patchwork)\np = g1 / g2 / g3 + plot_layout(ncol = 1)\nprint(p)\n```\n\n2.  **Download `diamond-sizes.qmd` from <https://github.com/hadley/r4ds/tree/main/quarto>. Add a section that describes the largest 20 diamonds, including a table that displays their most important attributes.**\n\n    Here's the added section.\n\n    Examining the 20 largest diamonds, by `carat` since we know from American Gem Society's [website](https://www.americangemsociety.org/buying-diamonds-with-confidence/4cs-of-diamonds/understanding-diamond-carat-weight-the-4cs-of-diamonds/#:~:text=Carat%20is%20the%20unit%20of,carat%20equals%200.007%20ounce%20avoirdupois. \"Understanding Diamond Carat Weight: The 4Cs of Diamonds\") that *\"Carat is the unit of measurement for the physical weight of diamonds. One carat equals 0.200 grams or 1/5 gram and is subdivided into 100 points.\"*\n\n    ```{r}\n    #| label: Largest-20-diamonds\n    #| fig-show: hold\n    #| fig-cap: Comparison of the distribution of cut, color and clarity amongst all diamonds vs. the 20 largest diamonds\n\n    top20 = diamonds |>\n      arrange(desc(carat)) |>\n      top_n(20)\n\n    # Examining the cut, color and clarity of the top 20 diamonds, in comparison to all diamonds\n    g4 = ggplot(data = top20, mapping = aes(y = cut)) + \n      geom_bar(stat = \"count\") +\n      theme_classic() +\n      labs(x = NULL, y = \"Cut\")\n    g5 = ggplot(data = top20, mapping = aes(y = color,\n                                          fill = color,\n                                          color = color)) + \n      geom_bar(stat = \"count\") +\n      theme_classic() +\n      labs(x = NULL, y = \"Color\") +\n      theme(legend.position = \"null\")\n    g6 = ggplot(data = top20, mapping = aes(y = clarity)) + \n      geom_bar(stat = \"count\") +\n      theme_classic() +\n      labs(x = \"No. of Largest Diamonds\", y = \"Clarity\") +\n      theme(legend.position = \"null\")\n    library(patchwork)\n    p1 = g1 / g2 / g3 / g4 / g5 / g6 + plot_layout(ncol = 2, \n                                                   nrow = 3,\n                                                   byrow = FALSE)\n    print(p1)\n    ```\n\n    Hence, we can see that the largest diamonds are, on average, of poorer cut, i.e. `Fair`. They are more likely to be of `l1` `clarity` and `J` and `I` colours.\n\n    ```{r}\n    #| label: Remove-Objects\n    #| echo: false\n    rm(list = ls())\n    ```\n\n3.  **Modify `diamonds-sizes.qmd` to use `label_comma()` to produce nicely formatted output. Also include the percentage of diamonds that are larger than 2.5 carats.**\n\n```{r}\n#| label: Comma-Function-Smaller-Diamonds\nsmaller <- diamonds |> \n  filter(carat <= 2.5)\ncomma = function(x) {format(x, digits = 2, big.mark = \",\")}\n```\n\nThus, we conclude that we have data about `r comma(nrow(diamonds))` diamonds. Only `r comma(nrow(diamonds) - nrow(smaller))` are larger than 2.5 carats. The percentage of diamonds that are larger than 2.5 carats is `r comma(100*(nrow(diamonds)-nrow(smaller))/nrow(diamonds))` %. The inline code that I used to get these numbers is:--\n\n```{r}\n#| label: 29.5.5-Question-3-Code\n#| eval: false\ncomma(nrow(diamonds))\ncomma(nrow(diamonds)-nrow(smaller))\ncomma(100*(nrow(diamonds)-nrow(smaller))/nrow(diamonds))\n```\n\n# **29.6.3 Exercises**\n\n1.  **Open `diamond-sizes.qmd` in the visual editor, find an image of a diamond, copy it, and paste it into the document. Double click on the image and add a caption. Resize the image and render your document. Observe how the image is saved in your current working directory.**\n\n    Let's add an image of a diamond here.\n\n    [![Diamond using Canon, EOS 80D. Credits: image from unsplash.com Published May 27, 2020.](images/Diamond-Unsplash.jpg){width=\"3in\"}](https://unsplash.com/photos/RD5GI4A4bu4){#fig-diamondphoto}\n\n    When I render the document, the same image is saved in the `/docs/images` directory of my Quarto Website project. The image name is the same as that of the original file.\n\n2.  **Edit the label of the code chunk in `diamond-sizes.qmd` that generates a plot to start with the prefix `fig-` and add a caption to the figure with the chunk option `fig-cap`. Then, edit the text above the code chunk to add a cross-reference to the figure with Insert \\> Cross Reference.**\n\n    The R-code for generating the figure has been copied from `diamond-sizes.qmd`. It is displayed below. The cross-reference to the generated figure is @fig-freqpoly. I do this by adding `#| label: fig-freqpoly` and `#| fig-cap: \"Frequency Polygon of smaller diamonds\"` before the `R` code.\n\n    ```{r}\n    #| label: fig-freqpoly\n    #| fig-cap: \"Frequency Polygon of smaller diamonds\"\n\n    diamonds |> \n      filter(carat <= 2.5) |>\n      ggplot(aes(x = carat)) + \n        geom_freqpoly(binwidth = 0.01) +\n        theme_light() +\n        labs(x=\"Diamond Carat Size\", y = \"Number of Diamonds\")\n    ```\n\n3.  **Change the size of the figure with the following chunk options, one at a time, render your document, and describe how the figure changes.**\n\n    I have created the 4 figures in a separate `.qmd` file, `Ch29-6-3-1.qmd`. You can check the file in the GitHub repository [here](https://github.com/Aditya-Dahiya/RfDS2solutions/blob/main/Ch29-6-3-1-3.qmd \"The .qmd file for Question 3\"). The results are as follows:\n\n    a.  The option `fig-width:10` keeps the width at a fixed 10 inches\n\n    b.  The option `fig-height: 3` keeps the height at a fixed 3 inches, and thus disturbs the aspect ratio\n\n    c.  The option `out-width:\"100%\"` keeps the aspect ratio fixed at the default *(approximately 0.618, the golden ratio)*, and makes the plot occupy 100% width of the knitted HTML document.\n\n    d.  The option `out-width: \"20%\"` keeps the aspect ratio fixed at the default *(approximately 0.618, the golden ratio)*, and makes the plot occupy only **20% width** of the knitted HTML document. This makes the plot too small to see.\n\n    Overall, after many iterations, I agree that the one of the best options would be `out-width: \"70%\"` and the `fig-align: center`, as this preserves the aspect ratio, and allows some breathing space on the sides of the plot.\n\n# **29.7.1 Exercises**\n\n1.  **Open `diamond-sizes.qmd` in the visual editor, insert a code chunk, and add a table with [`knitr::kable()`](https://rdrr.io/pkg/knitr/man/kable.html) that shows the first 5 rows of the `diamonds` data frame.**\n\n    I will use the `kable` and the `kableExtra` packages to produce the Table. The table dispalys the largest 5 diamonds by the `carat` size variable.\n\n    ```{r}\n    library(kableExtra)\n    diamonds |>\n      top_n(5, carat) |>\n      kbl() |>\n      kable_classic_2(full_width = FALSE)\n\n    ```\n\n2.  **Display the same table with `gt::gt()` instead.**\n\n    The `gt` package gives us even more flexibility to add Title, Sub-title and even do R-Markdown style font editing in the text entered in the subtitle below.\n\n    ```{r}\n    library(gt)\n    diamonds |>\n      top_n(5, carat) |>\n      gt() |>\n      tab_header(title = \"The attributes of the largest 5 diamonds\",\n                 subtitle = md(\"Source: *Diamonds* Dataset; **R** Tidyverse\"))\n    ```\n\n3.  **Add a chunk label that starts with the prefix `tbl-` and add a caption to the table with the chunk option `tbl-cap`. Then, edit the text above the code chunk to add a cross-reference to the table with Insert \\> Cross Reference.**\n\n    Now, I use the `tbl-cap` option in the chunk to create a caption for the table, and cross reference it here in the text as @tbl-gttab2. This is done by adding `#| label: tbl-gttab2` and `#| tbl-cap: \"gt table with a cross-reference caption\"` before the `R` code.\n\n    ```{r}\n    #| label: tbl-gttab2\n    #| tbl-cap: \"gt table with a cross-reference caption\"\n\n    library(gt)\n    diamonds |>\n      top_n(5, carat) |>\n      gt() |>\n      tab_header(title = \"The attributes of the largest 5 diamonds\",\n                 subtitle = md(\"Source: *Diamonds* Dataset; **R** Tidyverse\"))\n    ```\n\n# **29.8.1 Exercises**\n\n1.  **Set up a network of chunks where `d` depends on `c` and `b`, and both `b` and `c` depend on `a`. Have each chunk print [`lubridate::now()`](https://lubridate.tidyverse.org/reference/now.html), set `cache: true`, then verify your understanding of caching.**\n\n    Let's generate the first chunk by the name `cache-a` below:-\n\n    ```{r}\n    #| label: cache-a\n    #| cache: true\n\n    library(lubridate)\n    now()\n    ```\n\n    The second, third and fourth chunks are:-\n\n    The Chunk named `cache-b`\n\n    ```{r}\n    #| label: cache-b\n    #| cache: true\n    #| dependson: \"cache-a\"\n\n    library(lubridate)\n    now()\n    ```\n\n    The chunk named `cache-c`\n\n    ```{r}\n    #| label: cache-c\n    #| cache: true\n    #| dependson: \"cache-a\"\n\n    library(lubridate)\n    now()\n    ```\n\n    The chunk named `cache-d`\n\n    ```{r}\n    #| label: cache-d\n    #| cache: true\n    #| dependson: c(\"cache-b\", \"cache-c\")\n\n    library(lubridate)\n    now()\n    ```\n\n    The way I understand it, `cache-d` depends on either of the two code chunks' (`cache-b` and `cache-c`) results changing. And, both of these in turn depend on `cache-a`'s results changing. Thus, on each rendering of the file, we see that this chunk `cache-a` will never its result because it has been cached, i.e. we had put `#| cache: true` above the first code chunk called `cache-a`. Since the code itself never changes, `R` and ***Quarto*** never bother to re-run the code again, rather than just use the output, i.e. the time from when the code first ran! And, the other three chunks depend on `cache-a` changing, which does not. Thus, all the four code chunks are stuck with the same output i.e., the date and time when this code was first run afresh. Hope I am getting this right! If not, please raise an issue or a pull request on GitHub [here](https://github.com/Aditya-Dahiya/RfDS2solutions/blob/main/Chapter29.qmd \"Chapter 29 qmd file\").\n\n# 29.11 Workflow\n\nLessons from the Workflow chapter include the following:\n\n1.  Include the `sessionInfo()` as a easy and dirty hack to know the version of packages used during the intial rendering of this quarto document and its `R` code.\n\n    ```{r}\n    #| label: sessionInfo\n    sessionInfo()\n    ```\n\n2.  Use the `renv` package to store the exact versions of the packages to run your code years from now.\n\n    ```{r}\n    #| label: renv-package\n    # install.packages(renv)\n    # renv::init()\n    # renv::deactivate(clean = TRUE)\n    ```\n\n3.  Avoid entering data in `R` , but if you must, use the function `tribble()` of the package `tibble`\n\n    ```{r}\n    #| label: entering-data-with-tibble\n    tibble(alpha = 1:5,\n                  beta = LETTERS[1:5],\n                  gamma = 101:105,\n                  delta = LETTERS[21:25]) |>\n      gt::gt() |>\n      gt::tab_caption(caption = \"A Temporary Table created using tibble()\") |>\n      gt::tab_header(title = \"A temporary Table\")\n    ```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"Chapter29.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.353","editor":"visual","theme":"flatly","title":"Chapter 29: Quarto","author":"Aditya Dahiya","bibliography":["references.bib"],"date":"2023-07-25"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}