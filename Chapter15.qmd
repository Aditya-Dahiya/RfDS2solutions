---
title: "Chapter 15"
author: "Aditya Dahiya"
subtitle: "Strings"
date: 2023-09-10
execute: 
  echo: true
  warning: false
  error: false
  cache: true
filters:
  - social-share
share:
  permalink: "https://aditya-dahiya.github.io/RfDS2solutions/Chapter15.html"
  description: "Solutions: R for Data Science (2e)"
  twitter: true
  facebook: true
  linkedin: true
  email: true
editor_options: 
  chunk_output_type: console
bibliography: references.bib
---

```{r}
#| label: setup
#| echo: false

library(tidyverse)
library(babynames)
```

**Important uses of quoting in `R`: --**

|          |                                                    |
|----------|----------------------------------------------------|
| **Code** | **Purpose**                                        |
| `⁠\n`⁠     | newline (aka 'line feed')                          |
| `\t`⁠     | tab                                                |
| `\b`⁠     | backspace                                          |
| ⁠`\v⁠`     | vertical tab                                       |
| `\\`⁠     | backslash '⁠`\`⁠'                                    |
| `\'`⁠     | ASCII apostrophe '`⁠'⁠`'                             |
| `⁠\"`⁠     | ASCII quotation mark '⁠`"⁠`'                         |
| ⁠`\nnn⁠`   | character with given octal code (1, 2 or 3 digits) |
| ⁠`\xnn⁠`   | character with given hex code (1 or 2 hex digits)  |

# **15.2.4 Exercises**

## Question 1

**Create strings that contain the following values:**

1.  `He said "That's amazing!"`

    ```{r}
    x = "He said \"That's amazing!\""
    str_view(x)
    ```

2.  `\a\b\c\d`

    ```{r}
    x = "\\a\\b\\c\\d"
    str_view(x)
    ```

3.  `\\\\\\`

    ```{r}
    x = "\\\\\\\\\\\\"
    str_view(x)
    ```

## Question 2

**Create the string in your R session and print it. What happens to the special "\\u00a0"? How does [`str_view()`](https://stringr.tidyverse.org/reference/str_view.html) display it? Can you do a little googling to figure out what this special character is?**

```         
x <- "This\u00a0is\u00a0tricky"
```

The `"\u00a0"` represents a white space. By google, I find out that this represents ***No-Break Space (NBSP)***. But, `str_view()` displays it in form of a greenish-blue font `{\u00a0}.`

```{r}
"\u00a0" # This represents a white space
str_view("\u00a0")

x <- "This\u00a0is\u00a0tricky"
print(x)
str_view(x)
```

The `"\u00a0"` represents a non-breaking space character in Unicode encoding. Unicode is a standardized character encoding system that assigns a unique numerical code to almost every character from every writing system in the world, including various symbols, letters, and special characters.

In Unicode, "`\u`" is used to indicate that the following four characters represent a Unicode code point in hexadecimal notation. In this case, `"\u00a0"` represents the code point for the non-breaking space character.

A non-breaking space is a type of space character that is used in typography and word processing to prevent a line break or word wrap from occurring at that particular space.

It is similar to a regular space character (ASCII code 32), but it has the special property of **keeping adjacent words or characters together on the same line when text is justified or formatted**.

# **15.3.4 Exercises**

## Question 1

**Compare and contrast the results of [`paste0()`](https://rdrr.io/r/base/paste.html) with [`str_c()`](https://stringr.tidyverse.org/reference/str_c.html) for the following inputs:**

```         
str_c("hi ", NA) 
str_c(letters[1:2], letters[1:3])
```

As we can see below, `paste0` converts `NA` into a string `"NA"` and simply joins it with another string. However, `str_c()` behaves more sensibly - it generates `NA` if any of the strings being joined is `NA`.

```{r}
str_c("hi ", NA)
paste0("hi ", NA)
```

Further, we see below that we are joining two string vectors of unequal length, i.e., `letters[1:2]` is `"a" "b"` and `letters[1:3]` is `"a" "b" "c"` , both `str_c()` and `paste0()` behave differently.

-   `str_c()` throws an error and informs us that the string vectors being joined are of unequal length.

-   `paste0` simple recycles the shorter string vector silently.

```{r}
# str_c(letters[1:2], letters[1:3])
paste0(letters[1:2], letters[1:3])
```

## Question 2

**What's the difference between [`paste()`](https://rdrr.io/r/base/paste.html) and [`paste0()`](https://rdrr.io/r/base/paste.html)? How can you recreate the equivalent of [`paste()`](https://rdrr.io/r/base/paste.html) with [`str_c()`](https://stringr.tidyverse.org/reference/str_c.html)?**

In R, both **`paste()`** and **`paste0()`** functions are used to concatenate strings together. However, they differ in how they handle separating the concatenated elements.

**`paste()`** concatenates its arguments with a space character as the default separator. We can specify a different separator using the **`sep`** argument.

**`paste0()`** is similar to **`paste()`**, but it does not add any separator between the concatenated elements. It simply combines them as-is.

Here is an example: --

```{r}
vec1 <- c("Hello", "Hi")
vec2 <- c("Amy", "Tom", "Neal")
paste(vec1, vec2)
paste(vec1, vec2, sep = ", ")
paste0(vec1, vec2)
```

We can recreate the equivalent of `paste()` using the `str_c()` function from the `stringr` package in `R`. To do this, we can specify the separator using the `sep` argument in `str_c()` as follows: --

```{r}
vec1 <- c(vec1, "Hallo")
paste(vec1, vec2)
str_c(vec1, vec2, sep = " ")
```

*Note: We had to add a string to `vec1` so that both `vec1` and `vec2` are of length 3. Else, `str_c` will throw up an error.*

## Question 3

**Convert the following expressions from [`str_c()`](https://stringr.tidyverse.org/reference/str_c.html) to [`str_glue()`](https://stringr.tidyverse.org/reference/str_glue.html) or vice versa:**

a.  `str_c("The price of ", food, " is ", price)`

    ``` r
    str_glue("The price of {food} is {price}")
    ```

b.  `str_glue("I'm {age} years old and live in {country}")`

    ``` r
    str_c("I'm ", age, " years old and live in ", country)
    ```

c.  `str_c("\\section{", title, "}")`

    ``` r
    str_glue("\\\\section{{{title}}}")
    ```
